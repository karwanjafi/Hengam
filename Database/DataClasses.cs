using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Drawing;
using System.IO;
using System.Drawing.Imaging;
using System.Net;
using BusinessObjectNamespace;
using DatabaseSchemaNamespace;
using Hengam.Tools;
using Tools;
using Hengam.Tools.LastChangeManagement;
using System.Windows.Forms;
using Cloner;
using DataGridFiller;
using FarsiLibrary.Utils;

namespace DataAccessNamespace
{
    public class DataAccess
    {
        public virtual bool Update() { return false; }
        public virtual bool Add() { return false; }
        public virtual bool Delete() { return false; }
        //public abstract static List<t> List();
        //hanieh
        internal static SqlConnection connection;//hanieh
        
        public static void checkConnectionState(SqlConnection con)
        {
            if (con.State != ConnectionState.Closed)
                con.Close();
            con.ConnectionString = connectionString;
        }
        /// ////////////////
        /// </summary>

        public static SqlConnection ConnectionToDB
        {
            get
            {
                //hanieh
                /*
                SqlConnection con = new SqlConnection();
                con.ConnectionString = connectionString;
                return con;
                 
                 */
                return connection;
            }
        }
        public static void ConnectToDB()
        {

            connection = new SqlConnection(connectionString);
        }

        protected static int ConvertToInt(string intString)
        {
            // Todo: Should not be like this!
            if (intString == "") return 0;
            return Convert.ToInt32(intString);
        }

        // 
        //public static string connectionString = @"Data Source=localhost\sqlexpress;Initial Catalog=Zeitoon;Integrated Security=True";
        //public static string connectionString = @"Data Source=ST2\SQLEXPRESS;Initial Catalog=Zeitoon;User ID=sa; pwd=123456";
        //public static string connectionString = @"Data Source=ST1\SQLEXPRESS;Initial Catalog=zeitoon;Integrated Security=True";
        public static string connectionString;// = @"Data Source=localhost\SQLEXPRESS;Initial Catalog=Zeitoon;User ID=sa;Password=123456";
        
       
        //protected static SqlConnection connection = new SqlConnection("ConnectionString");
    }

    //class DesktopUserDA : DataAccess
    //{
    //    DesktopUsersBO userBO;
    //    public DesktopUserDA(DesktopUsersBO duBO)
    //    {
    //        userBO = duBO;
    //    }

    //    public override bool Add()
    //    {
    //        string commandString = "prcAddUser";
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        command.CommandType = CommandType.StoredProcedure;

    //        command.Parameters.AddWithValue("@EmployeeID", userBO.EmployeeID);
    //        command.Parameters.AddWithValue("@Username", userBO.Username);
    //        command.Parameters.AddWithValue("@Password", userBO.Password);

    //        command.Parameters.AddWithValue("@CanComboDefaultManager", userBO.CanComboDefaultManager);
    //        command.Parameters.AddWithValue("@CanCourseManager", userBO.CanCourseManager);
    //        command.Parameters.AddWithValue("@CanCoursePriceManager", userBO.CanCoursePriceManager);
    //        command.Parameters.AddWithValue("@CanCourseSelectionValidationAmoozesh", userBO.CanCourseSelectionValidationAmoozesh);
    //        command.Parameters.AddWithValue("@CanCourseSelectionValidationFinancial", userBO.CanCourseSelectionValidationFinancial);
    //        command.Parameters.AddWithValue("@CanDefaultProgramManager", userBO.CanDefaultProgramManager);
    //        command.Parameters.AddWithValue("@CanDepartmentManager", userBO.CanDepartmentManager);
    //        command.Parameters.AddWithValue("@CanDesktopUserManager", userBO.CanDesktopUserManager);
    //        command.Parameters.AddWithValue("@CanEmployeeManager", userBO.CanEmployeeManager);
    //        command.Parameters.AddWithValue("@CanEnforcedCorequisiteManager", userBO.CanEnforcedCorequisiteManager);
    //        command.Parameters.AddWithValue("@CanFacultyManager", userBO.CanFacultyManager);
    //        command.Parameters.AddWithValue("@CanMajorManager", userBO.CanMajorManager);
    //        command.Parameters.AddWithValue("@CanProfessorManager", userBO.CanProfessorManager);
    //        command.Parameters.AddWithValue("@CanScoreManager", userBO.CanScoreManager);
    //        command.Parameters.AddWithValue("@CanSectionManager", userBO.CanSectionManager);
    //        command.Parameters.AddWithValue("@CanStudentManager", userBO.CanStudentManager);
    //        command.Parameters.AddWithValue("@CanTimeManager", userBO.CanTimeManager);
    //        command.Parameters.AddWithValue("@CanExamList", userBO.CanExamList);



    //        command.Parameters.AddWithValue("@CanSpecifyStudentID", userBO.CanSpecifyStudentID);
    //        command.Parameters.AddWithValue("@CanStudentCheckList", userBO.CanStudentCheckList);
    //        command.Parameters.AddWithValue("@CanCourseSelectionManagerAmoozesh", userBO.CanCourseSelectionManagerAmoozesh);
    //        command.Parameters.AddWithValue("@CanCourseSelectionManagerSystem", userBO.CanCourseSelectionManagerSystem);
    //        command.Parameters.AddWithValue("@CanPayList", userBO.CanPayList);
    //        command.Parameters.AddWithValue("@CanStudentTransferInManager", userBO.CanStudentTransferInManager);
    //        command.Parameters.AddWithValue("@CanStudentTransferOutManager", userBO.CanStudentTransferOutManager);
    //        command.Parameters.AddWithValue("@CanStudentGuestOutManager", userBO.CanStudentGuestOutManager);
    //        command.Parameters.AddWithValue("@CanMinstaryMajorCodeManager", userBO.CanMinstaryMajorCodeManager);
    //        command.Parameters.AddWithValue("@CanCourseEquivalenceManager", userBO.CanCourseEquivalenceManager);
    //        command.Parameters.AddWithValue("@CanDBSettings", userBO.CanDBSettings);
    //        command.Parameters.AddWithValue("@CanConstantFeeManager", userBO.CanConstantFeeManager);
    //        command.Parameters.AddWithValue("@CanStudentGuestInManager", userBO.CanStudentGuestInManager);
    //        command.Parameters.AddWithValue("@CanStudentDiscountManager", userBO.CanStudentDiscountManager);

    //        command.Parameters.AddWithValue("@CanPresenceList", userBO.CanPresenceList);
    //        command.Parameters.AddWithValue("@CanMustPayList", userBO.CanMustPayList);
    //        command.Parameters.AddWithValue("@CanCourseSelectionPayManager", userBO.CanCourseSelectionPayManager);


    //        command.Parameters.AddWithValue("@CanStudentBreakManager", userBO.CanStudentBreakManager);
    //        command.Parameters.AddWithValue("@CanStudentGiveUpManager", userBO.CanStudentGiveUpManager);
    //        command.Parameters.AddWithValue("@CanSectionMovement", userBO.CanSectionMovement);
    //        command.Parameters.AddWithValue("@CanStudentPayManager", userBO.CanStudentPayManager);

    //        command.Parameters.AddWithValue("@CanStudentList", userBO.CanStudentList);

    //        command.Parameters.AddWithValue("@CanRegisterationInformation", userBO.CanRegisterationInformation);
    //        command.Parameters.AddWithValue("@CanSpecialStudents", userBO.CanSpecialStudents);

    //        command.Parameters.AddWithValue("@CanTermTranscript", userBO.CanTermTranscript);
    //        command.Parameters.AddWithValue("@CanSectionCapacityDetails", userBO.CanSectionCapacityDetails);
    //        command.Parameters.AddWithValue("@CanOveralTranscript", userBO.CanOveralTranscript);

    //        command.Parameters.AddWithValue("@CanMohsenStudents", userBO.CanMohsenStudents);
    //        command.Parameters.AddWithValue("@CanAverageAStudents", userBO.CanAverageAStudents);

    //        command.Parameters.AddWithValue("@CanStudentCard", userBO.CanStudentCard);
    //        command.Parameters.AddWithValue("@CanFinancialSummary", userBO.CanFinancialSummary);

    //        command.Parameters.AddWithValue("@CanDuplicateStudentCard", userBO.CanDuplicateStudentCard);
    //        command.Parameters.AddWithValue("@CanIntroSectionManager", userBO.CanIntroSectionManager);

    //        command.Parameters.AddWithValue("@HasRemoveGrant", userBO.HasRemoveGrant);

    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            //command.CommandText = commandString;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //            "DELETE FROM desktopUsers " +
    //            "WHERE     (username = @username) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        command.Parameters.AddWithValue("@username", userBO.Username);

    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            //command.CommandText = commandString;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString = "prcUpdateUser";
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        command.CommandType = CommandType.StoredProcedure;

    //        command.Parameters.AddWithValue("@EmployeeID", userBO.EmployeeID);
    //        command.Parameters.AddWithValue("@Username", userBO.Username);
    //        command.Parameters.AddWithValue("@Password", userBO.Password);

    //        command.Parameters.AddWithValue("@CanComboDefaultManager", userBO.CanComboDefaultManager);
    //        command.Parameters.AddWithValue("@CanCourseManager", userBO.CanCourseManager);
    //        command.Parameters.AddWithValue("@CanCoursePriceManager", userBO.CanCoursePriceManager);
    //        command.Parameters.AddWithValue("@CanCourseSelectionValidationAmoozesh", userBO.CanCourseSelectionValidationAmoozesh);
    //        command.Parameters.AddWithValue("@CanCourseSelectionValidationFinancial", userBO.CanCourseSelectionValidationFinancial);
    //        command.Parameters.AddWithValue("@CanDefaultProgramManager", userBO.CanDefaultProgramManager);
    //        command.Parameters.AddWithValue("@CanDepartmentManager", userBO.CanDepartmentManager);
    //        command.Parameters.AddWithValue("@CanDesktopUserManager", userBO.CanDesktopUserManager);
    //        command.Parameters.AddWithValue("@CanEmployeeManager", userBO.CanEmployeeManager);
    //        command.Parameters.AddWithValue("@CanEnforcedCorequisiteManager", userBO.CanEnforcedCorequisiteManager);
    //        command.Parameters.AddWithValue("@CanFacultyManager", userBO.CanFacultyManager);
    //        command.Parameters.AddWithValue("@CanMajorManager", userBO.CanMajorManager);
    //        command.Parameters.AddWithValue("@CanProfessorManager", userBO.CanProfessorManager);
    //        command.Parameters.AddWithValue("@CanScoreManager", userBO.CanScoreManager);
    //        command.Parameters.AddWithValue("@CanSectionManager", userBO.CanSectionManager);
    //        command.Parameters.AddWithValue("@CanStudentManager", userBO.CanStudentManager);
    //        command.Parameters.AddWithValue("@CanTimeManager", userBO.CanTimeManager);
    //        command.Parameters.AddWithValue("@CanExamList", userBO.CanExamList);

    //        command.Parameters.AddWithValue("@CanSpecifyStudentID", userBO.CanSpecifyStudentID);
    //        command.Parameters.AddWithValue("@CanStudentCheckList", userBO.CanStudentCheckList);
    //        command.Parameters.AddWithValue("@CanCourseSelectionManagerAmoozesh", userBO.CanCourseSelectionManagerAmoozesh);
    //        command.Parameters.AddWithValue("@CanCourseSelectionManagerSystem", userBO.CanCourseSelectionManagerSystem);
    //        command.Parameters.AddWithValue("@CanPayList", userBO.CanPayList);
    //        command.Parameters.AddWithValue("@CanStudentTransferInManager", userBO.CanStudentTransferInManager);
    //        command.Parameters.AddWithValue("@CanStudentTransferOutManager", userBO.CanStudentTransferOutManager);
    //        command.Parameters.AddWithValue("@CanStudentGuestOutManager", userBO.CanStudentGuestOutManager);
    //        command.Parameters.AddWithValue("@CanMinstaryMajorCodeManager", userBO.CanMinstaryMajorCodeManager);
    //        command.Parameters.AddWithValue("@CanCourseEquivalenceManager", userBO.CanCourseEquivalenceManager);
    //        command.Parameters.AddWithValue("@CanDBSettings", userBO.CanDBSettings);
    //        command.Parameters.AddWithValue("@CanConstantFeeManager", userBO.CanConstantFeeManager);
    //        command.Parameters.AddWithValue("@CanStudentGuestInManager", userBO.CanStudentGuestInManager);
    //        command.Parameters.AddWithValue("@CanStudentDiscountManager", userBO.CanStudentDiscountManager);

    //        command.Parameters.AddWithValue("@CanPresenceList", userBO.CanPresenceList);
    //        command.Parameters.AddWithValue("@CanMustPayList", userBO.CanMustPayList);
    //        command.Parameters.AddWithValue("@CanCourseSelectionPayManager", userBO.CanCourseSelectionPayManager);

    //        command.Parameters.AddWithValue("@CanStudentBreakManager", userBO.CanStudentBreakManager);
    //        command.Parameters.AddWithValue("@CanStudentGiveUpManager", userBO.CanStudentGiveUpManager);
    //        command.Parameters.AddWithValue("@CanSectionMovement", userBO.CanSectionMovement);
    //        command.Parameters.AddWithValue("@CanStudentPayManager", userBO.CanStudentPayManager);

    //        command.Parameters.AddWithValue("@CanStudentList", userBO.CanStudentList);

    //        command.Parameters.AddWithValue("@CanRegisterationInformation", userBO.CanRegisterationInformation);
    //        command.Parameters.AddWithValue("@CanSpecialStudents", userBO.CanSpecialStudents);

    //        command.Parameters.AddWithValue("@CanTermTranscript", userBO.CanTermTranscript);
    //        command.Parameters.AddWithValue("@CanSectionCapacityDetails", userBO.CanSectionCapacityDetails);
    //        command.Parameters.AddWithValue("@CanOveralTranscript", userBO.CanOveralTranscript);

    //        command.Parameters.AddWithValue("@CanMohsenStudents", userBO.CanMohsenStudents);
    //        command.Parameters.AddWithValue("@CanAverageAStudents", userBO.CanAverageAStudents);

    //        command.Parameters.AddWithValue("@CanStudentCard", userBO.CanStudentCard);
    //        command.Parameters.AddWithValue("@CanFinancialSummary", userBO.CanFinancialSummary);
    //        command.Parameters.AddWithValue("@CanDuplicateStudentCard", userBO.CanDuplicateStudentCard);

    //        command.Parameters.AddWithValue("@CanIntroSectionManager", userBO.CanIntroSectionManager);

    //        command.Parameters.AddWithValue("@HasRemoveGrant", userBO.HasRemoveGrant);


            



    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            //command.CommandText = commandString;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static bool ChangePassword(string username, string lastPass, string newPass)
    //    {
    //        string commandString = "UPDATE desktopUsers SET Password = @newPassword where username=@username and password=@lastPass ";
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        command.Parameters.AddWithValue("@lastPass", lastPass);
    //        command.Parameters.AddWithValue("@Username", username);
    //        command.Parameters.AddWithValue("@newPassword", newPass);

    //         using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            //command.CommandText = commandString;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }
    //}

    //class DesktopUsersDA : DataAccess
    //{
    //    public static List<DesktopUserBO> List()
    //    {
    //        string commandString = "prcUserDetails";
    //        using (SqlConnection connection = new SqlConnection())
    //        {
    //            connection.ConnectionString = connectionString;
    //            checkConnectionState(connection);  connection.Open();

    //            // ToDo: String Command is ready (Not tested yet);

    //            SqlCommand command = connection.CreateCommand();
    //            command.CommandType = CommandType.StoredProcedure;
    //            command.CommandText = commandString;


    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));

    //            List<DesktopUserBO> ans = new List<DesktopUserBO>();
    //            while (reader.Read())
    //            {
    //                DesktopUserBO user = new DesktopUserBO();

    //                user.EmployeeID = reader[DatabaseSchema.DesktopUsers.EmployeeID].ToString();
    //                user.LastLoginDate = reader[DatabaseSchema.DesktopUsers.LastLoginDate].ToString();
    //                user.LastLoginTime = reader[DatabaseSchema.DesktopUsers.LastLoginTime].ToString();
    //                user.Password = reader[DatabaseSchema.DesktopUsers.Password].ToString();
    //                user.Username = reader[DatabaseSchema.DesktopUsers.Username].ToString();

    //                user.CanComboDefaultManager = (bool)reader[DatabaseSchema.DesktopUsers.CanComboDefaultManager];
    //                user.CanCourseManager = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseManager];
    //                user.CanCoursePriceManager = (bool)reader[DatabaseSchema.DesktopUsers.CanCoursePriceManager];
    //                user.CanCourseSelectionValidationAmoozesh = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseSelectionValidationAmoozesh];
    //                user.CanCourseSelectionValidationFinancial = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseSelectionValidationFinancial];
    //                user.CanDefaultProgramManager = (bool)reader[DatabaseSchema.DesktopUsers.CanDefaultProgramManager];
    //                user.CanDepartmentManager = (bool)reader[DatabaseSchema.DesktopUsers.CanDepartmentManager];
    //                user.CanDesktopUserManager = (bool)reader[DatabaseSchema.DesktopUsers.CanDesktopUserManager];
    //                user.CanEmployeeManager = (bool)reader[DatabaseSchema.DesktopUsers.CanEmployeeManager];
    //                user.CanEnforcedCorequisiteManager = (bool)reader[DatabaseSchema.DesktopUsers.CanEnforcedCorequisiteManager];
    //                user.CanExamList = (bool)reader[DatabaseSchema.DesktopUsers.CanExamList];
    //                user.CanFacultyManager = (bool)reader[DatabaseSchema.DesktopUsers.CanFacultyManager];
    //                user.CanMajorManager = (bool)reader[DatabaseSchema.DesktopUsers.CanMajorManager];
    //                user.CanProfessorManager = (bool)reader[DatabaseSchema.DesktopUsers.CanProfessorManager];
    //                user.CanScoreManager = (bool)reader[DatabaseSchema.DesktopUsers.CanScoreManager];
    //                user.CanSectionManager = (bool)reader[DatabaseSchema.DesktopUsers.CanSectionManager];
    //                user.CanStudentManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentManager];
    //                user.CanTimeManager = (bool)reader[DatabaseSchema.DesktopUsers.CanTimeManager];

    //                user.CanSpecifyStudentID = (bool)reader[DatabaseSchema.DesktopUsers.CanSpecifyStudentID];
    //                user.CanStudentCheckList = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentCheckList];
    //                user.CanCourseSelectionManagerAmoozesh = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseSelectionManagerAmoozesh];
    //                user.CanCourseSelectionManagerSystem = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseSelectionManagerSystem];
    //                user.CanPayList = (bool)reader[DatabaseSchema.DesktopUsers.CanPayList];
    //                user.CanStudentTransferInManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentTransferInManager];
    //                user.CanStudentTransferOutManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentTransferOutManager];
    //                user.CanStudentGuestOutManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentGuestOutManager];
                    
    //                user.CanMinstaryMajorCodeManager = (bool)reader[DatabaseSchema.DesktopUsers.CanMinstaryMajorCodeManager];
    //                user.CanCourseEquivalenceManager = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseEquivalenceManager];
    //                user.CanDBSettings = (bool)reader[DatabaseSchema.DesktopUsers.CanDBSettings];
    //                user.CanConstantFeeManager = (bool)reader[DatabaseSchema.DesktopUsers.CanConstantFeeManager];
    //                user.CanStudentGuestInManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentGuestInManager];
    //                user.CanStudentDiscountManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentDiscountManager];

    //                user.CanPresenceList = (bool)reader[DatabaseSchema.DesktopUsers.CanPresenceList];
    //                user.CanMustPayList = (bool)reader[DatabaseSchema.DesktopUsers.CanMustPayList];
    //                user.CanCourseSelectionPayManager = (bool)reader[DatabaseSchema.DesktopUsers.CanCourseSelectionPayManager];

    //                user.CanStudentPayManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentPayManager];
    //                user.CanSectionMovement = (bool)reader[DatabaseSchema.DesktopUsers.CanSectionMovement];
    //                user.CanStudentGiveUpManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentGiveUpManager];
    //                user.CanStudentBreakManager = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentBreakManager];

    //                user.CanStudentList = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentList];

    //                user.CanRegisterationInformation = (bool)reader[DatabaseSchema.DesktopUsers.CanRegisterationInformation];
    //                user.CanSpecialStudents = (bool)reader[DatabaseSchema.DesktopUsers.CanSpecialStudents];

    //                user.CanTermTranscript = (bool)reader[DatabaseSchema.DesktopUsers.CanTermTranscript];
    //                user.CanSectionCapacityDetails = (bool)reader[DatabaseSchema.DesktopUsers.CanSectionCapacityDetails];
    //                user.CanOveralTranscript = (bool)reader[DatabaseSchema.DesktopUsers.CanOveralTranscript];

    //                user.CanMohsenStudents = (bool)reader[DatabaseSchema.DesktopUsers.CanMohsenStudents];
    //                user.CanAverageAStudents = (bool)reader[DatabaseSchema.DesktopUsers.CanAverageAStudents];
    //                user.CanSectionCapacityDetails = (bool)reader[DatabaseSchema.DesktopUsers.CanSectionCapacityDetails];

    //                user.CanStudentCard = (bool)reader[DatabaseSchema.DesktopUsers.CanStudentCard];
    //                user.CanFinancialSummary = (bool)reader[DatabaseSchema.DesktopUsers.CanFinancialSummary];

    //                user.CanDuplicateStudentCard = (bool)reader[DatabaseSchema.DesktopUsers.CanDuplicateStudentCard];

    //                user.CanIntroSectionManager = (bool)reader[DatabaseSchema.DesktopUsers.CanIntroSectionManager];


    //                user.CanChangeEducationFlag = user.CanCourseSelectionValidationAmoozesh;
    //                user.CanChangeFinancialFlag = user.CanCourseSelectionValidationFinancial;
    //                user.CanChangeStudentFinalFlag = true;
                    
    //                user.HasRemoveGrant = (bool)reader[DatabaseSchema.DesktopUsers.HasRemoveGrant];





    //                user.EmployeeFirstName = reader[DatabaseSchema.Employee.FirstName].ToString();
    //                user.EmployeeLastName = reader[DatabaseSchema.Employee.LastName].ToString();

    //                ans.Add(user);
    //            }
    //            return ans;
    //        }
    //    }

    //    public static DesktopUserBO Find(string username, string password)
    //    {
    //        DesktopUserBO res = null;
    //        List<DesktopUserBO> list = List();
    //        foreach (DesktopUserBO user in list)
    //        {
    //            if (user.Username.Trim() == username && user.Password.Trim() == password)
    //            {
    //                res = user;
    //                return res;
    //            }
    //        }
    //        return null;
            
    //    }
    //}

    //public partial class DesktopUsersDA : DataAccess
    //{
    //    #region Constructors
    //    public DesktopUsersDA(DesktopUsersBO inDesktopUsersBO)
    //    {
    //        curDesktopUsersBO = inDesktopUsersBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private DesktopUsersBO curDesktopUsersBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO desktopUsers (" +
    //        " 	username, " +
    //        " 	password, " +
    //        " 	lastLoginDate, " +
    //        " 	lastLoginTime, " +
    //        " 	EmployeeID, " +
    //        " 	CanStudentManager, " +
    //        " 	CanTimeManager, " +
    //        " 	CanEmployeeManager, " +
    //        " 	CanDBSettings, " +
    //        " 	CanTeacherManager, " +
    //        " 	CanMajorTeacherManager, " +
    //        " 	CanGuarantorManager, " +
    //        " 	CanTeacherTimeManager, " +
    //        " 	CanClassManager, " +
    //        " 	CanClassSessionManager, " +
    //        " 	CanOutcomeManager, " +
    //        " 	CanIncomeManager, " +
    //        " 	CanStudentRegisterationManager, " +
    //        " 	CanOutcomeTeacherClass, " +
    //        " 	CanOutcomeStudentClass, " +
    //        " 	CanTeacherFinancialDetails, " +
    //        " 	CanTeacherFinancialSessionDetails, " +
    //        " 	CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic, " +
    //        " 	CanPresenceManagerPrivate, " +
    //        " 	CanPresenceManagerPublic, " +
    //        " 	CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs, " +
    //        " 	CanEmployeeSalary, " +
    //        " 	CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass, " +
    //        " 	CanStudentAffairs, " +
    //        " 	CanActivityManager, " +
    //        " 	CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking, " +
    //        " 	CanSchoolSpecification, " +
    //        " 	CanDesktopUsers, " +
    //        " 	CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass, " +
    //        " 	CanComboManager, " +
    //        " 	CanReportAffairs) " +
    //        " VALUES (" +
    //        " 	@username, " +
    //        " 	@password, " +
    //        " 	@lastLoginDate, " +
    //        " 	@lastLoginTime, " +
    //        " 	@EmployeeID, " +
    //        " 	@CanStudentManager, " +
    //        " 	@CanTimeManager, " +
    //        " 	@CanEmployeeManager, " +
    //        " 	@CanDBSettings, " +
    //        " 	@CanTeacherManager, " +
    //        " 	@CanMajorTeacherManager, " +
    //        " 	@CanGuarantorManager, " +
    //        " 	@CanTeacherTimeManager, " +
    //        " 	@CanClassManager, " +
    //        " 	@CanClassSessionManager, " +
    //        " 	@CanOutcomeManager, " +
    //        " 	@CanIncomeManager, " +
    //        " 	@CanStudentRegisterationManager, " +
    //        " 	@CanOutcomeTeacherClass, " +
    //        " 	@CanOutcomeStudentClass, " +
    //        " 	@CanTeacherFinancialDetails, " +
    //        " 	@CanTeacherFinancialSessionDetails, " +
    //        " 	@CanClassManagerPrivate, " +
    //        " 	@CanClassManagerPublic, " +
    //        " 	@CanPresenceManagerPrivate, " +
    //        " 	@CanPresenceManagerPublic, " +
    //        " 	@CanStoreStuffAvailableViewer, " +
    //        " 	@CanStoreStuffTypeManager, " +
    //        " 	@CanStoreStuffBuyManager, " +
    //        " 	@CanStoreStuffSellItemManager, " +
    //        " 	@CanStoreShopHistoryViewer, " +
    //        " 	@CanStoreAffairs, " +
    //        " 	@CanEmployeeSalary, " +
    //        " 	@CanStudentInformationReport, " +
    //        " 	@CanStudentPayForClass, " +
    //        " 	@CanStudentAffairs, " +
    //        " 	@CanActivityManager, " +
    //        " 	@CanStoreStuffSellItem, " +
    //        " 	@CanStoreSalesTracking, " +
    //        " 	@CanSchoolSpecification, " +
    //        " 	@CanDesktopUsers, " +
    //        " 	@CanReportStudentListOfMajor, " +
    //        " 	@CanReportPaysOfTeacherInterval, " +
    //        " 	@CanReportSessionsOfTeacherInterval, " +
    //        " 	@CanReportClassesOfTeacherInterval, " +
    //        " 	@CanReportMinistryReport, " +
    //        " 	@CanReportStudentPayFactor, " +
    //        " 	@CanReportTypicalOutcomeYear, " +
    //        " 	@CanReportIncomeInterval, " +
    //        " 	@CanReportRegisteredStudentsPerEmployee, " +
    //        " 	@CanReportTeacherPayFactor, " +
    //        " 	@CanReportEmployeePayFactor, " +
    //        " 	@CanReportStudentOfPublicClass, " +
    //        " 	@CanComboManager, " +
    //        " 	@CanReportAffairs) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeManager", curDesktopUsersBO.CanTeacherTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManager", curDesktopUsersBO.CanClassManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionManager", curDesktopUsersBO.CanClassSessionManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeTeacherClass", curDesktopUsersBO.CanOutcomeTeacherClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeStudentClass", curDesktopUsersBO.CanStudentBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialSessionDetails", curDesktopUsersBO.CanTeacherFinancialSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManagerPrivate", curDesktopUsersBO.CanPresenceManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManagerPublic", curDesktopUsersBO.CanPresenceManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM desktopUsers " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE desktopUsers SET " +
    //        " 	password = @password, " +
    //        " 	lastLoginDate = @lastLoginDate, " +
    //        " 	lastLoginTime = @lastLoginTime, " +
    //        " 	EmployeeID = @EmployeeID, " +
    //        " 	CanStudentManager = @CanStudentManager, " +
    //        " 	CanTimeManager = @CanTimeManager, " +
    //        " 	CanEmployeeManager = @CanEmployeeManager, " +
    //        " 	CanDBSettings = @CanDBSettings, " +
    //        " 	CanTeacherManager = @CanTeacherManager, " +
    //        " 	CanMajorTeacherManager = @CanMajorTeacherManager, " +
    //        " 	CanGuarantorManager = @CanGuarantorManager, " +
    //        " 	CanTeacherTimeManager = @CanTeacherTimeManager, " +
    //        " 	CanClassManager = @CanClassManager, " +
    //        " 	CanClassSessionManager = @CanClassSessionManager, " +
    //        " 	CanOutcomeManager = @CanOutcomeManager, " +
    //        " 	CanIncomeManager = @CanIncomeManager, " +
    //        " 	CanStudentRegisterationManager = @CanStudentRegisterationManager, " +
    //        " 	CanOutcomeTeacherClass = @CanOutcomeTeacherClass, " +
    //        " 	CanOutcomeStudentClass = @CanOutcomeStudentClass, " +
    //        " 	CanTeacherFinancialDetails = @CanTeacherFinancialDetails, " +
    //        " 	CanTeacherFinancialSessionDetails = @CanTeacherFinancialSessionDetails, " +
    //        " 	CanClassManagerPrivate = @CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic = @CanClassManagerPublic, " +
    //        " 	CanPresenceManagerPrivate = @CanPresenceManagerPrivate, " +
    //        " 	CanPresenceManagerPublic = @CanPresenceManagerPublic, " +
    //        " 	CanStoreStuffAvailableViewer = @CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager = @CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager = @CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager = @CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer = @CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs = @CanStoreAffairs, " +
    //        " 	CanEmployeeSalary = @CanEmployeeSalary, " +
    //        " 	CanStudentInformationReport = @CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass = @CanStudentPayForClass, " +
    //        " 	CanStudentAffairs = @CanStudentAffairs, " +
    //        " 	CanActivityManager = @CanActivityManager, " +
    //        " 	CanStoreStuffSellItem = @CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking = @CanStoreSalesTracking, " +
    //        " 	CanSchoolSpecification = @CanSchoolSpecification, " +
    //        " 	CanDesktopUsers = @CanDesktopUsers, " +
    //        " 	CanReportStudentListOfMajor = @CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval = @CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval = @CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval = @CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport = @CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor = @CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear = @CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval = @CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee = @CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor = @CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor = @CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass = @CanReportStudentOfPublicClass, " +
    //        " 	CanComboManager = @CanComboManager, " +
    //        " 	CanReportAffairs = @CanReportAffairs " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeManager", curDesktopUsersBO.CanTeacherTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManager", curDesktopUsersBO.CanClassManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionManager", curDesktopUsersBO.CanClassSessionManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeTeacherClass", curDesktopUsersBO.CanOutcomeTeacherClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeStudentClass", curDesktopUsersBO.CanStudentBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialSessionDetails", curDesktopUsersBO.CanTeacherFinancialSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManagerPrivate", curDesktopUsersBO.CanPresenceManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManagerPublic", curDesktopUsersBO.CanPresenceManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static DesktopUsersBO Find(string username)
    //    {
    //        if (username == null) return null;
    //        string commandString = "  SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        DesktopUsersBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new DesktopUsersBO();
    //                ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                ans.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                ans.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                ans.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                ans.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                ans.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                ans.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                ans.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                ans.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                ans.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                ans.CanTeacherTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeManager]);
    //                ans.CanClassManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManager]);
    //                ans.CanClassSessionManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionManager]);
    //                ans.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                ans.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                ans.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                ans.CanOutcomeTeacherClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeTeacherClass]);
    //                ans.CanStudentBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeStudentClass]);
    //                ans.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                ans.CanTeacherFinancialSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialSessionDetails]);
    //                ans.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                ans.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                ans.CanPresenceManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPrivate]);
    //                ans.CanPresenceManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPublic]);
    //                ans.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                ans.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                ans.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                ans.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                ans.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                ans.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                ans.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                ans.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                ans.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                ans.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                ans.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                ans.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                ans.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                ans.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                ans.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                ans.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                ans.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                ans.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                ans.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                ans.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                ans.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                ans.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                ans.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                ans.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                ans.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                ans.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                ans.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                ans.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                ans.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<DesktopUsersBO> List()
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanTeacherTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeManager]);
    //                item.CanClassManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManager]);
    //                item.CanClassSessionManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionManager]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanOutcomeTeacherClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeTeacherClass]);
    //                item.CanStudentBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeStudentClass]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherFinancialSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialSessionDetails]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanPresenceManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPrivate]);
    //                item.CanPresenceManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPublic]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<DesktopUsersBO> List(string username, string password)
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (username != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        }

    //        if (password != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.password = '{0}') ", password);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanTeacherTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeManager]);
    //                item.CanClassManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManager]);
    //                item.CanClassSessionManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionManager]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanOutcomeTeacherClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeTeacherClass]);
    //                item.CanStudentBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeStudentClass]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherFinancialSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialSessionDetails]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanPresenceManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPrivate]);
    //                item.CanPresenceManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManagerPublic]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}


    //public partial class DesktopUsersDA : DataAccess
    //{
    //    #region Constructors
    //    public DesktopUsersDA(DesktopUsersBO inDesktopUsersBO)
    //    {
    //        curDesktopUsersBO = inDesktopUsersBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private DesktopUsersBO curDesktopUsersBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO desktopUsers (" +
    //        " 	username, " +
    //        " 	password, " +
    //        " 	lastLoginDate, " +
    //        " 	lastLoginTime, " +
    //        " 	EmployeeID, " +
    //        " 	CanStudentManager, " +
    //        " 	CanStudentRegisterationManager, " +
    //        " 	CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass, " +
    //        " 	CanStudentSessionDetails, " +
    //        " 	CanStudentFinancialDetails, " +
    //        " 	CanStudentFinancialStatus, " +
    //        " 	CanStudentClassBalance, " +
    //        " 	CanStudentAffairs, " +
    //        " 	CanTeacherFinancialStatus, " +
    //        " 	CanTeacherFinancialDetails, " +
    //        " 	CanTeacherSessionDetails, " +
    //        " 	CanTeacherManager, " +
    //        " 	CanMajorTeacherManager, " +
    //        " 	CanTeacherClassBalance, " +
    //        " 	CanTeacherPayForClass, " +
    //        " 	CanTeacherTimeSelector, " +
    //        " 	CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic, " +
    //        " 	CanClassDailyStatus, " +
    //        " 	CanPresenceManager, " +
    //        " 	CanTimeManager, " +
    //        " 	CanEmployeeManager, " +
    //        " 	CanEmployeeSalary, " +
    //        " 	CanComboManager, " +
    //        " 	CanActivityManager, " +
    //        " 	CanDBSettings, " +
    //        " 	CanGuarantorManager, " +
    //        " 	CanSchoolSpecification, " +
    //        " 	CanDesktopUsers, " +
    //        " 	CanOutcomeManager, " +
    //        " 	CanIncomeManager, " +
    //        " 	CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs, " +
    //        " 	CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking, " +
    //        " 	CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass, " +
    //        " 	CanReportAffairs, " +
    //        " 	CanClassSessionStatusSetter, " +
    //        " 	CanClassSessionScheduleSetter) " +
    //        " VALUES (" +
    //        " 	@username, " +
    //        " 	@password, " +
    //        " 	@lastLoginDate, " +
    //        " 	@lastLoginTime, " +
    //        " 	@EmployeeID, " +
    //        " 	@CanStudentManager, " +
    //        " 	@CanStudentRegisterationManager, " +
    //        " 	@CanStudentInformationReport, " +
    //        " 	@CanStudentPayForClass, " +
    //        " 	@CanStudentSessionDetails, " +
    //        " 	@CanStudentFinancialDetails, " +
    //        " 	@CanStudentFinancialStatus, " +
    //        " 	@CanStudentClassBalance, " +
    //        " 	@CanStudentAffairs, " +
    //        " 	@CanTeacherFinancialStatus, " +
    //        " 	@CanTeacherFinancialDetails, " +
    //        " 	@CanTeacherSessionDetails, " +
    //        " 	@CanTeacherManager, " +
    //        " 	@CanMajorTeacherManager, " +
    //        " 	@CanTeacherClassBalance, " +
    //        " 	@CanTeacherPayForClass, " +
    //        " 	@CanTeacherTimeSelector, " +
    //        " 	@CanClassManagerPrivate, " +
    //        " 	@CanClassManagerPublic, " +
    //        " 	@CanClassDailyStatus, " +
    //        " 	@CanPresenceManager, " +
    //        " 	@CanTimeManager, " +
    //        " 	@CanEmployeeManager, " +
    //        " 	@CanEmployeeSalary, " +
    //        " 	@CanComboManager, " +
    //        " 	@CanActivityManager, " +
    //        " 	@CanDBSettings, " +
    //        " 	@CanGuarantorManager, " +
    //        " 	@CanSchoolSpecification, " +
    //        " 	@CanDesktopUsers, " +
    //        " 	@CanOutcomeManager, " +
    //        " 	@CanIncomeManager, " +
    //        " 	@CanStoreStuffAvailableViewer, " +
    //        " 	@CanStoreStuffTypeManager, " +
    //        " 	@CanStoreStuffBuyManager, " +
    //        " 	@CanStoreStuffSellItemManager, " +
    //        " 	@CanStoreShopHistoryViewer, " +
    //        " 	@CanStoreAffairs, " +
    //        " 	@CanStoreStuffSellItem, " +
    //        " 	@CanStoreSalesTracking, " +
    //        " 	@CanReportStudentListOfMajor, " +
    //        " 	@CanReportPaysOfTeacherInterval, " +
    //        " 	@CanReportSessionsOfTeacherInterval, " +
    //        " 	@CanReportClassesOfTeacherInterval, " +
    //        " 	@CanReportMinistryReport, " +
    //        " 	@CanReportStudentPayFactor, " +
    //        " 	@CanReportTypicalOutcomeYear, " +
    //        " 	@CanReportIncomeInterval, " +
    //        " 	@CanReportRegisteredStudentsPerEmployee, " +
    //        " 	@CanReportTeacherPayFactor, " +
    //        " 	@CanReportEmployeePayFactor, " +
    //        " 	@CanReportStudentOfPublicClass, " +
    //        " 	@CanReportAffairs, " +
    //        " 	@CanClassSessionStatusSetter, " +
    //        " 	@CanClassSessionScheduleSetter) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM desktopUsers " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE desktopUsers SET " +
    //        " 	password = @password, " +
    //        " 	lastLoginDate = @lastLoginDate, " +
    //        " 	lastLoginTime = @lastLoginTime, " +
    //        " 	EmployeeID = @EmployeeID, " +
    //        " 	CanStudentManager = @CanStudentManager, " +
    //        " 	CanStudentRegisterationManager = @CanStudentRegisterationManager, " +
    //        " 	CanStudentInformationReport = @CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass = @CanStudentPayForClass, " +
    //        " 	CanStudentSessionDetails = @CanStudentSessionDetails, " +
    //        " 	CanStudentFinancialDetails = @CanStudentFinancialDetails, " +
    //        " 	CanStudentFinancialStatus = @CanStudentFinancialStatus, " +
    //        " 	CanStudentClassBalance = @CanStudentClassBalance, " +
    //        " 	CanStudentAffairs = @CanStudentAffairs, " +
    //        " 	CanTeacherFinancialStatus = @CanTeacherFinancialStatus, " +
    //        " 	CanTeacherFinancialDetails = @CanTeacherFinancialDetails, " +
    //        " 	CanTeacherSessionDetails = @CanTeacherSessionDetails, " +
    //        " 	CanTeacherManager = @CanTeacherManager, " +
    //        " 	CanMajorTeacherManager = @CanMajorTeacherManager, " +
    //        " 	CanTeacherClassBalance = @CanTeacherClassBalance, " +
    //        " 	CanTeacherPayForClass = @CanTeacherPayForClass, " +
    //        " 	CanTeacherTimeSelector = @CanTeacherTimeSelector, " +
    //        " 	CanClassManagerPrivate = @CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic = @CanClassManagerPublic, " +
    //        " 	CanClassDailyStatus = @CanClassDailyStatus, " +
    //        " 	CanPresenceManager = @CanPresenceManager, " +
    //        " 	CanTimeManager = @CanTimeManager, " +
    //        " 	CanEmployeeManager = @CanEmployeeManager, " +
    //        " 	CanEmployeeSalary = @CanEmployeeSalary, " +
    //        " 	CanComboManager = @CanComboManager, " +
    //        " 	CanActivityManager = @CanActivityManager, " +
    //        " 	CanDBSettings = @CanDBSettings, " +
    //        " 	CanGuarantorManager = @CanGuarantorManager, " +
    //        " 	CanSchoolSpecification = @CanSchoolSpecification, " +
    //        " 	CanDesktopUsers = @CanDesktopUsers, " +
    //        " 	CanOutcomeManager = @CanOutcomeManager, " +
    //        " 	CanIncomeManager = @CanIncomeManager, " +
    //        " 	CanStoreStuffAvailableViewer = @CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager = @CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager = @CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager = @CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer = @CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs = @CanStoreAffairs, " +
    //        " 	CanStoreStuffSellItem = @CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking = @CanStoreSalesTracking, " +
    //        " 	CanReportStudentListOfMajor = @CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval = @CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval = @CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval = @CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport = @CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor = @CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear = @CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval = @CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee = @CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor = @CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor = @CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass = @CanReportStudentOfPublicClass, " +
    //        " 	CanReportAffairs = @CanReportAffairs, " +
    //        " 	CanClassSessionStatusSetter = @CanClassSessionStatusSetter, " +
    //        " 	CanClassSessionScheduleSetter = @CanClassSessionScheduleSetter " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static DesktopUsersBO Find(string username)
    //    {
    //        if (username == null) return null;
    //        string commandString = "  SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        DesktopUsersBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new DesktopUsersBO();
    //                ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                ans.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                ans.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                ans.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                ans.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                ans.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                ans.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                ans.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                ans.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                ans.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                ans.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                ans.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                ans.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                ans.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                ans.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                ans.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                ans.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                ans.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                ans.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                ans.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                ans.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                ans.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                ans.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                ans.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                ans.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                ans.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                ans.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                ans.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                ans.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                ans.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                ans.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                ans.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                ans.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                ans.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                ans.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                ans.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                ans.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                ans.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                ans.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                ans.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                ans.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                ans.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                ans.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                ans.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                ans.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                ans.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                ans.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                ans.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                ans.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                ans.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                ans.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                ans.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                ans.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                ans.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                ans.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                ans.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);
    //                ans.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                ans.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<DesktopUsersBO> List()
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);
    //                item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<DesktopUsersBO> List(string username, string password)
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (username != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        }

    //        if (password != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.password = '{0}') ", password);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);
    //                item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    //public partial class DesktopUsersDA : DataAccess
    //{
    //    #region Constructors
    //    public DesktopUsersDA(DesktopUsersBO inDesktopUsersBO)
    //    {
    //        curDesktopUsersBO = inDesktopUsersBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private DesktopUsersBO curDesktopUsersBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO desktopUsers (" +
    //        " 	username, " +
    //        " 	password, " +
    //        " 	lastLoginDate, " +
    //        " 	lastLoginTime, " +
    //        " 	EmployeeID, " +
    //        " 	CanStudentManager, " +
    //        " 	CanStudentRegisterationManager, " +
    //        " 	CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass, " +
    //        " 	CanStudentSessionDetails, " +
    //        " 	CanStudentFinancialDetails, " +
    //        " 	CanStudentFinancialStatus, " +
    //        " 	CanStudentClassBalance, " +
    //        " 	CanStudentAffairs, " +
    //        " 	CanTeacherFinancialStatus, " +
    //        " 	CanTeacherFinancialDetails, " +
    //        " 	CanTeacherSessionDetails, " +
    //        " 	CanTeacherManager, " +
    //        " 	CanMajorTeacherManager, " +
    //        " 	CanTeacherClassBalance, " +
    //        " 	CanTeacherPayForClass, " +
    //        " 	CanTeacherTimeSelector, " +
    //        " 	CanClassSessionStatusSetter, " +
    //        " 	CanClassSessionScheduleSetter, " +
    //        " 	CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic, " +
    //        " 	CanClassDailyStatus, " +
    //        " 	CanPresenceManager, " +
    //        " 	CanTimeManager, " +
    //        " 	CanEmployeeManager, " +
    //        " 	CanEmployeeSalary, " +
    //        " 	CanComboManager, " +
    //        " 	CanActivityManager, " +
    //        " 	CanDBSettings, " +
    //        " 	CanGuarantorManager, " +
    //        " 	CanSchoolSpecification, " +
    //        " 	CanDesktopUsers, " +
    //        " 	CanOutcomeManager, " +
    //        " 	CanIncomeManager, " +
    //        " 	CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs, " +
    //        " 	CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking, " +
    //        " 	CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass, " +
    //        " 	CanReportAffairs) " +
    //        " VALUES (" +
    //        " 	@username, " +
    //        " 	@password, " +
    //        " 	@lastLoginDate, " +
    //        " 	@lastLoginTime, " +
    //        " 	@EmployeeID, " +
    //        " 	@CanStudentManager, " +
    //        " 	@CanStudentRegisterationManager, " +
    //        " 	@CanStudentInformationReport, " +
    //        " 	@CanStudentPayForClass, " +
    //        " 	@CanStudentSessionDetails, " +
    //        " 	@CanStudentFinancialDetails, " +
    //        " 	@CanStudentFinancialStatus, " +
    //        " 	@CanStudentClassBalance, " +
    //        " 	@CanStudentAffairs, " +
    //        " 	@CanTeacherFinancialStatus, " +
    //        " 	@CanTeacherFinancialDetails, " +
    //        " 	@CanTeacherSessionDetails, " +
    //        " 	@CanTeacherManager, " +
    //        " 	@CanMajorTeacherManager, " +
    //        " 	@CanTeacherClassBalance, " +
    //        " 	@CanTeacherPayForClass, " +
    //        " 	@CanTeacherTimeSelector, " +
    //        " 	@CanClassSessionStatusSetter, " +
    //        " 	@CanClassSessionScheduleSetter, " +
    //        " 	@CanClassManagerPrivate, " +
    //        " 	@CanClassManagerPublic, " +
    //        " 	@CanClassDailyStatus, " +
    //        " 	@CanPresenceManager, " +
    //        " 	@CanTimeManager, " +
    //        " 	@CanEmployeeManager, " +
    //        " 	@CanEmployeeSalary, " +
    //        " 	@CanComboManager, " +
    //        " 	@CanActivityManager, " +
    //        " 	@CanDBSettings, " +
    //        " 	@CanGuarantorManager, " +
    //        " 	@CanSchoolSpecification, " +
    //        " 	@CanDesktopUsers, " +
    //        " 	@CanOutcomeManager, " +
    //        " 	@CanIncomeManager, " +
    //        " 	@CanStoreStuffAvailableViewer, " +
    //        " 	@CanStoreStuffTypeManager, " +
    //        " 	@CanStoreStuffBuyManager, " +
    //        " 	@CanStoreStuffSellItemManager, " +
    //        " 	@CanStoreShopHistoryViewer, " +
    //        " 	@CanStoreAffairs, " +
    //        " 	@CanStoreStuffSellItem, " +
    //        " 	@CanStoreSalesTracking, " +
    //        " 	@CanReportStudentListOfMajor, " +
    //        " 	@CanReportPaysOfTeacherInterval, " +
    //        " 	@CanReportSessionsOfTeacherInterval, " +
    //        " 	@CanReportClassesOfTeacherInterval, " +
    //        " 	@CanReportMinistryReport, " +
    //        " 	@CanReportStudentPayFactor, " +
    //        " 	@CanReportTypicalOutcomeYear, " +
    //        " 	@CanReportIncomeInterval, " +
    //        " 	@CanReportRegisteredStudentsPerEmployee, " +
    //        " 	@CanReportTeacherPayFactor, " +
    //        " 	@CanReportEmployeePayFactor, " +
    //        " 	@CanReportStudentOfPublicClass, " +
    //        " 	@CanReportAffairs) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM desktopUsers " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE desktopUsers SET " +
    //        " 	password = @password, " +
    //        " 	lastLoginDate = @lastLoginDate, " +
    //        " 	lastLoginTime = @lastLoginTime, " +
    //        " 	EmployeeID = @EmployeeID, " +
    //        " 	CanStudentManager = @CanStudentManager, " +
    //        " 	CanStudentRegisterationManager = @CanStudentRegisterationManager, " +
    //        " 	CanStudentInformationReport = @CanStudentInformationReport, " +
    //        " 	CanStudentPayForClass = @CanStudentPayForClass, " +
    //        " 	CanStudentSessionDetails = @CanStudentSessionDetails, " +
    //        " 	CanStudentFinancialDetails = @CanStudentFinancialDetails, " +
    //        " 	CanStudentFinancialStatus = @CanStudentFinancialStatus, " +
    //        " 	CanStudentClassBalance = @CanStudentClassBalance, " +
    //        " 	CanStudentAffairs = @CanStudentAffairs, " +
    //        " 	CanTeacherFinancialStatus = @CanTeacherFinancialStatus, " +
    //        " 	CanTeacherFinancialDetails = @CanTeacherFinancialDetails, " +
    //        " 	CanTeacherSessionDetails = @CanTeacherSessionDetails, " +
    //        " 	CanTeacherManager = @CanTeacherManager, " +
    //        " 	CanMajorTeacherManager = @CanMajorTeacherManager, " +
    //        " 	CanTeacherClassBalance = @CanTeacherClassBalance, " +
    //        " 	CanTeacherPayForClass = @CanTeacherPayForClass, " +
    //        " 	CanTeacherTimeSelector = @CanTeacherTimeSelector, " +
    //        " 	CanClassSessionStatusSetter = @CanClassSessionStatusSetter, " +
    //        " 	CanClassSessionScheduleSetter = @CanClassSessionScheduleSetter, " +
    //        " 	CanClassManagerPrivate = @CanClassManagerPrivate, " +
    //        " 	CanClassManagerPublic = @CanClassManagerPublic, " +
    //        " 	CanClassDailyStatus = @CanClassDailyStatus, " +
    //        " 	CanPresenceManager = @CanPresenceManager, " +
    //        " 	CanTimeManager = @CanTimeManager, " +
    //        " 	CanEmployeeManager = @CanEmployeeManager, " +
    //        " 	CanEmployeeSalary = @CanEmployeeSalary, " +
    //        " 	CanComboManager = @CanComboManager, " +
    //        " 	CanActivityManager = @CanActivityManager, " +
    //        " 	CanDBSettings = @CanDBSettings, " +
    //        " 	CanGuarantorManager = @CanGuarantorManager, " +
    //        " 	CanSchoolSpecification = @CanSchoolSpecification, " +
    //        " 	CanDesktopUsers = @CanDesktopUsers, " +
    //        " 	CanOutcomeManager = @CanOutcomeManager, " +
    //        " 	CanIncomeManager = @CanIncomeManager, " +
    //        " 	CanStoreStuffAvailableViewer = @CanStoreStuffAvailableViewer, " +
    //        " 	CanStoreStuffTypeManager = @CanStoreStuffTypeManager, " +
    //        " 	CanStoreStuffBuyManager = @CanStoreStuffBuyManager, " +
    //        " 	CanStoreStuffSellItemManager = @CanStoreStuffSellItemManager, " +
    //        " 	CanStoreShopHistoryViewer = @CanStoreShopHistoryViewer, " +
    //        " 	CanStoreAffairs = @CanStoreAffairs, " +
    //        " 	CanStoreStuffSellItem = @CanStoreStuffSellItem, " +
    //        " 	CanStoreSalesTracking = @CanStoreSalesTracking, " +
    //        " 	CanReportStudentListOfMajor = @CanReportStudentListOfMajor, " +
    //        " 	CanReportPaysOfTeacherInterval = @CanReportPaysOfTeacherInterval, " +
    //        " 	CanReportSessionsOfTeacherInterval = @CanReportSessionsOfTeacherInterval, " +
    //        " 	CanReportClassesOfTeacherInterval = @CanReportClassesOfTeacherInterval, " +
    //        " 	CanReportMinistryReport = @CanReportMinistryReport, " +
    //        " 	CanReportStudentPayFactor = @CanReportStudentPayFactor, " +
    //        " 	CanReportTypicalOutcomeYear = @CanReportTypicalOutcomeYear, " +
    //        " 	CanReportIncomeInterval = @CanReportIncomeInterval, " +
    //        " 	CanReportRegisteredStudentsPerEmployee = @CanReportRegisteredStudentsPerEmployee, " +
    //        " 	CanReportTeacherPayFactor = @CanReportTeacherPayFactor, " +
    //        " 	CanReportEmployeePayFactor = @CanReportEmployeePayFactor, " +
    //        " 	CanReportStudentOfPublicClass = @CanReportStudentOfPublicClass, " +
    //        " 	CanReportAffairs = @CanReportAffairs " +
    //        " WHERE (1=1) " +
    //        " AND 	username = @username ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
    //        UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
    //        UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
    //        UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
    //        UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
    //        UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
    //        UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
    //        UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
    //        UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
    //        UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static DesktopUsersBO Find(string username)
    //    {
    //        if (username == null) return null;
    //        string commandString = "  SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        DesktopUsersBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new DesktopUsersBO();
    //                ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                ans.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                ans.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                ans.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                ans.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                ans.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                ans.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                ans.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                ans.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                ans.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                ans.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                ans.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                ans.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                ans.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                ans.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                ans.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                ans.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                ans.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                ans.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                ans.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                ans.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                ans.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
    //                ans.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                ans.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                ans.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                ans.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                ans.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                ans.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                ans.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                ans.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                ans.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                ans.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                ans.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                ans.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                ans.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                ans.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                ans.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                ans.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                ans.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                ans.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                ans.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                ans.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                ans.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                ans.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                ans.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                ans.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                ans.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                ans.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                ans.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                ans.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                ans.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                ans.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                ans.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                ans.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                ans.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                ans.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                ans.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                ans.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<DesktopUsersBO> List()
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<DesktopUsersBO> List(string username, string password)
    //    {
    //        string commandString = " SELECT * FROM desktopUsers ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (username != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
    //        }

    //        if (password != null)
    //        {
    //            wherePart += string.Format(" AND (desktopUsers.password = '{0}') ", password);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                DesktopUsersBO item = new DesktopUsersBO();
    //                item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
    //                item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
    //                item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
    //                item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
    //                item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
    //                item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
    //                item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
    //                item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
    //                item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
    //                item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
    //                item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
    //                item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
    //                item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
    //                item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
    //                item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
    //                item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
    //                item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
    //                item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
    //                item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
    //                item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
    //                item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
    //                item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
    //                item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
    //                item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
    //                item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
    //                item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
    //                item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
    //                item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
    //                item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
    //                item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
    //                item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
    //                item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
    //                item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
    //                item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
    //                item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
    //                item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
    //                item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
    //                item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
    //                item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
    //                item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
    //                item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
    //                item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
    //                item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
    //                item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
    //                item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
    //                item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
    //                item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
    //                item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
    //                item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
    //                item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
    //                item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
    //                item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
    //                item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
    //                item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
    //                item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
    //                item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
    //                item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
    //                item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
    //                item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
    //                item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class DesktopUsersDA : DataAccess
    {
        #region Constructors
        public DesktopUsersDA(DesktopUsersBO inDesktopUsersBO)
        {
            curDesktopUsersBO = inDesktopUsersBO;
        }
        #endregion


        #region Variables

        private DesktopUsersBO curDesktopUsersBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO desktopUsers (" +
            " 	username, " +
            " 	password, " +
            " 	lastLoginDate, " +
            " 	lastLoginTime, " +
            " 	EmployeeID, " +
            " 	CanStudentManager, " +
            " 	CanStudentRegisterationManager, " +
            " 	CanStudentInformationReport, " +
            " 	CanStudentPayForClass, " +
            " 	CanStudentSessionDetails, " +
            " 	CanStudentFinancialDetails, " +
            " 	CanStudentFinancialStatus, " +
            " 	CanStudentClassBalance, " +
            " 	CanStudentAffairs, " +
            " 	CanTeacherFinancialStatus, " +
            " 	CanTeacherFinancialDetails, " +
            " 	CanTeacherSessionDetails, " +
            " 	CanTeacherManager, " +
            " 	CanMajorTeacherManager, " +
            " 	CanTeacherClassBalance, " +
            " 	CanTeacherPayForClass, " +
            " 	CanTeacherTimeSelector, " +
            " 	CanClassSessionStatusSetter, " +
            " 	CanClassSessionScheduleSetter, " +
            " 	CanClassManagerPrivate, " +
            " 	CanClassManagerPublic, " +
            " 	CanClassDailyStatus, " +
            " 	CanPresenceManager, " +
            " 	CanTimeManager, " +
            " 	CanEmployeeManager, " +
            " 	CanEmployeeSalary, " +
            " 	CanComboManager, " +
            " 	CanActivityManager, " +
            " 	CanDBSettings, " +
            " 	CanGuarantorManager, " +
            " 	CanSchoolSpecification, " +
            " 	CanDesktopUsers, " +
            " 	CanOutcomeManager, " +
            " 	CanIncomeManager, " +
            " 	CanSynchDatabase, " +
            " 	CanStoreStuffAvailableViewer, " +
            " 	CanStoreStuffTypeManager, " +
            " 	CanStoreStuffBuyManager, " +
            " 	CanStoreStuffSellItemManager, " +
            " 	CanStoreShopHistoryViewer, " +
            " 	CanStoreAffairs, " +
            " 	CanStoreStuffSellItem, " +
            " 	CanStoreSalesTracking, " +
            " 	CanReportStudentListOfMajor, " +
            " 	CanReportPaysOfTeacherInterval, " +
            " 	CanReportSessionsOfTeacherInterval, " +
            " 	CanReportClassesOfTeacherInterval, " +
            " 	CanReportMinistryReport, " +
            " 	CanReportStudentPayFactor, " +
            " 	CanReportTypicalOutcomeYear, " +
            " 	CanReportIncomeInterval, " +
            " 	CanReportRegisteredStudentsPerEmployee, " +
            " 	CanReportTeacherPayFactor, " +
            " 	CanReportEmployeePayFactor, " +
            " 	CanReportStudentOfPublicClass, " +
            " 	CanReportAffairs) " +
            " VALUES (" +
            " 	@username, " +
            " 	@password, " +
            " 	@lastLoginDate, " +
            " 	@lastLoginTime, " +
            " 	@EmployeeID, " +
            " 	@CanStudentManager, " +
            " 	@CanStudentRegisterationManager, " +
            " 	@CanStudentInformationReport, " +
            " 	@CanStudentPayForClass, " +
            " 	@CanStudentSessionDetails, " +
            " 	@CanStudentFinancialDetails, " +
            " 	@CanStudentFinancialStatus, " +
            " 	@CanStudentClassBalance, " +
            " 	@CanStudentAffairs, " +
            " 	@CanTeacherFinancialStatus, " +
            " 	@CanTeacherFinancialDetails, " +
            " 	@CanTeacherSessionDetails, " +
            " 	@CanTeacherManager, " +
            " 	@CanMajorTeacherManager, " +
            " 	@CanTeacherClassBalance, " +
            " 	@CanTeacherPayForClass, " +
            " 	@CanTeacherTimeSelector, " +
            " 	@CanClassSessionStatusSetter, " +
            " 	@CanClassSessionScheduleSetter, " +
            " 	@CanClassManagerPrivate, " +
            " 	@CanClassManagerPublic, " +
            " 	@CanClassDailyStatus, " +
            " 	@CanPresenceManager, " +
            " 	@CanTimeManager, " +
            " 	@CanEmployeeManager, " +
            " 	@CanEmployeeSalary, " +
            " 	@CanComboManager, " +
            " 	@CanActivityManager, " +
            " 	@CanDBSettings, " +
            " 	@CanGuarantorManager, " +
            " 	@CanSchoolSpecification, " +
            " 	@CanDesktopUsers, " +
            " 	@CanOutcomeManager, " +
            " 	@CanIncomeManager, " +
            " 	@CanSynchDatabase, " +
            " 	@CanStoreStuffAvailableViewer, " +
            " 	@CanStoreStuffTypeManager, " +
            " 	@CanStoreStuffBuyManager, " +
            " 	@CanStoreStuffSellItemManager, " +
            " 	@CanStoreShopHistoryViewer, " +
            " 	@CanStoreAffairs, " +
            " 	@CanStoreStuffSellItem, " +
            " 	@CanStoreSalesTracking, " +
            " 	@CanReportStudentListOfMajor, " +
            " 	@CanReportPaysOfTeacherInterval, " +
            " 	@CanReportSessionsOfTeacherInterval, " +
            " 	@CanReportClassesOfTeacherInterval, " +
            " 	@CanReportMinistryReport, " +
            " 	@CanReportStudentPayFactor, " +
            " 	@CanReportTypicalOutcomeYear, " +
            " 	@CanReportIncomeInterval, " +
            " 	@CanReportRegisteredStudentsPerEmployee, " +
            " 	@CanReportTeacherPayFactor, " +
            " 	@CanReportEmployeePayFactor, " +
            " 	@CanReportStudentOfPublicClass, " +
            " 	@CanReportAffairs) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
            UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
            UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
            UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
            UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
            UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);
            UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
            UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
            UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
            UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
            UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
            UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
            UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
            UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
            UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
            UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
            UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanSynchDatabase", curDesktopUsersBO.CanSynchDatabase);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
            UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
            UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
            UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  
                connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM desktopUsers " +
            " WHERE (1=1) " +
            " AND 	username = @username ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE desktopUsers SET " +
            " 	password = @password, " +
            " 	lastLoginDate = @lastLoginDate, " +
            " 	lastLoginTime = @lastLoginTime, " +
            " 	EmployeeID = @EmployeeID, " +
            " 	CanStudentManager = @CanStudentManager, " +
            " 	CanStudentRegisterationManager = @CanStudentRegisterationManager, " +
            " 	CanStudentInformationReport = @CanStudentInformationReport, " +
            " 	CanStudentPayForClass = @CanStudentPayForClass, " +
            " 	CanStudentSessionDetails = @CanStudentSessionDetails, " +
            " 	CanStudentFinancialDetails = @CanStudentFinancialDetails, " +
            " 	CanStudentFinancialStatus = @CanStudentFinancialStatus, " +
            " 	CanStudentClassBalance = @CanStudentClassBalance, " +
            " 	CanStudentAffairs = @CanStudentAffairs, " +
            " 	CanTeacherFinancialStatus = @CanTeacherFinancialStatus, " +
            " 	CanTeacherFinancialDetails = @CanTeacherFinancialDetails, " +
            " 	CanTeacherSessionDetails = @CanTeacherSessionDetails, " +
            " 	CanTeacherManager = @CanTeacherManager, " +
            " 	CanMajorTeacherManager = @CanMajorTeacherManager, " +
            " 	CanTeacherClassBalance = @CanTeacherClassBalance, " +
            " 	CanTeacherPayForClass = @CanTeacherPayForClass, " +
            " 	CanTeacherTimeSelector = @CanTeacherTimeSelector, " +
            " 	CanClassSessionStatusSetter = @CanClassSessionStatusSetter, " +
            " 	CanClassSessionScheduleSetter = @CanClassSessionScheduleSetter, " +
            " 	CanClassManagerPrivate = @CanClassManagerPrivate, " +
            " 	CanClassManagerPublic = @CanClassManagerPublic, " +
            " 	CanClassDailyStatus = @CanClassDailyStatus, " +
            " 	CanPresenceManager = @CanPresenceManager, " +
            " 	CanTimeManager = @CanTimeManager, " +
            " 	CanEmployeeManager = @CanEmployeeManager, " +
            " 	CanEmployeeSalary = @CanEmployeeSalary, " +
            " 	CanComboManager = @CanComboManager, " +
            " 	CanActivityManager = @CanActivityManager, " +
            " 	CanDBSettings = @CanDBSettings, " +
            " 	CanGuarantorManager = @CanGuarantorManager, " +
            " 	CanSchoolSpecification = @CanSchoolSpecification, " +
            " 	CanDesktopUsers = @CanDesktopUsers, " +
            " 	CanOutcomeManager = @CanOutcomeManager, " +
            " 	CanIncomeManager = @CanIncomeManager, " +
            " 	CanSynchDatabase = @CanSynchDatabase, " +
            " 	CanStoreStuffAvailableViewer = @CanStoreStuffAvailableViewer, " +
            " 	CanStoreStuffTypeManager = @CanStoreStuffTypeManager, " +
            " 	CanStoreStuffBuyManager = @CanStoreStuffBuyManager, " +
            " 	CanStoreStuffSellItemManager = @CanStoreStuffSellItemManager, " +
            " 	CanStoreShopHistoryViewer = @CanStoreShopHistoryViewer, " +
            " 	CanStoreAffairs = @CanStoreAffairs, " +
            " 	CanStoreStuffSellItem = @CanStoreStuffSellItem, " +
            " 	CanStoreSalesTracking = @CanStoreSalesTracking, " +
            " 	CanReportStudentListOfMajor = @CanReportStudentListOfMajor, " +
            " 	CanReportPaysOfTeacherInterval = @CanReportPaysOfTeacherInterval, " +
            " 	CanReportSessionsOfTeacherInterval = @CanReportSessionsOfTeacherInterval, " +
            " 	CanReportClassesOfTeacherInterval = @CanReportClassesOfTeacherInterval, " +
            " 	CanReportMinistryReport = @CanReportMinistryReport, " +
            " 	CanReportStudentPayFactor = @CanReportStudentPayFactor, " +
            " 	CanReportTypicalOutcomeYear = @CanReportTypicalOutcomeYear, " +
            " 	CanReportIncomeInterval = @CanReportIncomeInterval, " +
            " 	CanReportRegisteredStudentsPerEmployee = @CanReportRegisteredStudentsPerEmployee, " +
            " 	CanReportTeacherPayFactor = @CanReportTeacherPayFactor, " +
            " 	CanReportEmployeePayFactor = @CanReportEmployeePayFactor, " +
            " 	CanReportStudentOfPublicClass = @CanReportStudentOfPublicClass, " +
            " 	CanReportAffairs = @CanReportAffairs " +
            " WHERE (1=1) " +
            " AND 	username = @username ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@username", curDesktopUsersBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curDesktopUsersBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@lastLoginDate", curDesktopUsersBO.LastLoginDate);
            UtilityDB.AddParameter(command.Parameters, "@lastLoginTime", curDesktopUsersBO.LastLoginTime);
            UtilityDB.AddParameter(command.Parameters, "@EmployeeID", curDesktopUsersBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentManager", curDesktopUsersBO.CanStudentManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentRegisterationManager", curDesktopUsersBO.CanStudentRegisterationManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentInformationReport", curDesktopUsersBO.CanStudentInformationReport);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentPayForClass", curDesktopUsersBO.CanStudentPayForClass);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentSessionDetails", curDesktopUsersBO.CanStudentSessionDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialDetails", curDesktopUsersBO.CanStudentFinancialDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentFinancialStatus", curDesktopUsersBO.CanStudentFinancialStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentClassBalance", curDesktopUsersBO.CanStudentClassBalance);
            UtilityDB.AddParameter(command.Parameters, "@CanStudentAffairs", curDesktopUsersBO.CanStudentAffairs);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialStatus", curDesktopUsersBO.CanTeacherFinancialStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherFinancialDetails", curDesktopUsersBO.CanTeacherFinancialDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherSessionDetails", curDesktopUsersBO.CanTeacherSessionDetails);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherManager", curDesktopUsersBO.CanTeacherManager);
            UtilityDB.AddParameter(command.Parameters, "@CanMajorTeacherManager", curDesktopUsersBO.CanMajorTeacherManager);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherClassBalance", curDesktopUsersBO.CanTeacherClassBalance);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherPayForClass", curDesktopUsersBO.CanTeacherPayForClass);
            UtilityDB.AddParameter(command.Parameters, "@CanTeacherTimeSelector", curDesktopUsersBO.CanTeacherTimeSelector);
            UtilityDB.AddParameter(command.Parameters, "@CanClassSessionStatusSetter", curDesktopUsersBO.CanClassSessionStatusSetter);
            UtilityDB.AddParameter(command.Parameters, "@CanClassSessionScheduleSetter", curDesktopUsersBO.CanClassSessionScheduleSetter);
            UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPrivate", curDesktopUsersBO.CanClassManagerPrivate);
            UtilityDB.AddParameter(command.Parameters, "@CanClassManagerPublic", curDesktopUsersBO.CanClassManagerPublic);
            UtilityDB.AddParameter(command.Parameters, "@CanClassDailyStatus", curDesktopUsersBO.CanClassDailyStatus);
            UtilityDB.AddParameter(command.Parameters, "@CanPresenceManager", curDesktopUsersBO.CanPresenceManager);
            UtilityDB.AddParameter(command.Parameters, "@CanTimeManager", curDesktopUsersBO.CanTimeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanEmployeeManager", curDesktopUsersBO.CanEmployeeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanEmployeeSalary", curDesktopUsersBO.CanEmployeeSalary);
            UtilityDB.AddParameter(command.Parameters, "@CanComboManager", curDesktopUsersBO.CanComboManager);
            UtilityDB.AddParameter(command.Parameters, "@CanActivityManager", curDesktopUsersBO.CanActivityManager);
            UtilityDB.AddParameter(command.Parameters, "@CanDBSettings", curDesktopUsersBO.CanDBSettings);
            UtilityDB.AddParameter(command.Parameters, "@CanGuarantorManager", curDesktopUsersBO.CanGuarantorManager);
            UtilityDB.AddParameter(command.Parameters, "@CanSchoolSpecification", curDesktopUsersBO.CanSchoolSpecification);
            UtilityDB.AddParameter(command.Parameters, "@CanDesktopUsers", curDesktopUsersBO.CanDesktopUsers);
            UtilityDB.AddParameter(command.Parameters, "@CanOutcomeManager", curDesktopUsersBO.CanOutcomeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanIncomeManager", curDesktopUsersBO.CanIncomeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanSynchDatabase", curDesktopUsersBO.CanSynchDatabase);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffAvailableViewer", curDesktopUsersBO.CanStoreStuffAvailableViewer);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffTypeManager", curDesktopUsersBO.CanStoreStuffTypeManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffBuyManager", curDesktopUsersBO.CanStoreStuffBuyManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItemManager", curDesktopUsersBO.CanStoreStuffSellItemManager);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreShopHistoryViewer", curDesktopUsersBO.CanStoreShopHistoryViewer);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreAffairs", curDesktopUsersBO.CanStoreAffairs);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreStuffSellItem", curDesktopUsersBO.CanStoreStuffSellItem);
            UtilityDB.AddParameter(command.Parameters, "@CanStoreSalesTracking", curDesktopUsersBO.CanStoreSalesTracking);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentListOfMajor", curDesktopUsersBO.CanReportStudentListOfMajor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportPaysOfTeacherInterval", curDesktopUsersBO.CanReportPaysOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportSessionsOfTeacherInterval", curDesktopUsersBO.CanReportSessionsOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportClassesOfTeacherInterval", curDesktopUsersBO.CanReportClassesOfTeacherInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportMinistryReport", curDesktopUsersBO.CanReportMinistryReport);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentPayFactor", curDesktopUsersBO.CanReportStudentPayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportTypicalOutcomeYear", curDesktopUsersBO.CanReportTypicalOutcomeYear);
            UtilityDB.AddParameter(command.Parameters, "@CanReportIncomeInterval", curDesktopUsersBO.CanReportIncomeInterval);
            UtilityDB.AddParameter(command.Parameters, "@CanReportRegisteredStudentsPerEmployee", curDesktopUsersBO.CanReportRegisteredStudentsPerEmployee);
            UtilityDB.AddParameter(command.Parameters, "@CanReportTeacherPayFactor", curDesktopUsersBO.CanReportTeacherPayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportEmployeePayFactor", curDesktopUsersBO.CanReportEmployeePayFactor);
            UtilityDB.AddParameter(command.Parameters, "@CanReportStudentOfPublicClass", curDesktopUsersBO.CanReportStudentOfPublicClass);
            UtilityDB.AddParameter(command.Parameters, "@CanReportAffairs", curDesktopUsersBO.CanReportAffairs);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  
                connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static DesktopUsersBO Find(string username)
        {
            if (username == null) return null;
            string commandString = "  SELECT * FROM desktopUsers ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            DesktopUsersBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new DesktopUsersBO();
                    ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
                    ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
                    ans.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
                    ans.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
                    ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
                    ans.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
                    ans.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
                    ans.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
                    ans.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
                    ans.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
                    ans.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
                    ans.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
                    ans.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
                    ans.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
                    ans.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
                    ans.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
                    ans.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
                    ans.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
                    ans.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
                    ans.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
                    ans.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
                    ans.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
                    ans.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
                    ans.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
                    ans.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
                    ans.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
                    ans.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
                    ans.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
                    ans.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
                    ans.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
                    ans.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
                    ans.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
                    ans.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
                    ans.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
                    ans.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
                    ans.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
                    ans.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
                    ans.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
                    ans.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
                    ans.CanSynchDatabase = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSynchDatabase]);
                    ans.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
                    ans.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
                    ans.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
                    ans.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
                    ans.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
                    ans.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
                    ans.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
                    ans.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
                    ans.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
                    ans.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
                    ans.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
                    ans.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
                    ans.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
                    ans.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
                    ans.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
                    ans.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
                    ans.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
                    ans.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
                    ans.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
                    ans.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
                    ans.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

                }
            }
            return ans;
        }

        public static List<DesktopUsersBO> List()
        {
            string commandString = " SELECT * FROM desktopUsers ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DesktopUsersBO item = new DesktopUsersBO();
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
                    item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
                    item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
                    item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
                    item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
                    item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
                    item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
                    item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
                    item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
                    item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
                    item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
                    item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
                    item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
                    item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
                    item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
                    item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
                    item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
                    item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
                    item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
                    item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
                    item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
                    item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
                    item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
                    item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
                    item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
                    item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
                    item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
                    item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
                    item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
                    item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
                    item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
                    item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
                    item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
                    item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
                    item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
                    item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
                    item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
                    item.CanSynchDatabase = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSynchDatabase]);
                    item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
                    item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
                    item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
                    item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
                    item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
                    item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
                    item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
                    item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
                    item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
                    item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
                    item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
                    item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
                    item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
                    item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
                    item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
                    item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
                    item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
                    item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
                    item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
                    item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
                    item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<DesktopUsersBO> List(string username, string password)
        {
            string commandString = " SELECT * FROM desktopUsers ";
            string wherePart = " WHERE (1=1) ";
            if (username != null)
            {
                wherePart += string.Format(" AND (desktopUsers.username = '{0}') ", username);
            }

            if (password != null)
            {
                wherePart += string.Format(" AND (desktopUsers.password = '{0}') ", password);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DesktopUsersBO> ans = new List<DesktopUsersBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DesktopUsersBO item = new DesktopUsersBO();
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.Password]);
                    item.LastLoginDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginDate]);
                    item.LastLoginTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.LastLoginTime]);
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DesktopUsers.EmployeeID]);
                    item.CanStudentManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentManager]);
                    item.CanStudentRegisterationManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentRegisterationManager]);
                    item.CanStudentInformationReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentInformationReport]);
                    item.CanStudentPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentPayForClass]);
                    item.CanStudentSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentSessionDetails]);
                    item.CanStudentFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialDetails]);
                    item.CanStudentFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentFinancialStatus]);
                    item.CanStudentClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentClassBalance]);
                    item.CanStudentAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStudentAffairs]);
                    item.CanTeacherFinancialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialStatus]);
                    item.CanTeacherFinancialDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherFinancialDetails]);
                    item.CanTeacherSessionDetails = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherSessionDetails]);
                    item.CanTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherManager]);
                    item.CanMajorTeacherManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanMajorTeacherManager]);
                    item.CanTeacherClassBalance = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherClassBalance]);
                    item.CanTeacherPayForClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherPayForClass]);
                    item.CanTeacherTimeSelector = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTeacherTimeSelector]);
                    item.CanClassSessionStatusSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionStatusSetter]);
                    item.CanClassSessionScheduleSetter = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassSessionScheduleSetter]);
                    item.CanClassManagerPrivate = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPrivate]);
                    item.CanClassManagerPublic = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassManagerPublic]);
                    item.CanClassDailyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanClassDailyStatus]);
                    item.CanPresenceManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanPresenceManager]);
                    item.CanTimeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanTimeManager]);
                    item.CanEmployeeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeManager]);
                    item.CanEmployeeSalary = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanEmployeeSalary]);
                    item.CanComboManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanComboManager]);
                    item.CanActivityManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanActivityManager]);
                    item.CanDBSettings = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDBSettings]);
                    item.CanGuarantorManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanGuarantorManager]);
                    item.CanSchoolSpecification = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSchoolSpecification]);
                    item.CanDesktopUsers = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanDesktopUsers]);
                    item.CanOutcomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanOutcomeManager]);
                    item.CanIncomeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanIncomeManager]);
                    item.CanSynchDatabase = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanSynchDatabase]);
                    item.CanStoreStuffAvailableViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffAvailableViewer]);
                    item.CanStoreStuffTypeManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffTypeManager]);
                    item.CanStoreStuffBuyManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffBuyManager]);
                    item.CanStoreStuffSellItemManager = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItemManager]);
                    item.CanStoreShopHistoryViewer = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreShopHistoryViewer]);
                    item.CanStoreAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreAffairs]);
                    item.CanStoreStuffSellItem = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreStuffSellItem]);
                    item.CanStoreSalesTracking = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanStoreSalesTracking]);
                    item.CanReportStudentListOfMajor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentListOfMajor]);
                    item.CanReportPaysOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportPaysOfTeacherInterval]);
                    item.CanReportSessionsOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportSessionsOfTeacherInterval]);
                    item.CanReportClassesOfTeacherInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportClassesOfTeacherInterval]);
                    item.CanReportMinistryReport = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportMinistryReport]);
                    item.CanReportStudentPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentPayFactor]);
                    item.CanReportTypicalOutcomeYear = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTypicalOutcomeYear]);
                    item.CanReportIncomeInterval = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportIncomeInterval]);
                    item.CanReportRegisteredStudentsPerEmployee = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportRegisteredStudentsPerEmployee]);
                    item.CanReportTeacherPayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportTeacherPayFactor]);
                    item.CanReportEmployeePayFactor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportEmployeePayFactor]);
                    item.CanReportStudentOfPublicClass = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportStudentOfPublicClass]);
                    item.CanReportAffairs = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DesktopUsers.CanReportAffairs]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    // Not Auto generated.
    public partial class DesktopUsersDA
    {
        public static bool ChangePassword(string username, string lastPass, string newPass)
        {
            string commandString = "UPDATE desktopUsers SET Password = @newPassword where username=@username and password=@lastPass ";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            command.Parameters.AddWithValue("@lastPass", lastPass);
            command.Parameters.AddWithValue("@Username", username);
            command.Parameters.AddWithValue("@newPassword", newPass);

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }
        public static bool SetLoginTime(string username, string loginDate, string loginTime)
        {
            string commandString = "UPDATE desktopUsers SET lastLoginDate = @lastLoginDate, lastLoginTime = @lastLoginTime where username=@username ";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            command.Parameters.AddWithValue("@lastLoginDate", loginDate);
            command.Parameters.AddWithValue("@Username", username);
            command.Parameters.AddWithValue("@lastLoginTime", loginTime);

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }
        public static DesktopUsersBO Find(string username, string password)
        {
            List<DesktopUsersBO> list = List(username, password);
            if (list.Count > 0)
                return list[0];
            return null;
        }
    }

    class LoginDetailsDA : DataAccess
    {
        private LoginDetailsBO login;

        public LoginDetailsDA(LoginDetailsBO lda)
        {
            login = lda;
        }
        
        public override bool Add()
        {
            string commandString =
            "INSERT INTO loginDetails " +
            " (loginID, username, loginDate, loginTime, privilegesGrant, computerName, computerIP) " +
            " VALUES     (@loginID,@username,@loginDate,@loginTime,@loginPrivilagesGrant,@computerName,@computerIP) ";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            command.Parameters.AddWithValue("@loginID", login.loginID);
            command.Parameters.AddWithValue("@username", login.username);
            command.Parameters.AddWithValue("@loginDate", login.loginDate);
            command.Parameters.AddWithValue("@loginTime", login.loginTime);
            command.Parameters.AddWithValue("@loginPrivilagesGrant", login.privilegedGrant);
            command.Parameters.AddWithValue("@computerName", System.Windows.Forms.SystemInformation.ComputerName);
            command.Parameters.AddWithValue("@computerIP", IPAddress.Any.ToString());

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if (command.ExecuteNonQuery() == 1)
                    return true;
                else
                    return false;
            }
        }
    }

    class LiteralDA : DataAccess
    {
        private Literal literal;
        public LiteralDA(Literal lit)
        {
            literal = lit;
        }

        public override bool Update()
        {
            string commandString = "";

            switch (Literal.HasDescription)
            {
                case false:
                    commandString = string.Format(
                        "UPDATE    {0} " +
                        " SET {1} = {2}, {3} = '{4}' WHERE {1} = {2}",
                        Literal.TableName, Literal.LiteralIDCol, literal.LiteralID,
                        Literal.LiteralNameCol, literal.LiteralName);

                    break;

                case true:
                    commandString = string.Format(
                        "UPDATE    {0} " +
                        " SET {1} = {2}, {3} = '{4}', {5}= '{6}' WHERE {1} = {2} ",
                        Literal.TableName, Literal.LiteralIDCol, literal.LiteralID,
                        Literal.LiteralNameCol, literal.LiteralName,
                        Literal.LiteralDescriptionCol, literal.LiteralDescription);
                    break;
            }

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }

        }

        public override bool Add()
        {
            string commandString = "";

            switch (Literal.HasDescription)
            {
                case false:
                    commandString = string.Format(
                        " INSERT INTO {0} " +
                        " ({1}, {2}) " +
                        " VALUES     ({3}, '{4}') ",
                        Literal.TableName, Literal.LiteralIDCol, Literal.LiteralNameCol,
                        literal.LiteralID, literal.LiteralName);

                    break;

                case true:
                    commandString = string.Format(
                        " INSERT INTO {0} " +
                        " ({1}, {2}, {3}) " +
                        " VALUES     ({4}, '{5}', '{6}') ",
                        Literal.TableName, Literal.LiteralIDCol, Literal.LiteralNameCol, Literal.LiteralDescriptionCol,
                        literal.LiteralID, literal.LiteralName, literal.LiteralDescription);
                    break;
            }

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }

        }

        public override bool Delete()
        {
            string commandString = string.Format(
                " DELETE FROM {0} " +
                " WHERE     ({1}= {2})",
                Literal.TableName, Literal.LiteralIDCol, literal.LiteralID);

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                //command.CommandText = commandString;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static List<Literal> List()
        {
            string commandString = "";
            switch (Literal.HasDescription)
            {
                case false:
                    commandString = string.Format(
                        "SELECT {0}, {1} FROM {2}",
                        Literal.LiteralIDCol, Literal.LiteralNameCol, Literal.TableName);
                    break;

                case true:
                    commandString = string.Format(
                        "SELECT {0}, {1}, {2} FROM {3}",
                        Literal.LiteralIDCol, Literal.LiteralNameCol, Literal.LiteralDescriptionCol, Literal.TableName);
                    break;

            }

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                connection.ConnectionString = connectionString;
                checkConnectionState(connection);  connection.Open();

                // 

                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandString;

                SqlDataReader reader = (JobLogger.RunCommandReader(command));

                List<Literal> ans = new List<Literal>();
                while (reader.Read())
                {
                    Literal literal = new Literal();

                    literal.LiteralID = ConvertToInt(reader[Literal.LiteralIDCol].ToString());
                    literal.LiteralName = reader[Literal.LiteralNameCol].ToString().Trim();
                    if (Literal.HasDescription) literal.LiteralDescription = reader[Literal.LiteralDescriptionCol].ToString();

                    ans.Add(literal);
                }
                return ans;
            }
        }
    }

    class DayCodeDA : DataAccess
    {
        public static List<DayCodeBO> List()
        {
            string commandStringList =
                 " SELECT     dayCode.dayID, dayCode.dayName " +
                 " FROM         dayCode ";

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                connection.ConnectionString = connectionString;
                checkConnectionState(connection);  connection.Open();

                // ToDo: String Command is ready (Not tested yet);

                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandStringList;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));

                List<DayCodeBO> ans = new List<DayCodeBO>();
                while (reader.Read())
                {
                    DayCodeBO day = new DayCodeBO();
                    day.DayCodeID = ConvertToInt(reader[DatabaseSchema.DayCode.DayID].ToString());
                    day.DayName = reader[DatabaseSchema.DayCode.DayName].ToString();
                    ans.Add(day);
                }
                return ans;
            }
        }

        public override bool Update()
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override bool Add()
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override bool Delete()
        {
            throw new Exception("The method or operation is not implemented.");
        }

        internal static DayCodeBO Find(int DayCodeID)
        {
            string commandStringList =
                 " SELECT     dayCode.dayID, dayCode.dayName " +
                 " FROM         dayCode WHERE dayCode.dayID = @DayID ";

            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                //connection.ConnectionString = connectionString;
                checkConnectionState(connection);  connection.Open();

                // ToDo: String Command is ready (Not tested yet);

                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandStringList;

                command.Parameters.AddWithValue("@DayID", DayCodeID);

                SqlDataReader reader = (JobLogger.RunCommandReader(command));

                DayCodeBO day = new DayCodeBO();
                if (reader.Read())
                {
                    day.DayCodeID = ConvertToInt(reader[DatabaseSchema.DayCode.DayID].ToString());
                    day.DayName = reader[DatabaseSchema.DayCode.DayName].ToString();
                }
                return day;
            }
        }
    }

    public partial class StudentDA : DataAccess
    {
        #region Constructors
        public StudentDA(StudentBO inStudentBO)
        {
            curStudentBO = inStudentBO;
            LastChangeFiller.SetChangesInfo((ILastChange)curStudentBO);
        }
        #endregion


        #region Variables

        private StudentBO curStudentBO = null;
        internal static List<StudentBO> allStudents = new List<StudentBO>(); //hanieh
        internal static List<StudentBO> allActiveStudents = new List<StudentBO>(); //hanieh
        internal static List<StudentBO> allinActiveStudents = new List<StudentBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
                " INSERT INTO student " +
                "                       (studentID, firstName, lastName, fatherName, gender, certificationNumber, nationalNumber, birthDate, bornPlace, bornProvince, bornCountry,  " +
                "                       issuePlace, martialStatus, areaID, addressHome, tellHome, addressWork, tellWork, cellPhone, degreeTypeID, degreeLevelID, studyMajor,  " +
                "                       studyStatus, job, howtoFindID, schoolName, activityStatus, image, username, password, parentUserName, parentPassword,  " +
                "                       lastChangeID, lastChangeDate, lastChangeTime) " +
                " VALUES     (@studentID,@firstName,@lastName,@fatherName,@gender,@certificationNumber,@nationalNumber,@birthDate,@bornPlace,@bornProvince,@bornCountry,@issuePlace,@martialStatus,@areaID,@addressHome,@tellHome,@addressWork,@tellWork,@cellPhone,@degreeTypeID,@degreeLevelID,@studyMajor,@studyStatus,@job,@howtoFindID,@schoolName,@activityStatus,@image,@username,@password,@parentUserName,@parentPassword,@lastChangeID,@lastChangeDate,@lastChangeTime) ";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curStudentBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curStudentBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curStudentBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curStudentBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curStudentBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curStudentBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curStudentBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curStudentBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curStudentBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curStudentBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curStudentBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curStudentBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@areaID", curStudentBO.AreaID);
            UtilityDB.AddParameter(command.Parameters, "@addressHome", curStudentBO.AddressHome);
            UtilityDB.AddParameter(command.Parameters, "@tellHome", curStudentBO.TellHome);
            UtilityDB.AddParameter(command.Parameters, "@addressWork", curStudentBO.AddressWork);
            UtilityDB.AddParameter(command.Parameters, "@tellWork", curStudentBO.TellWork);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curStudentBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curStudentBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curStudentBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curStudentBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curStudentBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curStudentBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curStudentBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@schoolName", curStudentBO.SchoolName);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", true);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curStudentBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@username", curStudentBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curStudentBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@parentUserName", curStudentBO.ParentUserName);
            UtilityDB.AddParameter(command.Parameters, "@parentPassword", curStudentBO.ParentPassword);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
                " DELETE FROM student WHERE studentid = @studentid";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curStudentBO.StudentID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
                " UPDATE    student " +
                " SET              firstName = @firstName, lastName = @lastName, fatherName = @fatherName, gender = @gender, certificationNumber = @certificationNumber,  " +
                "                       nationalNumber = @nationalNumber, birthDate = @birthDate, bornPlace = @bornPlace, bornProvince = @bornProvince, bornCountry = @bornCountry,  " +
                "                       issuePlace = @issuePlace, martialStatus = @martialStatus, areaID = @areaID, addressHome = @addressHome, tellHome = @tellHome,  " +
                "                       addressWork = @addressWork, tellWork = @tellWork, cellPhone = @cellPhone, degreeTypeID = @degreeTypeID, degreeLevelID = @degreeLevelID,  " +
                "                       studyMajor = @studyMajor, studyStatus = @studyStatus, job = @job, howtoFindID = @howtoFindID, schoolName = @schoolName,  " +
                "                       activityStatus = @activityStatus, image = @image, username = @username, password = @password, parentUserName = @parentUserName,  " +
                "                       parentPassword = @parentPassword, lastChangeID = @lastChangeID, lastChangeDate = @lastChangeDate,  " +
                "                       lastChangeTime = @lastChangeTime " +
                " WHERE     (studentID = @studentID) ";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curStudentBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curStudentBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curStudentBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curStudentBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curStudentBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curStudentBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curStudentBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curStudentBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curStudentBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curStudentBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curStudentBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curStudentBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@areaID", curStudentBO.AreaID);
            UtilityDB.AddParameter(command.Parameters, "@addressHome", curStudentBO.AddressHome);
            UtilityDB.AddParameter(command.Parameters, "@tellHome", curStudentBO.TellHome);
            UtilityDB.AddParameter(command.Parameters, "@addressWork", curStudentBO.AddressWork);
            UtilityDB.AddParameter(command.Parameters, "@tellWork", curStudentBO.TellWork);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curStudentBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curStudentBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curStudentBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curStudentBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curStudentBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curStudentBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curStudentBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@schoolName", curStudentBO.SchoolName);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStudentBO.ActivityStatus);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curStudentBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@username", curStudentBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curStudentBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@parentUserName", curStudentBO.ParentUserName);
            UtilityDB.AddParameter(command.Parameters, "@parentPassword", curStudentBO.ParentPassword);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static StudentBO Find(string studentID)
        {
            if (studentID == null) return null;
            string commandString = " SELECT * FROM student ";
            string wherePart = " WHERE (1=1) ";
            if (studentID != null)
            {
                wherePart += string.Format(" AND (student.studentID = '{0}') ", studentID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            StudentBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new StudentBO();
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastName]);
                    ans.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FatherName]);
                    ans.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.Gender]);
                    ans.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CertificationNumber]);
                    ans.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.NationalNumber]);
                    ans.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BirthDate]);
                    ans.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPlace]);
                    ans.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornProvince]);
                    ans.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornCountry]);
                    ans.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.IssuePlace]);
                    ans.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.MartialStatus]);
                    ans.AreaID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.AreaID]);
                    ans.AddressHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressHome]);
                    ans.TellHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellHome]);
                    ans.AddressWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressWork]);
                    ans.TellWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellWork]);
                    ans.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CellPhone]);
                    ans.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeTypeID]);
                    ans.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeLevelID]);
                    ans.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudyMajor]);
                    ans.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.StudyStatus]);
                    ans.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Job]);
                    ans.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.HowtoFindID]);
                    ans.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.SchoolName]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.ActivityStatus]);
                    ans.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Student.Image]);
                    ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Username]);
                    ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Password]);
                    ans.ParentUserName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentUserName]);
                    ans.ParentPassword = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentPassword]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<StudentBO> List()
        {
            string commandString = " SELECT * FROM student ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            //List<StudentBO> ans = new List<StudentBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StudentBO item = new StudentBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.MartialStatus]);
                    item.AreaID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.AreaID]);
                    item.AddressHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressHome]);
                    item.TellHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellHome]);
                    item.AddressWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressWork]);
                    item.TellWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellWork]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Job]);
                    item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.HowtoFindID]);
                    item.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.SchoolName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.ActivityStatus]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Student.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Password]);
                    item.ParentUserName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentUserName]);
                    item.ParentPassword = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentPassword]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeTime]);

                    //ans.Add(item); //hanieh
                    allStudents.Add(item);
                }
            }
            return allStudents; //ans; //hanieh
        }
        public static List<StudentBO> List(int? areaID, int? howtoFindID, bool? activityStatus)
        {
            string commandString = " SELECT [studentID],[firstName],[lastName],[fatherName],[birthDate],[bornPlace],[areaID],[addressHome],[tellHome],[addressWork],[tellWork],[cellPhone],[job],[activityStatus] " +
                                   " FROM student ";
            string wherePart = " WHERE (1=1) ";
            if (areaID != null)
            {
                wherePart += string.Format(" AND (student.areaID = {0}) ", areaID.ToString());
            }

            if (howtoFindID != null)
            {
                wherePart += string.Format(" AND (student.howtoFindID = {0}) ", howtoFindID.ToString());
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (student.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StudentBO> ans = new List<StudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StudentBO item = new StudentBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FatherName]);
                    //item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.Gender]);
                    //item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CertificationNumber]);
                    //item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPlace]);
                    //item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPro    vince]);
                    //item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornCountry]);
                    //item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.IssuePlace]);
                    //item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.MartialStatus]);
                    //item.AreaID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.AreaID]);
                    item.AddressHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressHome]);
                    item.TellHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellHome]);
                    item.AddressWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressWork]);
                    item.TellWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellWork]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CellPhone]);
                    //item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeTypeID]);
                    //item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeLevelID]);
                    //item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudyMajor]);
                    //item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.StudyStatus]);
                    //item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Job]);
                    //item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.HowtoFindID]);
                    //item.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.SchoolName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.ActivityStatus]);
                    //item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Student.Image]);
                    //item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Username]);
                    //item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Password]);
                    //item.ParentUserName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentUserName]);
                    //item.ParentPassword = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentPassword]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<StudentBO> List(bool? activityStatus)
        {
            return List(null, null, activityStatus);
            ////
            string commandString = " SELECT * FROM student ";
            string wherePart = " WHERE (1=1) ";
            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (student.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StudentBO> ans = new List<StudentBO>();
            using (connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StudentBO item = new StudentBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.MartialStatus]);
                    item.AreaID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.AreaID]);
                    item.AddressHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressHome]);
                    item.TellHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellHome]);
                    item.AddressWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressWork]);
                    item.TellWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellWork]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Job]);
                    item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.HowtoFindID]);
                    item.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.SchoolName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.ActivityStatus]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Student.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Password]);
                    item.ParentUserName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentUserName]);
                    item.ParentPassword = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentPassword]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<StudentBO> ListDeactivateCandidates(string studentID)
        {
            string commandString = " SELECT student.studentID, student.firstName, student.lastName, viwDeactiveCandidatesStudent.lastClassDate, student.fatherName, student.activityStatus FROM student INNER JOIN viwDeactiveCandidatesStudent ON student.studentID = viwDeactiveCandidatesStudent.studentID ";
            string wherePart = " WHERE (1=1) ";
            if (studentID != null)
            {
                wherePart += string.Format(" AND (student.studentID = '{0}') ", studentID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StudentBO> ans = new List<StudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string lastClassDate = UtilityDB.ReadReader<string>(reader["lastClassDate"]);
                    PersianDate date = PersianDate.Now;
                    bool converted = true;
                    try
                    {
                        date = new PersianDate(lastClassDate);
                    }
                    catch (Exception)
                    {
                        converted = false;
                    }
                    if (converted)
                    {
                        PersianCalendar pc = new PersianCalendar();
                        date = pc.AddMonths(date, 3);
                        if (date < PersianDate.Now)
                            continue;
                    }
                    StudentBO item = new StudentBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.FatherName]);
                    //item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.Gender]);
                    //item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CertificationNumber]);
                    //item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.NationalNumber]);
                    //item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BirthDate]);
                    //item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornPlace]);
                    //item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornProvince]);
                    //item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.BornCountry]);
                    //item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.IssuePlace]);
                    //item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.MartialStatus]);
                    //item.AreaID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.AreaID]);
                    //item.AddressHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressHome]);
                    //item.TellHome = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellHome]);
                    //item.AddressWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.AddressWork]);
                    //item.TellWork = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.TellWork]);
                    //item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.CellPhone]);
                    //item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeTypeID]);
                    //item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.DegreeLevelID]);
                    //item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudyMajor]);
                    //item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.StudyStatus]);
                    //item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Job]);
                    //item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Student.HowtoFindID]);
                    //item.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.SchoolName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Student.ActivityStatus]);
                    //item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Student.Image]);
                    //item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Username]);
                    //item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.Password]);
                    //item.ParentUserName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentUserName]);
                    //item.ParentPassword = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.ParentPassword]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT studentid FROM student ";
            string wherePart = string.Format(" WHERE (1=1) and studentid like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Student.StudentID]);

                    ans.Add(item);

                }
            }
            return ans;
        }
        //Added by hanieh----------------------------------------------------
        public static List<string> BirthdayList(string date)
        {
            string commandString = " SELECT firstName + ' ' + lastName name FROM student ";
            string wherePart = " WHERE (1=1) and  birthdate is not null ";
            wherePart += string.Format(" AND (SUBSTRING(birthdate,6,5) = '{0}') ", date);
            
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            List<string> ans = new List<string>(); 
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection); connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string name = UtilityDB.ReadReader<string>(reader[0]);
                    ans.Add(name); 
                }
            }
            return ans; //ans; //hanieh
        }
        //-----------------------------------------------------------------------
        #endregion
    }

    public partial class AreaDA : DataAccess
    {
        #region Constructors
        public AreaDA(AreaBO inAreaBO)
        {
            curAreaBO = inAreaBO;
        }
        #endregion


        #region Variables

        private AreaBO curAreaBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@areaID", curAreaBO.AreaID);
            UtilityDB.AddParameter(command.Parameters, "@areaName", curAreaBO.AreaName);
            UtilityDB.AddParameter(command.Parameters, "@areaDescription", curAreaBO.AreaDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curAreaBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curAreaBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curAreaBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curAreaBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@areaID", curAreaBO.AreaID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@areaID", curAreaBO.AreaID);
            UtilityDB.AddParameter(command.Parameters, "@areaName", curAreaBO.AreaName);
            UtilityDB.AddParameter(command.Parameters, "@areaDescription", curAreaBO.AreaDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curAreaBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curAreaBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curAreaBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curAreaBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static AreaBO Find(int areaID)
        {
            string commandString = "";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (area.areaID = {0}) ", areaID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            AreaBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new AreaBO();
                    ans.AreaID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Area.AreaID]);
                    ans.AreaName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.AreaName]);
                    ans.AreaDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.AreaDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Area.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<AreaBO> List()
        {
            string commandString = " SELECT * FROM area ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<AreaBO> ans = new List<AreaBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    AreaBO item = new AreaBO();
                    item.AreaID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Area.AreaID]);
                    item.AreaName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.AreaName]);
                    item.AreaDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.AreaDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Area.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Area.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class DegreeLevelDA : DataAccess
    {
        #region Constructors
        public DegreeLevelDA(DegreeLevelBO inDegreeLevelBO)
        {
            curDegreeLevelBO = inDegreeLevelBO;
        }
        #endregion


        #region Variables

        private DegreeLevelBO curDegreeLevelBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curDegreeLevelBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelName", curDegreeLevelBO.DegreeLevelName);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelDescription", curDegreeLevelBO.DegreeLevelDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curDegreeLevelBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDegreeLevelBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDegreeLevelBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDegreeLevelBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curDegreeLevelBO.DegreeLevelID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curDegreeLevelBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelName", curDegreeLevelBO.DegreeLevelName);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelDescription", curDegreeLevelBO.DegreeLevelDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curDegreeLevelBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDegreeLevelBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDegreeLevelBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDegreeLevelBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static DegreeLevelBO Find(int degreeLevelID)
        {
            string commandString = "";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (degreeLevel.degreeLevelID = {0}) ", degreeLevelID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            DegreeLevelBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new DegreeLevelBO();
                    ans.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DegreeLevel.DegreeLevelID]);
                    ans.DegreeLevelName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.DegreeLevelName]);
                    ans.DegreeLevelDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.DegreeLevelDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DegreeLevel.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<DegreeLevelBO> List()
        {
            string commandString = " SELECT * FROM degreeLevel ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DegreeLevelBO> ans = new List<DegreeLevelBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DegreeLevelBO item = new DegreeLevelBO();
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DegreeLevel.DegreeLevelID]);
                    item.DegreeLevelName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.DegreeLevelName]);
                    item.DegreeLevelDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.DegreeLevelDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.DegreeLevel.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeLevel.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class DegreeTypeDA : DataAccess
    {
        #region Constructors
        public DegreeTypeDA(DegreeTypeBO inDegreeTypeBO)
        {
            curDegreeTypeBO = inDegreeTypeBO;
        }
        #endregion


        #region Variables

        private DegreeTypeBO curDegreeTypeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curDegreeTypeBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeName", curDegreeTypeBO.DegreeTypeName);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeDescription", curDegreeTypeBO.DegreeTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curDegreeTypeBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDegreeTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDegreeTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDegreeTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curDegreeTypeBO.DegreeTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curDegreeTypeBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeName", curDegreeTypeBO.DegreeTypeName);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeDescription", curDegreeTypeBO.DegreeTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curDegreeTypeBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDegreeTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDegreeTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDegreeTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static DegreeTypeBO Find(int degreeTypeID)
        {
            string commandString = "";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (degreeType.degreeTypeID = {0}) ", degreeTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            DegreeTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new DegreeTypeBO();
                    ans.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DegreeType.DegreeTypeID]);
                    ans.DegreeTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.DegreeTypeName]);
                    ans.DegreeTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.DegreeTypeDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool?>(reader[DatabaseSchema.DegreeType.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<DegreeTypeBO> List()
        {
            string commandString = " SELECT * FROM degreeType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DegreeTypeBO> ans = new List<DegreeTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DegreeTypeBO item = new DegreeTypeBO();
                    item.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DegreeType.DegreeTypeID]);
                    item.DegreeTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.DegreeTypeName]);
                    item.DegreeTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.DegreeTypeDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool?>(reader[DatabaseSchema.DegreeType.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DegreeType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class HowtoFindDA : DataAccess
    {
        #region Constructors
        public HowtoFindDA(HowtoFindBO inHowtoFindBO)
        {
            curHowtoFindBO = inHowtoFindBO;
        }
        #endregion


        #region Variables

        private HowtoFindBO curHowtoFindBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curHowtoFindBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindName", curHowtoFindBO.HowtoFindName);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindDescription", curHowtoFindBO.HowtoFindDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curHowtoFindBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curHowtoFindBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curHowtoFindBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curHowtoFindBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curHowtoFindBO.HowtoFindID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString = "";
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curHowtoFindBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindName", curHowtoFindBO.HowtoFindName);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindDescription", curHowtoFindBO.HowtoFindDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curHowtoFindBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curHowtoFindBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curHowtoFindBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curHowtoFindBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static HowtoFindBO Find(int howtoFindID)
        {
            string commandString = "";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (howtoFind.howtoFindID = {0}) ", howtoFindID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            HowtoFindBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new HowtoFindBO();
                    ans.HowtoFindID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.HowtoFind.HowtoFindID]);
                    ans.HowtoFindName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.HowtoFindName]);
                    ans.HowtoFindDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.HowtoFindDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.HowtoFind.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<HowtoFindBO> List()
        {
            string commandString = " SELECT * FROM howtoFind ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<HowtoFindBO> ans = new List<HowtoFindBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    HowtoFindBO item = new HowtoFindBO();
                    item.HowtoFindID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.HowtoFind.HowtoFindID]);
                    item.HowtoFindName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.HowtoFindName]);
                    item.HowtoFindDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.HowtoFindDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.HowtoFind.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.HowtoFind.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class EmployeeDA : DataAccess
    {
        #region Constructors
        public EmployeeDA(EmployeeBO inEmployeeBO)
        {
            curEmployeeBO = inEmployeeBO;
        }
        #endregion


        #region Variables

        private EmployeeBO curEmployeeBO = null;
        internal static List<EmployeeBO> allEmployee = new List<EmployeeBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO employee (" +
            " 	employeeID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	fatherName, " +
            " 	gender, " +
            " 	certificationNumber, " +
            " 	nationalNumber, " +
            " 	birthDate, " +
            " 	bornPlace, " +
            " 	bornProvince, " +
            " 	bornCountry, " +
            " 	issuePlace, " +
            " 	martialStatus, " +
            " 	homeAddress, " +
            " 	homeTell, " +
            " 	cellPhone, " +
            " 	degreeTypeID, " +
            " 	degreeLevelID, " +
            " 	studyMajor, " +
            " 	studyStatus, " +
            " 	job, " +
            " 	howtoFindID, " +
            " 	school, " +
            " 	activityStatus, " +
            " 	guarantorID, " +
            " 	image, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@employeeID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@fatherName, " +
            " 	@gender, " +
            " 	@certificationNumber, " +
            " 	@nationalNumber, " +
            " 	@birthDate, " +
            " 	@bornPlace, " +
            " 	@bornProvince, " +
            " 	@bornCountry, " +
            " 	@issuePlace, " +
            " 	@martialStatus, " +
            " 	@homeAddress, " +
            " 	@homeTell, " +
            " 	@cellPhone, " +
            " 	@degreeTypeID, " +
            " 	@degreeLevelID, " +
            " 	@studyMajor, " +
            " 	@studyStatus, " +
            " 	@job, " +
            " 	@howtoFindID, " +
            " 	@school, " +
            " 	@activityStatus, " +
            " 	@guarantorID, " +
            " 	@image, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curEmployeeBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curEmployeeBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curEmployeeBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curEmployeeBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curEmployeeBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curEmployeeBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curEmployeeBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curEmployeeBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curEmployeeBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curEmployeeBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curEmployeeBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curEmployeeBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curEmployeeBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curEmployeeBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curEmployeeBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curEmployeeBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curEmployeeBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curEmployeeBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curEmployeeBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curEmployeeBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curEmployeeBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curEmployeeBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@school", curEmployeeBO.School);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curEmployeeBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@guarantorID", curEmployeeBO.GuarantorID);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curEmployeeBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curEmployeeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curEmployeeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curEmployeeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM employee " +
            " WHERE (1=1) " +
            " AND 	employeeID = @employeeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curEmployeeBO.EmployeeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE employee SET " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	fatherName = @fatherName, " +
            " 	gender = @gender, " +
            " 	certificationNumber = @certificationNumber, " +
            " 	nationalNumber = @nationalNumber, " +
            " 	birthDate = @birthDate, " +
            " 	bornPlace = @bornPlace, " +
            " 	bornProvince = @bornProvince, " +
            " 	bornCountry = @bornCountry, " +
            " 	issuePlace = @issuePlace, " +
            " 	martialStatus = @martialStatus, " +
            " 	homeAddress = @homeAddress, " +
            " 	homeTell = @homeTell, " +
            " 	cellPhone = @cellPhone, " +
            " 	degreeTypeID = @degreeTypeID, " +
            " 	degreeLevelID = @degreeLevelID, " +
            " 	studyMajor = @studyMajor, " +
            " 	studyStatus = @studyStatus, " +
            " 	job = @job, " +
            " 	howtoFindID = @howtoFindID, " +
            " 	school = @school, " +
            " 	activityStatus = @activityStatus, " +
            " 	guarantorID = @guarantorID, " +
            " 	image = @image, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	(employeeID = @employeeID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curEmployeeBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curEmployeeBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curEmployeeBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curEmployeeBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curEmployeeBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curEmployeeBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curEmployeeBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curEmployeeBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curEmployeeBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curEmployeeBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curEmployeeBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curEmployeeBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curEmployeeBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curEmployeeBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curEmployeeBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curEmployeeBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curEmployeeBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curEmployeeBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curEmployeeBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curEmployeeBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curEmployeeBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@howtoFindID", curEmployeeBO.HowtoFindID);
            UtilityDB.AddParameter(command.Parameters, "@school", curEmployeeBO.School);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curEmployeeBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@guarantorID", curEmployeeBO.GuarantorID);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curEmployeeBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curEmployeeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curEmployeeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curEmployeeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static EmployeeBO Find(string employeeID)
        {
            if (employeeID == null) return null;
            string commandString = "  SELECT * FROM employee ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (employee.employeeID = '{0}') ", employeeID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            EmployeeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new EmployeeBO();
                    ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.EmployeeID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastName]);
                    ans.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FatherName]);
                    ans.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.Gender]);
                    ans.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CertificationNumber]);
                    ans.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.NationalNumber]);
                    ans.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BirthDate]);
                    ans.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornPlace]);
                    ans.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornProvince]);
                    ans.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornCountry]);
                    ans.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.IssuePlace]);
                    ans.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.MartialStatus]);
                    ans.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeAddress]);
                    ans.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeTell]);
                    ans.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CellPhone]);
                    ans.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeTypeID]);
                    ans.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeLevelID]);
                    ans.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.StudyMajor]);
                    ans.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.StudyStatus]);
                    ans.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.Job]);
                    ans.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.HowtoFindID]);
                    ans.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.School]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.ActivityStatus]);
                    ans.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.GuarantorID]);
                    ans.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Employee.Image]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<EmployeeBO> List()
        {
            string commandString = " SELECT * FROM employee ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            //List<EmployeeBO> ans = new List<EmployeeBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    EmployeeBO item = new EmployeeBO();
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.EmployeeID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.Job]);
                    item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.HowtoFindID]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.School]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.ActivityStatus]);
                    item.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.GuarantorID]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Employee.Image]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeTime]);

                    //ans.Add(item);//hanieh
                    allEmployee.Add(item); //hanieh
                }
            }
            return allEmployee;//ans; //hanieh
        }
        public static List<EmployeeBO> List(int? degreeTypeID, int? degreeLevelID)
        {
            string commandString = " SELECT * FROM employee ";
            string wherePart = " WHERE (1=1) ";
            if (degreeTypeID != null)
            {
                wherePart += string.Format(" AND (employee.degreeTypeID = {0}) ", degreeTypeID.ToString());
            }

            if (degreeLevelID != null)
            {
                wherePart += string.Format(" AND (employee.degreeLevelID = {0}) ", degreeLevelID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<EmployeeBO> ans = new List<EmployeeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    EmployeeBO item = new EmployeeBO();
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.EmployeeID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.Job]);
                    item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.HowtoFindID]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.School]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.ActivityStatus]);
                    item.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.GuarantorID]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Employee.Image]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<EmployeeBO> List(int? howtoFindID)
        {
            string commandString = " SELECT * FROM employee ";
            string wherePart = " WHERE (1=1) ";
            if (howtoFindID != null)
            {
                wherePart += string.Format(" AND (employee.howtoFindID = {0}) ", howtoFindID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<EmployeeBO> ans = new List<EmployeeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    EmployeeBO item = new EmployeeBO();
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.EmployeeID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.HomeTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.Job]);
                    item.HowtoFindID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Employee.HowtoFindID]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.School]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Employee.ActivityStatus]);
                    item.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.GuarantorID]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Employee.Image]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT employeeID FROM employee ";
            string wherePart = string.Format(" WHERE (1=1) and employeeID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Employee.EmployeeID]);

                    ans.Add(item);

                }
            }
            return ans;
        }
        #endregion
    }

    public partial class GuarantorDA : DataAccess
    {
        #region Constructors
        public GuarantorDA(GuarantorBO inGuarantorBO)
        {
            curGuarantorBO = inGuarantorBO;
        }
        #endregion


        #region Variables

        private GuarantorBO curGuarantorBO = null;
        internal static List<GuarantorBO> allguarantor = new List<GuarantorBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO guarantor (" +
            " 	guarantorID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	fatherName, " +
            " 	gender, " +
            " 	certificationNumber, " +
            " 	nationalNumber, " +
            " 	birthDate, " +
            " 	bornPlace, " +
            " 	issuePlace, " +
            " 	martialStatus, " +
            " 	homeAddress, " +
            " 	homeTell, " +
            " 	workAddress, " +
            " 	workTell, " +
            " 	cellPhone, " +
            " 	job, " +
            " 	degreeLevelID, " +
            " 	studyMajor, " +
            " 	guarantee, " +
            " 	Image, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime )" +
            " VALUES (" +
            " 	@guarantorID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@fatherName, " +
            " 	@gender, " +
            " 	@certificationNumber, " +
            " 	@nationalNumber, " +
            " 	@birthDate, " +
            " 	@bornPlace, " +
            " 	@issuePlace, " +
            " 	@martialStatus, " +
            " 	@homeAddress, " +
            " 	@homeTell, " +
            " 	@workAddress, " +
            " 	@workTell, " +
            " 	@cellPhone, " +
            " 	@job, " +
            " 	@degreeLevelID, " +
            " 	@studyMajor, " +
            " 	@guarantee, " +
            " 	@Image, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@guarantorID", curGuarantorBO.GuarantorID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curGuarantorBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curGuarantorBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curGuarantorBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curGuarantorBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curGuarantorBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curGuarantorBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curGuarantorBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curGuarantorBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curGuarantorBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curGuarantorBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curGuarantorBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curGuarantorBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@workAddress", curGuarantorBO.WorkAddress);
            UtilityDB.AddParameter(command.Parameters, "@workTell", curGuarantorBO.WorkTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curGuarantorBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@job", curGuarantorBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curGuarantorBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curGuarantorBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@guarantee", curGuarantorBO.Guarantee);
            UtilityDB.AddPictureToParameters(command.Parameters, "@Image", curGuarantorBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curGuarantorBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curGuarantorBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curGuarantorBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM guarantor " +
            " WHERE (1=1) " +
            " AND 	guarantorID = @guarantorID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@guarantorID", curGuarantorBO.GuarantorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE guarantor SET " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	fatherName = @fatherName, " +
            " 	gender = @gender, " +
            " 	certificationNumber = @certificationNumber, " +
            " 	nationalNumber = @nationalNumber, " +
            " 	birthDate = @birthDate, " +
            " 	bornPlace = @bornPlace, " +
            " 	issuePlace = @issuePlace, " +
            " 	martialStatus = @martialStatus, " +
            " 	homeAddress = @homeAddress, " +
            " 	homeTell = @homeTell, " +
            " 	workAddress = @workAddress, " +
            " 	workTell = @workTell, " +
            " 	cellPhone = @cellPhone, " +
            " 	job = @job, " +
            " 	degreeLevelID = @degreeLevelID, " +
            " 	studyMajor = @studyMajor, " +
            " 	guarantee = @guarantee, " +
            " 	Image = @Image, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	guarantorID = @guarantorID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@guarantorID", curGuarantorBO.GuarantorID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curGuarantorBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curGuarantorBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curGuarantorBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curGuarantorBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curGuarantorBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curGuarantorBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curGuarantorBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curGuarantorBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curGuarantorBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curGuarantorBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curGuarantorBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curGuarantorBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@workAddress", curGuarantorBO.WorkAddress);
            UtilityDB.AddParameter(command.Parameters, "@workTell", curGuarantorBO.WorkTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curGuarantorBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@job", curGuarantorBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curGuarantorBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curGuarantorBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@guarantee", curGuarantorBO.Guarantee);
            UtilityDB.AddPictureToParameters(command.Parameters, "@Image", curGuarantorBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curGuarantorBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curGuarantorBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curGuarantorBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static GuarantorBO Find(string guarantorID)
        {
            if (guarantorID == null) return null;
            string commandString = "  SELECT * FROM guarantor ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (guarantor.guarantorID = '{0}') ", guarantorID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            GuarantorBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new GuarantorBO();
                    ans.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.GuarantorID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastName]);
                    ans.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FatherName]);
                    ans.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.Gender]);
                    ans.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CertificationNumber]);
                    ans.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.NationalNumber]);
                    ans.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BirthDate]);
                    ans.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BornPlace]);
                    ans.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.IssuePlace]);
                    ans.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.MartialStatus]);
                    ans.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeAddress]);
                    ans.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeTell]);
                    ans.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkAddress]);
                    ans.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkTell]);
                    ans.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CellPhone]);
                    ans.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Job]);
                    ans.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Guarantor.DegreeLevelID]);
                    ans.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.StudyMajor]);
                    ans.Guarantee = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Guarantee]);
                    ans.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Guarantor.Image]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<GuarantorBO> List()
        {
            string commandString = " SELECT * FROM guarantor ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            //List<GuarantorBO> ans = new List<GuarantorBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    GuarantorBO item = new GuarantorBO();
                    item.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.GuarantorID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BornPlace]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CellPhone]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Job]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Guarantor.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.StudyMajor]);
                    item.Guarantee = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Guarantee]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Guarantor.Image]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeTime]);

                    //hanieh
                    //ans.Add(item); 
                    allguarantor.Add(item);
                    //
                }
            }
            return allguarantor; //ans; //hanieh
        }
        public static List<GuarantorBO> List(int? degreeLevelID)
        {
            string commandString = " SELECT * FROM guarantor ";
            string wherePart = " WHERE (1=1) ";
            if (degreeLevelID != null)
            {
                wherePart += string.Format(" AND (guarantor.degreeLevelID = {0}) ", degreeLevelID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<GuarantorBO> ans = new List<GuarantorBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    GuarantorBO item = new GuarantorBO();
                    item.GuarantorID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.GuarantorID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.BornPlace]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Guarantor.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.CellPhone]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Job]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Guarantor.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.StudyMajor]);
                    item.Guarantee = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.Guarantee]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Guarantor.Image]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT guarantorID FROM guarantor ";
            string wherePart = string.Format(" WHERE (1=1) and guarantorID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Guarantor.GuarantorID]);

                    ans.Add(item);

                }
            }
            return ans;
        }
    }

    public partial class ContractTypeDA : DataAccess
    {
        #region Constructors
        public ContractTypeDA(ContractTypeBO inContractTypeBO)
        {
            curContractTypeBO = inContractTypeBO;
        }
        #endregion


        #region Variables

        private ContractTypeBO curContractTypeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO contractType (" +
            " 	contractTypeID, " +
            " 	contractTypeName, " +
            " 	contractTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@contractTypeID, " +
            " 	@contractTypeName, " +
            " 	@contractTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curContractTypeBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeName", curContractTypeBO.ContractTypeName);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeDescription", curContractTypeBO.ContractTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curContractTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curContractTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curContractTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM contractType " +
            " WHERE (1=1) " +
            " AND 	contractTypeID = @contractTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curContractTypeBO.ContractTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE contractType SET " +
            " 	contractTypeName = @contractTypeName, " +
            " 	contractTypeDescription = @contractTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	contractTypeID = @contractTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curContractTypeBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeName", curContractTypeBO.ContractTypeName);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeDescription", curContractTypeBO.ContractTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curContractTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curContractTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curContractTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ContractTypeBO Find(int contractTypeID)
        {
            string commandString = "  SELECT * FROM contractType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (contractType.contractTypeID = {0}) ", contractTypeID.ToString());


            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ContractTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ContractTypeBO();
                    ans.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ContractType.ContractTypeID]);
                    ans.ContractTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.ContractTypeName]);
                    ans.ContractTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.ContractTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<ContractTypeBO> List()
        {
            string commandString = " SELECT * FROM contractType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ContractTypeBO> ans = new List<ContractTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ContractTypeBO item = new ContractTypeBO();
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ContractType.ContractTypeID]);
                    item.ContractTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.ContractTypeName]);
                    item.ContractTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.ContractTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ContractType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class TeacherDA : DataAccess
    {
        #region Constructors
        public TeacherDA(TeacherBO inTeacherBO)
        {
            curTeacherBO = inTeacherBO;
        }
        #endregion


        #region Variables

        private TeacherBO curTeacherBO = null;
        internal static List<TeacherBO> allteachers = new List<TeacherBO>(); //hanieh
        internal static List<TeacherBO> allActiveTeachers = new List<TeacherBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO teacher (" +
            " 	teacherID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	fatherName, " +
            " 	gender, " +
            " 	certificationNumber, " +
            " 	nationalNumber, " +
            " 	birthDate, " +
            " 	bornPlace, " +
            " 	bornProvince, " +
            " 	bornCountry, " +
            " 	issuePlace, " +
            " 	martialStatus, " +
            " 	homeAddress, " +
            " 	homeTell, " +
            " 	workAddress, " +
            " 	workTell, " +
            " 	cellPhone, " +
            " 	degreeTypeID, " +
            " 	degreeLevelID, " +
            " 	studyMajor, " +
            " 	studyStatus, " +
            " 	job, " +
            " 	introducer, " +
            " 	qulificationCardID, " +
            " 	teachers, " +
            " 	teachingExprience, " +
            " 	school, " +
            " 	contractTypeID, " +
            " 	contractValue, " +
            " 	image, " +
            " 	username, " +
            " 	password, " +
            " 	activityStatus, " +
            " 	canShowOnWeb, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@fatherName, " +
            " 	@gender, " +
            " 	@certificationNumber, " +
            " 	@nationalNumber, " +
            " 	@birthDate, " +
            " 	@bornPlace, " +
            " 	@bornProvince, " +
            " 	@bornCountry, " +
            " 	@issuePlace, " +
            " 	@martialStatus, " +
            " 	@homeAddress, " +
            " 	@homeTell, " +
            " 	@workAddress, " +
            " 	@workTell, " +
            " 	@cellPhone, " +
            " 	@degreeTypeID, " +
            " 	@degreeLevelID, " +
            " 	@studyMajor, " +
            " 	@studyStatus, " +
            " 	@job, " +
            " 	@introducer, " +
            " 	@qulificationCardID, " +
            " 	@teachers, " +
            " 	@teachingExprience, " +
            " 	@school, " +
            " 	@contractTypeID, " +
            " 	@contractValue, " +
            " 	@image, " +
            " 	@username, " +
            " 	@password, " +
            " 	@activityStatus, " +
            "   @canShowOnWeb, "  +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curTeacherBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curTeacherBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curTeacherBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curTeacherBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curTeacherBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curTeacherBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curTeacherBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curTeacherBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curTeacherBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curTeacherBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curTeacherBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curTeacherBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curTeacherBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curTeacherBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@workAddress", curTeacherBO.WorkAddress);
            UtilityDB.AddParameter(command.Parameters, "@workTell", curTeacherBO.WorkTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curTeacherBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curTeacherBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curTeacherBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curTeacherBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curTeacherBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curTeacherBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@introducer", curTeacherBO.Introducer);
            UtilityDB.AddParameter(command.Parameters, "@qulificationCardID", curTeacherBO.QulificationCardID);
            UtilityDB.AddParameter(command.Parameters, "@teachers", curTeacherBO.Teachers);
            UtilityDB.AddParameter(command.Parameters, "@teachingExprience", curTeacherBO.TeachingExprience);
            UtilityDB.AddParameter(command.Parameters, "@school", curTeacherBO.School);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curTeacherBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@contractValue", curTeacherBO.ContractValue);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curTeacherBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@username", curTeacherBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curTeacherBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curTeacherBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@canShowOnWeb", curTeacherBO.CanShowOnWeb);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM teacher " +
            " WHERE (1=1) " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE teacher SET " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	fatherName = @fatherName, " +
            " 	gender = @gender, " +
            " 	certificationNumber = @certificationNumber, " +
            " 	nationalNumber = @nationalNumber, " +
            " 	birthDate = @birthDate, " +
            " 	bornPlace = @bornPlace, " +
            " 	bornProvince = @bornProvince, " +
            " 	bornCountry = @bornCountry, " +
            " 	issuePlace = @issuePlace, " +
            " 	martialStatus = @martialStatus, " +
            " 	homeAddress = @homeAddress, " +
            " 	homeTell = @homeTell, " +
            " 	workAddress = @workAddress, " +
            " 	workTell = @workTell, " +
            " 	cellPhone = @cellPhone, " +
            " 	degreeTypeID = @degreeTypeID, " +
            " 	degreeLevelID = @degreeLevelID, " +
            " 	studyMajor = @studyMajor, " +
            " 	studyStatus = @studyStatus, " +
            " 	job = @job, " +
            " 	introducer = @introducer, " +
            " 	qulificationCardID = @qulificationCardID, " +
            " 	teachers = @teachers, " +
            " 	teachingExprience = @teachingExprience, " +
            " 	school = @school, " +
            " 	contractTypeID = @contractTypeID, " +
            " 	contractValue = @contractValue, " +
            " 	image = @image, " +
            " 	username = @username, " +
            " 	password = @password, " +
            " 	activityStatus = @activityStatus, " +
            "   canShowOnWeb = @canShowOnWeb, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curTeacherBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curTeacherBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@fatherName", curTeacherBO.FatherName);
            UtilityDB.AddParameter(command.Parameters, "@gender", curTeacherBO.Gender);
            UtilityDB.AddParameter(command.Parameters, "@certificationNumber", curTeacherBO.CertificationNumber);
            UtilityDB.AddParameter(command.Parameters, "@nationalNumber", curTeacherBO.NationalNumber);
            UtilityDB.AddParameter(command.Parameters, "@birthDate", curTeacherBO.BirthDate);
            UtilityDB.AddParameter(command.Parameters, "@bornPlace", curTeacherBO.BornPlace);
            UtilityDB.AddParameter(command.Parameters, "@bornProvince", curTeacherBO.BornProvince);
            UtilityDB.AddParameter(command.Parameters, "@bornCountry", curTeacherBO.BornCountry);
            UtilityDB.AddParameter(command.Parameters, "@issuePlace", curTeacherBO.IssuePlace);
            UtilityDB.AddParameter(command.Parameters, "@martialStatus", curTeacherBO.MartialStatus);
            UtilityDB.AddParameter(command.Parameters, "@homeAddress", curTeacherBO.HomeAddress);
            UtilityDB.AddParameter(command.Parameters, "@homeTell", curTeacherBO.HomeTell);
            UtilityDB.AddParameter(command.Parameters, "@workAddress", curTeacherBO.WorkAddress);
            UtilityDB.AddParameter(command.Parameters, "@workTell", curTeacherBO.WorkTell);
            UtilityDB.AddParameter(command.Parameters, "@cellPhone", curTeacherBO.CellPhone);
            UtilityDB.AddParameter(command.Parameters, "@degreeTypeID", curTeacherBO.DegreeTypeID);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curTeacherBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@studyMajor", curTeacherBO.StudyMajor);
            UtilityDB.AddParameter(command.Parameters, "@studyStatus", curTeacherBO.StudyStatus);
            UtilityDB.AddParameter(command.Parameters, "@job", curTeacherBO.Job);
            UtilityDB.AddParameter(command.Parameters, "@introducer", curTeacherBO.Introducer);
            UtilityDB.AddParameter(command.Parameters, "@qulificationCardID", curTeacherBO.QulificationCardID);
            UtilityDB.AddParameter(command.Parameters, "@teachers", curTeacherBO.Teachers);
            UtilityDB.AddParameter(command.Parameters, "@teachingExprience", curTeacherBO.TeachingExprience);
            UtilityDB.AddParameter(command.Parameters, "@school", curTeacherBO.School);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curTeacherBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@contractValue", curTeacherBO.ContractValue);
            UtilityDB.AddPictureToParameters(command.Parameters, "@image", curTeacherBO.Image);
            UtilityDB.AddParameter(command.Parameters, "@username", curTeacherBO.Username);
            UtilityDB.AddParameter(command.Parameters, "@password", curTeacherBO.Password);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curTeacherBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@canShowOnWeb", curTeacherBO.CanShowOnWeb);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static TeacherBO Find(string teacherID)
        {
            if (teacherID == null) return null;
            string commandString = "  SELECT * FROM teacher ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (teacher.teacherID = '{0}') ", teacherID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            TeacherBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new TeacherBO();
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastName]);
                    ans.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FatherName]);
                    ans.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.Gender]);
                    ans.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CertificationNumber]);
                    ans.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.NationalNumber]);
                    ans.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BirthDate]);
                    ans.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornPlace]);
                    ans.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornProvince]);
                    ans.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornCountry]);
                    ans.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.IssuePlace]);
                    ans.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.MartialStatus]);
                    ans.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeAddress]);
                    ans.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeTell]);
                    ans.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkAddress]);
                    ans.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkTell]);
                    ans.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CellPhone]);
                    ans.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeTypeID]);
                    ans.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeLevelID]);
                    ans.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.StudyMajor]);
                    ans.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.StudyStatus]);
                    ans.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Job]);
                    ans.Introducer = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Introducer]);
                    ans.QulificationCardID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.QulificationCardID]);
                    ans.Teachers = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Teachers]);
                    ans.TeachingExprience = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeachingExprience]);
                    ans.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.School]);
                    ans.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractTypeID]);
                    ans.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractValue]);
                    ans.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Teacher.Image]);
                    ans.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Username]);
                    ans.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Password]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.ActivityStatus]);
                    ans.CanShowOnWeb = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.CanShowOnWeb]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<TeacherBO> List()
        {
            string commandString = " SELECT * FROM teacher ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
           // List<TeacherBO> ans = new List<TeacherBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherBO item = new TeacherBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Job]);
                    item.Introducer = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Introducer]);
                    item.QulificationCardID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.QulificationCardID]);
                    item.Teachers = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Teachers]);
                    item.TeachingExprience = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeachingExprience]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.School]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractValue]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Teacher.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Password]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.ActivityStatus]);
                    item.CanShowOnWeb = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.CanShowOnWeb]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeTime]);

                    //ans.Add(item); //hanieh
                    allteachers.Add(item); //hanieh
                }
            }
            return allteachers; //ans; //hanieh
        }
        public static List<TeacherBO> List(int? degreeTypeID, int? degreeLevelID, int? contractTypeID)
        {
            string commandString = " SELECT * FROM teacher ";
            string wherePart = " WHERE (1=1) ";
            if (degreeTypeID != null)
            {
                wherePart += string.Format(" AND (teacher.degreeTypeID = {0}) ", degreeTypeID.ToString());
            }

            if (degreeLevelID != null)
            {
                wherePart += string.Format(" AND (teacher.degreeLevelID = {0}) ", degreeLevelID.ToString());
            }

            if (contractTypeID != null)
            {
                wherePart += string.Format(" AND (teacher.contractTypeID = {0}) ", contractTypeID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherBO> ans = new List<TeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherBO item = new TeacherBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Job]);
                    item.Introducer = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Introducer]);
                    item.QulificationCardID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.QulificationCardID]);
                    item.Teachers = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Teachers]);
                    item.TeachingExprience = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeachingExprience]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.School]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractValue]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Teacher.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Password]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.ActivityStatus]);
                    item.CanShowOnWeb = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.CanShowOnWeb]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<TeacherBO> ListDeactivateCandidates(string teacherID)
        {
            string commandString = " SELECT teacher.* FROM teacher INNER JOIN viwDeactiveCandidatesTeacher ON teacher.teacherID = viwdeactivecandidatesteacher.teacherid ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (teacher.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherBO> ans = new List<TeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherBO item = new TeacherBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Job]);
                    item.Introducer = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Introducer]);
                    item.QulificationCardID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.QulificationCardID]);
                    item.Teachers = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Teachers]);
                    item.TeachingExprience = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeachingExprience]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.School]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractValue]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Teacher.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Password]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.ActivityStatus]);
                    item.CanShowOnWeb = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.CanShowOnWeb]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<TeacherBO> List(int? majorID, bool? activityStatus)
        {
            string commandString = " SELECT teacher.* FROM teacher ";
                //" LEFT OUTER JOIN majorTeacher on teacher.teacherID=majorTeacher.teacherID "; 
            string wherePart = " WHERE (1=1) ";
            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (teacher.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND ( teacherID in ( SELECT teacherID from majorTeacher WHERE majorTeacher.majorID = {0} )) ", majorID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherBO> ans = new List<TeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherBO item = new TeacherBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastName]);
                    item.FatherName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.FatherName]);
                    item.Gender = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.Gender]);
                    item.CertificationNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CertificationNumber]);
                    item.NationalNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.NationalNumber]);
                    item.BirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BirthDate]);
                    item.BornPlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornPlace]);
                    item.BornProvince = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornProvince]);
                    item.BornCountry = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.BornCountry]);
                    item.IssuePlace = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.IssuePlace]);
                    item.MartialStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.MartialStatus]);
                    item.HomeAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeAddress]);
                    item.HomeTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.HomeTell]);
                    item.WorkAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkAddress]);
                    item.WorkTell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.WorkTell]);
                    item.CellPhone = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.CellPhone]);
                    item.DegreeTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeTypeID]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.DegreeLevelID]);
                    item.StudyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.StudyMajor]);
                    item.StudyStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.StudyStatus]);
                    item.Job = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Job]);
                    item.Introducer = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Introducer]);
                    item.QulificationCardID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.QulificationCardID]);
                    item.Teachers = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Teachers]);
                    item.TeachingExprience = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeachingExprience]);
                    item.School = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.School]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Teacher.ContractValue]);
                    item.Image = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.Teacher.Image]);
                    item.Username = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Username]);
                    item.Password = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.Password]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.ActivityStatus]);
                    item.CanShowOnWeb = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Teacher.CanShowOnWeb]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT teacherID FROM teacher ";
            string wherePart = string.Format(" WHERE (1=1) and teacherID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Teacher.TeacherID]);

                    ans.Add(item);

                }
            }
            return ans;
        }
    }

    public partial class MajorDA : DataAccess
    {
        #region Constructors
        public MajorDA(MajorBO inMajorBO)
        {
            curMajorBO = inMajorBO;
        }
        #endregion


        #region Variables

        private MajorBO curMajorBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO major (" +
            " 	majorID, " +
            " 	majorName, " +
            " 	majorDescription, " +
            " 	activityStatus, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@majorID, " +
            " 	@majorName, " +
            " 	@majorDescription, " +
            " 	@activityStatus, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curMajorBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@majorDescription", curMajorBO.MajorDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curMajorBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curMajorBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curMajorBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curMajorBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM major " +
            " WHERE (1=1) " +
            " AND 	majorID = @majorID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorBO.MajorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE major SET " +
            " 	majorName = @majorName, " +
            " 	majorDescription = @majorDescription, " +
            " 	activityStatus = @activityStatus, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	majorID = @majorID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curMajorBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@majorDescription", curMajorBO.MajorDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curMajorBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curMajorBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curMajorBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curMajorBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static MajorBO Find(int majorID)
        {
            string commandString = "  SELECT * FROM major ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (major.majorID = {0}) ", majorID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            MajorBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new MajorBO();
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Major.MajorID]);
                    ans.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorName]);
                    ans.MajorDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Major.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<MajorBO> List()
        {
            string commandString = " SELECT * FROM major ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<MajorBO> ans = new List<MajorBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    MajorBO item = new MajorBO();
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Major.MajorID]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorName]);
                    item.MajorDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Major.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<MajorBO> List(bool? activityStatus)
        {
            string commandString = " SELECT * FROM major ";
            string wherePart = " WHERE (1=1) ";
            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (major.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<MajorBO> ans = new List<MajorBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    MajorBO item = new MajorBO();
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Major.MajorID]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorName]);
                    item.MajorDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.MajorDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Major.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Major.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class MajorTeacherDA : DataAccess
    {
        #region Constructors
        public MajorTeacherDA(MajorTeacherBO inMajorTeacherBO)
        {
            curMajorTeacherBO = inMajorTeacherBO;
            LastChangeFiller.SetChangesInfo(curMajorTeacherBO);
        }
        #endregion


        #region Variables

        private MajorTeacherBO curMajorTeacherBO = null;
        internal static List<MajorTeacherBO> allMajorTeachers = new List<MajorTeacherBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO majorTeacher (" +
            " 	majorID, " +
            " 	teacherID, " +
            " 	specialMajorFlag, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@majorID, " +
            " 	@teacherID, " +
            " 	@specialMajorFlag, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorTeacherBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curMajorTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@specialMajorFlag", curMajorTeacherBO.SpecialMajorFlag);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curMajorTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curMajorTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curMajorTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM majorTeacher " +
            " WHERE (1=1) " +
            " AND 	majorID = @majorID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorTeacherBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curMajorTeacherBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE majorTeacher SET " +
            " 	specialMajorFlag = @specialMajorFlag, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	majorID = @majorID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@majorID", curMajorTeacherBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curMajorTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@specialMajorFlag", curMajorTeacherBO.SpecialMajorFlag);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curMajorTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curMajorTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curMajorTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static MajorTeacherBO Find(int majorID, string teacherID)
        {
            string commandString = "  SELECT * FROM majorTeacher ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (majorTeacher.majorID = {0}) ", majorID.ToString());

            wherePart += string.Format(" AND (majorTeacher.teacherID = '{0}') ", teacherID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            MajorTeacherBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new MajorTeacherBO();
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.MajorTeacher.MajorID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.TeacherID]);
                    ans.SpecialMajorFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.MajorTeacher.SpecialMajorFlag]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeTime]);


                }
            }
            return ans;
        }

        public static List<MajorTeacherBO> List()
        {
            string commandString = " SELECT * FROM majorTeacher ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            //List<MajorTeacherBO> ans = new List<MajorTeacherBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    MajorTeacherBO item = new MajorTeacherBO();
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.MajorTeacher.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.TeacherID]);
                    item.SpecialMajorFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.MajorTeacher.SpecialMajorFlag]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeTime]);

                    Application.DoEvents();
                    //hanieh
                    //ans.Add(item);
                    allMajorTeachers.Add(item);
                    //
                }
            }
            return allMajorTeachers; //ans; //hanieh
        }
        public static List<MajorTeacherBO> List(bool? specialMajorFlag)
        {
            string commandString = " SELECT * FROM majorTeacher ";
            string wherePart = " WHERE (1=1) ";
            if (specialMajorFlag != null)
            {
                wherePart += string.Format(" AND (majorTeacher.specialMajorFlag = {0}) ", specialMajorFlag.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<MajorTeacherBO> ans = new List<MajorTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    MajorTeacherBO item = new MajorTeacherBO();
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.MajorTeacher.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.TeacherID]);
                    item.SpecialMajorFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.MajorTeacher.SpecialMajorFlag]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeTime]);


                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<MajorTeacherBO> List(int? majorID, string teacherID, bool? specialMajorFlag)
        {
            string commandString = " SELECT * FROM majorTeacher ";
            string wherePart = " WHERE (1=1) ";
            if (majorID != null)
            {
                wherePart += string.Format(" AND (majorTeacher.majorID = {0}) ", majorID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (majorTeacher.teacherID = '{0}') ", teacherID);
            }

            if (specialMajorFlag != null)
            {
                wherePart += string.Format(" AND (majorTeacher.specialMajorFlag = {0}) ", specialMajorFlag.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<MajorTeacherBO> ans = new List<MajorTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    MajorTeacherBO item = new MajorTeacherBO();
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.MajorTeacher.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.TeacherID]);
                    item.SpecialMajorFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.MajorTeacher.SpecialMajorFlag]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.MajorTeacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class DayDA : DataAccess
    {
        #region Constructors
        public DayDA(DayBO inDayBO)
        {
            curDayBO = inDayBO;
        }
        #endregion


        #region Variables

        private DayBO curDayBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO day (" +
            " 	dayID, " +
            " 	dayName) " +
            " VALUES (" +
            " 	@dayID, " +
            " 	@dayName) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@dayID", curDayBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@dayName", curDayBO.DayName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM day " +
            " WHERE (1=1) " +
            " AND 	dayID = @dayID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@dayID", curDayBO.DayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE day SET " +
            " 	dayName = @dayName " +
            " WHERE (1=1) " +
            " AND 	dayID = @dayID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@dayID", curDayBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@dayName", curDayBO.DayName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static DayBO Find(int dayID)
        {
            string commandString = "  SELECT * FROM day ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (day.dayID = {0}) ", dayID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            DayBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new DayBO();
                    ans.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Day.DayID]);
                    ans.DayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Day.DayName]);

                }
            }
            return ans;
        }

        public static List<DayBO> List()
        {
            string commandString = " SELECT * FROM day ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DayBO> ans = new List<DayBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DayBO item = new DayBO();
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Day.DayID]);
                    item.DayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Day.DayName]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class TimeDA : DataAccess
    {
        #region Constructors
        public TimeDA(TimeBO inTimeBO)
        {
            curTimeBO = inTimeBO;
            LastChangeFiller.SetChangesInfo(curTimeBO);
        }
        #endregion


        #region Variables

        private TimeBO curTimeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO time (" +
            " 	startHour, " +
            " 	startMin, " +
            " 	finishHour, " +
            " 	finishMin, " +
            " 	activitystatuse, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@startHour, " +
            " 	@startMin, " +
            " 	@finishHour, " +
            " 	@finishMin, " +
            " 	@activitystatuse, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@startHour", curTimeBO.StartHour);
            UtilityDB.AddParameter(command.Parameters, "@startMin", curTimeBO.StartMin);
            UtilityDB.AddParameter(command.Parameters, "@finishHour", curTimeBO.FinishHour);
            UtilityDB.AddParameter(command.Parameters, "@finishMin", curTimeBO.FinishMin);
            UtilityDB.AddParameter(command.Parameters, "@activitystatuse", curTimeBO.Activitystatuse);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTimeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTimeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTimeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM time " +
            " WHERE (1=1) " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@timeID", curTimeBO.TimeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE time SET " +
            " 	startHour = @startHour, " +
            " 	startMin = @startMin, " +
            " 	finishHour = @finishHour, " +
            " 	finishMin = @finishMin, " +
            " 	activitystatuse = @activitystatuse, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@timeID", curTimeBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@startHour", curTimeBO.StartHour);
            UtilityDB.AddParameter(command.Parameters, "@startMin", curTimeBO.StartMin);
            UtilityDB.AddParameter(command.Parameters, "@finishHour", curTimeBO.FinishHour);
            UtilityDB.AddParameter(command.Parameters, "@finishMin", curTimeBO.FinishMin);
            UtilityDB.AddParameter(command.Parameters, "@activitystatuse", curTimeBO.Activitystatuse);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTimeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTimeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTimeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static TimeBO Find(int timeID)
        {
            string commandString = "  SELECT * FROM time ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (time.timeID = {0}) ", timeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            TimeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new TimeBO();
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.TimeID]);
                    ans.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartHour]);
                    ans.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartMin]);
                    ans.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishHour]);
                    ans.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishMin]);
                    ans.Activitystatuse = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Time.Activitystatuse]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<TimeBO> List()
        {
            string commandString = " SELECT * FROM time ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TimeBO> ans = new List<TimeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TimeBO item = new TimeBO();
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.TimeID]);
                    item.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartHour]);
                    item.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartMin]);
                    item.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishHour]);
                    item.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishMin]);
                    item.Activitystatuse = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Time.Activitystatuse]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<TimeBO> List(bool? activitystatuse)
        {
            string commandString = " SELECT * FROM time ";
            string wherePart = " WHERE (1=1) ";
            if (activitystatuse != null)
            {
                wherePart += string.Format(" AND (time.activitystatuse = {0}) ", UtilityDB.GetDBString(activitystatuse));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TimeBO> ans = new List<TimeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TimeBO item = new TimeBO();
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.TimeID]);
                    item.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartHour]);
                    item.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartMin]);
                    item.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishHour]);
                    item.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishMin]);
                    item.Activitystatuse = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Time.Activitystatuse]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static TimeBO Find(int startHour, int startMin, int finishHour, int finishMin)
        {
            string commandString = " SELECT * FROM time ";
            string wherePart = " WHERE (1=1) ";

            wherePart += string.Format(" AND (time.startHour = {0}) ", startHour);

            wherePart += string.Format(" AND (time.startMin = {0}) ", startMin);

            wherePart += string.Format(" AND (time.finishHour = {0}) ", finishHour);

            wherePart += string.Format(" AND (time.finishMin = {0}) ", finishMin);


            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            TimeBO item = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    item = new TimeBO();
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.TimeID]);
                    item.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartHour]);
                    item.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.StartMin]);
                    item.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishHour]);
                    item.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Time.FinishMin]);
                    item.Activitystatuse = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Time.Activitystatuse]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Time.LastChangeTime]);

                    //ans.Add(item);
                }
            }
            return item;
        }
        #endregion
    }

    public partial class TeacherTimeDA : DataAccess
    {
        #region Constructors
        public TeacherTimeDA(TeacherTimeBO inTeacherTimeBO)
        {
            curTeacherTimeBO = inTeacherTimeBO;
            LastChangeFiller.SetChangesInfo(curTeacherTimeBO);
        }
        #endregion


        #region Variables

        private TeacherTimeBO curTeacherTimeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO teacherTime (" +
            " 	teacherID, " +
            " 	timeID, " +
            " 	dayID, " +
            " 	startDate, " +
            " 	finishDate, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@timeID, " +
            " 	@dayID, " +
            " 	@startDate, " +
            " 	@finishDate, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherTimeBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curTeacherTimeBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@dayID", curTeacherTimeBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@startDate", curTeacherTimeBO.StartDate);
            UtilityDB.AddParameter(command.Parameters, "@finishDate", curTeacherTimeBO.FinishDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTeacherTimeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTeacherTimeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTeacherTimeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM teacherTime " +
            " WHERE (1=1) " +
            " AND 	teacherID = @teacherID  " +
            " AND 	timeID = @timeID  " +
            " AND 	dayID = @dayID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherTimeBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curTeacherTimeBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@dayID", curTeacherTimeBO.DayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE teacherTime SET " +
            " 	startDate = @startDate, " +
            " 	finishDate = @finishDate, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	teacherID = @teacherID  " +
            " AND 	timeID = @timeID  " +
            " AND 	dayID = @dayID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curTeacherTimeBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curTeacherTimeBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@dayID", curTeacherTimeBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@startDate", curTeacherTimeBO.StartDate);
            UtilityDB.AddParameter(command.Parameters, "@finishDate", curTeacherTimeBO.FinishDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curTeacherTimeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curTeacherTimeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curTeacherTimeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static TeacherTimeBO Find(string teacherID, int timeID, int dayID)
        {
            if (teacherID == null) return null;
            string commandString = "  SELECT * FROM teacherTime ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (teacherTime.teacherID = '{0}') ", teacherID);
            wherePart += string.Format(" AND (teacherTime.timeID = {0}) ", timeID.ToString());

            wherePart += string.Format(" AND (teacherTime.dayID = {0}) ", dayID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            TeacherTimeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new TeacherTimeBO();
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.TeacherID]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.TimeID]);
                    ans.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.DayID]);
                    ans.StartDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.StartDate]);
                    ans.FinishDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.FinishDate]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<TeacherTimeBO> List()
        {
            string commandString = " SELECT * FROM teacherTime ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherTimeBO> ans = new List<TeacherTimeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherTimeBO item = new TeacherTimeBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.TeacherID]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.TimeID]);
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.DayID]);
                    item.StartDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.StartDate]);
                    item.FinishDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.FinishDate]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<TeacherTimeBO> List(int? dayID)
        {
            string commandString = " SELECT * FROM teacherTime ";
            string wherePart = " WHERE (1=1) ";
            if (dayID != null)
            {
                wherePart += string.Format(" AND (teacherTime.dayID = {0}) ", dayID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherTimeBO> ans = new List<TeacherTimeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherTimeBO item = new TeacherTimeBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.TeacherID]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.TimeID]);
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.DayID]);
                    item.StartDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.StartDate]);
                    item.FinishDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.FinishDate]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<TeacherTimeBO> List(string teacherID)
        {
            string commandString = " SELECT * FROM teacherTime ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (teacherTime.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<TeacherTimeBO> ans = new List<TeacherTimeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    TeacherTimeBO item = new TeacherTimeBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.TeacherID]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.TimeID]);
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.TeacherTime.DayID]);
                    item.StartDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.StartDate]);
                    item.FinishDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.FinishDate]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.TeacherTime.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }


    //public partial class ClassDAOld : DataAccess
    //{
    //    #region Constructors
    //    public ClassDA(ClassBO inClassBO)
    //    {
    //        curClassBO = inClassBO;
    //        LastChangeFiller.SetChangesInfo(curClassBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private ClassBO curClassBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO class (" +
    //        " 	classID, " +
    //        " 	className, " +
    //        " 	majorID, " +
    //        " 	teacherID, " +
    //        " 	price, " +
    //        " 	schoolPrice, " +
    //        " 	sessionCount, " +
    //        " 	classDescription, " +
    //        " 	groupFlag, " +
    //        " 	registrationExpireDate, " +
    //        " 	activityStatus, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime, " +
    //        " 	ContractTypeID, " +
    //        " 	ContractValue) " +
    //        " VALUES (" +
    //        " 	@classID, " +
    //        " 	@className, " +
    //        " 	@majorID, " +
    //        " 	@teacherID, " +
    //        " 	@price, " +
    //        " 	@schoolPrice, " +
    //        " 	@sessionCount, " +
    //        " 	@classDescription, " +
    //        " 	@groupFlag, " +
    //        " 	@registrationExpireDate, " +
    //        " 	@activityStatus, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime, " +
    //        " 	@ContractTypeID, " +
    //        " 	@ContractValue) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curClassBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@majorID", curClassBO.MajorID);
    //        UtilityDB.AddParameter(command.Parameters, "@teacherID", curClassBO.TeacherID);
    //        UtilityDB.AddParameter(command.Parameters, "@price", curClassBO.Price);
    //        UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curClassBO.SchoolPrice);
    //        UtilityDB.AddParameter(command.Parameters, "@sessionCount", curClassBO.SessionCount);
    //        UtilityDB.AddParameter(command.Parameters, "@classDescription", curClassBO.ClassDescription);
    //        UtilityDB.AddParameter(command.Parameters, "@groupFlag", curClassBO.GroupFlag);
    //        UtilityDB.AddParameter(command.Parameters, "@registrationExpireDate", curClassBO.RegistrationExpireDate);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curClassBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClassBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClassBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClassBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@ContractTypeID", curClassBO.ContractTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@ContractValue", curClassBO.ContractValue);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM class " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE class SET " +
    //        " 	className = @className, " +
    //        " 	majorID = @majorID, " +
    //        " 	teacherID = @teacherID, " +
    //        " 	price = @price, " +
    //        " 	schoolPrice = @schoolPrice, " +
    //        " 	sessionCount = @sessionCount, " +
    //        " 	classDescription = @classDescription, " +
    //        " 	groupFlag = @groupFlag, " +
    //        " 	registrationExpireDate = @registrationExpireDate, " +
    //        " 	activityStatus = @activityStatus, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime, " +
    //        " 	ContractTypeID = @ContractTypeID, " +
    //        " 	ContractValue = @ContractValue " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curClassBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@majorID", curClassBO.MajorID);
    //        UtilityDB.AddParameter(command.Parameters, "@teacherID", curClassBO.TeacherID);
    //        UtilityDB.AddParameter(command.Parameters, "@price", curClassBO.Price);
    //        UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curClassBO.SchoolPrice);
    //        UtilityDB.AddParameter(command.Parameters, "@sessionCount", curClassBO.SessionCount);
    //        UtilityDB.AddParameter(command.Parameters, "@classDescription", curClassBO.ClassDescription);
    //        UtilityDB.AddParameter(command.Parameters, "@groupFlag", curClassBO.GroupFlag);
    //        UtilityDB.AddParameter(command.Parameters, "@registrationExpireDate", curClassBO.RegistrationExpireDate);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curClassBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClassBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClassBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClassBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@ContractTypeID", curClassBO.ContractTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@ContractValue", curClassBO.ContractValue);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static ClassBO Find(int classID)
    //    {
    //        string commandString = "  SELECT * FROM class ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (class.classID = {0}) ", classID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        ClassBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new ClassBO();
    //                ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
    //                ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
    //                ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
    //                ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
    //                ans.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
    //                ans.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
    //                ans.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
    //                ans.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
    //                ans.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
    //                ans.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
    //                ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
    //                ans.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
    //                ans.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<ClassBO> List()
    //    {
    //        string commandString = " SELECT * FROM class ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ClassBO> ans = new List<ClassBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ClassBO item = new ClassBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
    //                item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
    //                item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
    //                item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
    //                item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
    //                item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
    //                item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
    //                item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
    //                item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
    //                item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
    //                item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<ClassBO> List(int? majorID, string teacherID, bool? activityStatus, bool? groupFlag)
    //    {
    //        string commandString = " SELECT * FROM class ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (majorID != null)
    //        {
    //            wherePart += string.Format(" AND (class.majorID = {0}) ", majorID.ToString());
    //        }

    //        if (teacherID != null)
    //        {
    //            wherePart += string.Format(" AND (class.teacherID = '{0}') ", teacherID);
    //        }

    //        if (activityStatus != null)
    //        {
    //            wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
    //        }

    //        if (groupFlag != null)
    //        {
    //            wherePart += string.Format(" AND (class.groupFlag = {0}) ", UtilityDB.GetDBString(groupFlag));
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ClassBO> ans = new List<ClassBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ClassBO item = new ClassBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
    //                item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
    //                item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
    //                item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
    //                item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
    //                item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
    //                item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
    //                item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
    //                item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
    //                item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
    //                item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion

    //    public static List<string> GetKeyPattern(string pattern)
    //    {
    //        string commandString = " SELECT classID FROM class ";
    //        string wherePart = string.Format(" WHERE (1=1) and classID like '{0}%'", pattern);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<string> ans = new List<string>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                string item = "";
    //                item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassID].ToString());

    //                ans.Add(item);

    //            }
    //        }
    //        return ans;
    //    }
    //}

    public partial class ClassDA : DataAccess
    {
        #region Constructors
        public ClassDA(ClassBO inClassBO)
        {
            curClassBO = inClassBO;
            LastChangeFiller.SetChangesInfo(curClassBO);
        }
        #endregion


        #region Variables

        private ClassBO curClassBO = null;
        internal static List<ClassBO> allclasses = new List<ClassBO>(); //hanieh
        internal static List<ClassBO> allActiveClasses = new List<ClassBO>(); //hanieh
        internal static List<ClassBO> allActivePrivateClasses = new List<ClassBO>(); //hanieh
        internal static List<ClassBO> allActivePublicClasses = new List<ClassBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO class (" +
            " 	classID, " +
            " 	className, " +
            " 	majorID, " +
            " 	teacherID, " +
            " 	price, " +
            " 	schoolPrice, " +
            " 	sessionCount, " +
            " 	classDescription, " +
            " 	groupFlag, " +
            " 	registrationExpireDate, " +
            " 	activityStatus, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	ContractTypeID, " +
            " 	ContractValue, " +
            " 	isBalancedFinalWithTeacher, " +
            "   classRegisterationDate)" +
            " VALUES (" +
            " 	@classID, " +
            " 	@className, " +
            " 	@majorID, " +
            " 	@teacherID, " +
            " 	@price, " +
            " 	@schoolPrice, " +
            " 	@sessionCount, " +
            " 	@classDescription, " +
            " 	@groupFlag, " +
            " 	@registrationExpireDate, " +
            " 	@activityStatus, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@ContractTypeID, " +
            " 	@ContractValue, " +
            " 	@isBalancedFinalWithTeacher, " +
            "   @classRegisterationDate)";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curClassBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curClassBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curClassBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@price", curClassBO.Price);
            UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curClassBO.SchoolPrice);
            UtilityDB.AddParameter(command.Parameters, "@sessionCount", curClassBO.SessionCount);
            UtilityDB.AddParameter(command.Parameters, "@classDescription", curClassBO.ClassDescription);
            UtilityDB.AddParameter(command.Parameters, "@groupFlag", curClassBO.GroupFlag);
            UtilityDB.AddParameter(command.Parameters, "@registrationExpireDate", curClassBO.RegistrationExpireDate);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curClassBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClassBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClassBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClassBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@ContractTypeID", curClassBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@ContractValue", curClassBO.ContractValue);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithTeacher", curClassBO.IsBalancedFinalWithTeacher);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", FaDate.CurrentFaDateString);
            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM class " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE class SET " +
            " 	className = @className, " +
            " 	majorID = @majorID, " +
            " 	teacherID = @teacherID, " +
            " 	price = @price, " +
            " 	schoolPrice = @schoolPrice, " +
            " 	sessionCount = @sessionCount, " +
            " 	classDescription = @classDescription, " +
            " 	groupFlag = @groupFlag, " +
            " 	registrationExpireDate = @registrationExpireDate, " +
            " 	activityStatus = @activityStatus, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	ContractTypeID = @ContractTypeID, " +
            " 	ContractValue = @ContractValue, " +
            " 	isBalancedFinalWithTeacher = @isBalancedFinalWithTeacher " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curClassBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curClassBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curClassBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@price", curClassBO.Price);
            UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curClassBO.SchoolPrice);
            UtilityDB.AddParameter(command.Parameters, "@sessionCount", curClassBO.SessionCount);
            UtilityDB.AddParameter(command.Parameters, "@classDescription", curClassBO.ClassDescription);
            UtilityDB.AddParameter(command.Parameters, "@groupFlag", curClassBO.GroupFlag);
            UtilityDB.AddParameter(command.Parameters, "@registrationExpireDate", curClassBO.RegistrationExpireDate);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curClassBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClassBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClassBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClassBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@ContractTypeID", curClassBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@ContractValue", curClassBO.ContractValue);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithTeacher", curClassBO.IsBalancedFinalWithTeacher);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ClassBO Find(int classID)
        {
            string commandString = "  SELECT * FROM class ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (class.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ClassBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ClassBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    ans.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    ans.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    ans.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    ans.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    ans.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    ans.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    ans.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    ans.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    ans.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                }
            }
            return ans;
        }

        public static List<ClassBO> List(int? majorID, string teacherID, bool? groupFlag, bool? activityStatus, bool? isBalancedFinalWithTeacher)
        {
            string commandString = " SELECT [classID],[className],[majorID],[teacherID],[price],[schoolPrice],[sessionCount],[contractTypeID],[contractValue],[classDescription]" +
                                   ",[groupFlag],[registrationExpireDate],[isBalancedFinalWithTeacher],[activityStatus] FROM class ";
            string wherePart = " WHERE (1=1) ";
            if (majorID != null)
            {
                wherePart += string.Format(" AND (class.majorID = {0}) ", majorID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (class.teacherID = '{0}') ", teacherID);
            }

            if (groupFlag != null)
            {
                wherePart += string.Format(" AND (class.groupFlag = {0}) ", UtilityDB.GetDBString(groupFlag));
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            if (isBalancedFinalWithTeacher != null)
            {
                wherePart += string.Format(" AND (class.isBalancedFinalWithTeacher = {0}) ", isBalancedFinalWithTeacher.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClassBO> ans = new List<ClassBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClassBO item = new ClassBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    item.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<ClassBO> List()
        {
            string commandString = " SELECT * FROM class ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
           // List<ClassBO> ans = new List<ClassBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClassBO item = new ClassBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    item.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                    //ans.Add(item); //hanieh
                    allclasses.Add(item); //hanieh
                }
            }
            return allclasses; //ans; //hanieh
        }

        public static List<ClassBO> ListDeactiveCandidates(int? classID)
        {
            string commandString = " SELECT * FROM viwDeactiveCandidatesClass ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClassBO> ans = new List<ClassBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClassBO item = new ClassBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    item.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<ClassBO> ListClassesOfStudent(string studentID, bool? activityStatus)
        {
            string commandString =
                " SELECT     class.* " +
                " FROM         registration INNER JOIN " +
                "                       class ON registration.classID = class.classID ";

                string wherePart = " WHERE (1=1) ";

            if (studentID != null)
            {
                wherePart += string.Format(" AND (registration.studentID = '{0}') ", studentID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClassBO> ans = new List<ClassBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClassBO item = new ClassBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    item.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<ClassBO> ListClassesOfTeacher(string teacherID, bool? activityStatus)
        {

            string commandString =
                " SELECT     class.* from class ";

            string wherePart = " WHERE (1=1) ";

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (teacherID = '{0}') ", teacherID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClassBO> ans = new List<ClassBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClassBO item = new ClassBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.TeacherID]);
                    item.Price = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.Price]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.SessionCount]);
                    item.ClassDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassDescription]);
                    item.GroupFlag = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.GroupFlag]);
                    item.RegistrationExpireDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.RegistrationExpireDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.LastChangeTime]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractTypeID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Class.ContractValue]);
                    item.IsBalancedFinalWithTeacher = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Class.IsBalancedFinalWithTeacher]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public bool SetTeacherBalance(bool isBalanced)
        {
            string commandString =
            " UPDATE class SET " +
            " 	isBalancedFinalWithTeacher = @isBalancedFinalWithTeacher, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClassBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithTeacher", isBalanced);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClassBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClassBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClassBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT classID FROM class ";
            string wherePart = string.Format(" WHERE (1=1) and classID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Class.ClassID].ToString());

                    ans.Add(item);

                }
            }
            return ans;
        }
    }

    public partial class RoomsDA : DataAccess
    {
        #region Constructors
        public RoomsDA(RoomsBO inRoomsBO)
        {
            curRoomsBO = inRoomsBO;
            LastChangeFiller.SetChangesInfo(curRoomsBO);
        }
        #endregion


        #region Variables

        private RoomsBO curRoomsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO rooms (" +
            " 	roomNo, " +
            " 	roomName, " +
            " 	roomDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@roomNo, " +
            " 	@roomName, " +
            " 	@roomDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curRoomsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@roomName", curRoomsBO.RoomName);
            UtilityDB.AddParameter(command.Parameters, "@roomDescription", curRoomsBO.RoomDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRoomsBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRoomsBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRoomsBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM rooms " +
            " WHERE (1=1) " +
            " AND 	roomNo = @roomNo ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curRoomsBO.RoomNo);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE rooms SET " +
            " 	roomName = @roomName, " +
            " 	roomDescription = @roomDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	roomNo = @roomNo ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curRoomsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@roomName", curRoomsBO.RoomName);
            UtilityDB.AddParameter(command.Parameters, "@roomDescription", curRoomsBO.RoomDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRoomsBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRoomsBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRoomsBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static RoomsBO Find(int roomNo)
        {
            string commandString = "  SELECT * FROM rooms ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (rooms.roomNo = {0}) ", roomNo.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            RoomsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new RoomsBO();
                    ans.RoomNo = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Rooms.RoomNo]);
                    ans.RoomName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.RoomName]);
                    ans.RoomDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.RoomDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<RoomsBO> List()
        {
            string commandString = " SELECT * FROM rooms ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<RoomsBO> ans = new List<RoomsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    RoomsBO item = new RoomsBO();
                    item.RoomNo = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Rooms.RoomNo]);
                    item.RoomName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.RoomName]);
                    item.RoomDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.RoomDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Rooms.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ClasssessionDA : DataAccess
    {
        #region Constructors
        public ClasssessionDA(ClasssessionBO inClasssessionBO)
        {
            curClasssessionBO = inClasssessionBO;
            LastChangeFiller.SetChangesInfo(curClasssessionBO);
        }
        #endregion


        #region Variables

        private ClasssessionBO curClasssessionBO = null;
        internal static List<ClasssessionBO> allclassSession = new List<ClasssessionBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO classsession (" +
            " 	classID, " +
            " 	classDate, " +
            " 	timeID, " +
            " 	dayID, " +
            " 	studentAbsence, " +
            " 	teacherAbsence, " +
            " 	continuousAbsence, " +
            " 	sessionStatus, " +
            " 	roomNo, " +
            " 	successorTeacher, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@classDate, " +
            " 	@timeID, " +
            " 	@dayID, " +
            " 	@studentAbsence, " +
            " 	@teacherAbsence, " +
            " 	@continuousAbsence, " +
            " 	@sessionStatus, " +
            " 	@roomNo, " +
            " 	@successorTeacher, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClasssessionBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curClasssessionBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curClasssessionBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curClasssessionBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curClasssessionBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curClasssessionBO.ContinuousAbsence);
            
            PersianDate date = new PersianDate(curClasssessionBO.ClassDate);
            DayBO day = DayBO.GetDay(date.LocalizedWeekDayName);
            UtilityDB.AddParameter(command.Parameters, "@dayID", day.DayID );
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curClasssessionBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curClasssessionBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curClasssessionBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClasssessionBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClasssessionBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClasssessionBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM classsession " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClasssessionBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curClasssessionBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curClasssessionBO.TimeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE classsession SET " +
            " 	studentAbsence = @studentAbsence, " +
            " 	teacherAbsence = @teacherAbsence, " +
            " 	continuousAbsence = @continuousAbsence, " +
            " 	sessionStatus = @sessionStatus, " +
            " 	roomNo = @roomNo, " +
            " 	successorTeacher = @successorTeacher, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curClasssessionBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curClasssessionBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curClasssessionBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curClasssessionBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curClasssessionBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curClasssessionBO.ContinuousAbsence);
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curClasssessionBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curClasssessionBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curClasssessionBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curClasssessionBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curClasssessionBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curClasssessionBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ClasssessionBO Find(int classID, string classDate, int timeID)
        {
            string commandString = "  SELECT * FROM classsession ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (classsession.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (classsession.classDate = '{0}') ", classDate);
            wherePart += string.Format(" AND (classsession.timeID = {0}) ", timeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ClasssessionBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ClasssessionBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.ClassID]);
                    ans.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.ClassDate]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.TimeID]);
                    ans.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.StudentAbsence]);
                    ans.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.TeacherAbsence]);
                    ans.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.ContinuousAbsence]);
                    ans.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.SessionStatus]);
                    ans.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Classsession.RoomNo]);
                    ans.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.SuccessorTeacher]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<ClasssessionBO> List()
        {
            string commandString = " SELECT * FROM classsession ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            //List<ClasssessionBO> ans = new List<ClasssessionBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClasssessionBO item = new ClasssessionBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.StudentAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.TeacherAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.ContinuousAbsence ]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Classsession.RoomNo]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.SuccessorTeacher]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeTime]);

                    //hanieh
                    //ans.Add(item);
                    allclassSession.Add(item);
                    //
                }
            }
            return allclassSession; //ans; //hanieh
        }
        public static List<ClasssessionBO> List(int? timeID, int? dayID, int? sessionStatus, int? roomNo)
        {
            string commandString = " SELECT * FROM classsession ";
            string wherePart = " WHERE (1=1) ";
            if (timeID != null)
            {
                wherePart += string.Format(" AND (classsession.timeID = {0}) ", timeID.ToString());
            }

            if (sessionStatus != null)
            {
                wherePart += string.Format(" AND (classsession.sessionStatus = {0}) ", sessionStatus.ToString());
            }

            if (roomNo != null)
            {
                wherePart += string.Format(" AND (classsession.roomNo = {0}) ", roomNo.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClasssessionBO> ans = new List<ClasssessionBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClasssessionBO item = new ClasssessionBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.StudentAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.TeacherAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.ContinuousAbsence]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Classsession.RoomNo]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.SuccessorTeacher]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<ClasssessionBO> List(int? classID)
        {
            string commandString = " SELECT * FROM classsession ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (classsession.classID = {0}) ", classID.ToString());
            }
            string orderPart = " ORDER BY classDate ";
            commandString += wherePart + orderPart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClasssessionBO> ans = new List<ClasssessionBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClasssessionBO item = new ClasssessionBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.StudentAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.TeacherAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.ContinuousAbsence]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Classsession.RoomNo]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.SuccessorTeacher]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<ClasssessionBO> ListSessions(string dateFrom, string dateTo)
        {
            string commandString = " SELECT * FROM classsession ";
            string wherePart = " WHERE (1=1) ";
            if (dateFrom != null && dateTo != null)
            {
                wherePart += string.Format(" AND (classsession.classDate >= '{0}')  AND (classsession.classDate <= '{1}') ", dateFrom, dateTo);
            }
            //string orderPart = " ORDER BY classDate ";
            commandString += wherePart;// +orderPart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ClasssessionBO> ans = new List<ClasssessionBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ClasssessionBO item = new ClasssessionBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.StudentAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.TeacherAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Classsession.ContinuousAbsence]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Classsession.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.Classsession.RoomNo]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.SuccessorTeacher]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Classsession.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    //public partial class OutcomeTypicalDA : DataAccess
    //{
    //    #region Constructors
    //    public OutcomeTypicalDA(OutcomeTypicalBO inOutcomeTypicalBO)
    //    {
    //        curOutcomeTypicalBO = inOutcomeTypicalBO;
    //        LastChangeFiller.SetChangesInfo(curOutcomeTypicalBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private OutcomeTypicalBO curOutcomeTypicalBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO outcomeTypical (" +
    //        " 	outcomeTypicalTypeID, " +
    //        " 	fee, " +
    //        " 	discount, " +
    //        " 	payDate, " +
    //        " 	checkDate, " +
    //        " 	Tag, " +
    //        " 	description, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime) " +
    //        " VALUES (" +
    //        " 	@outcomeTypicalTypeID, " +
    //        " 	@fee, " +
    //        " 	@discount, " +
    //        " 	@payDate, " +
    //        " 	@checkDate, " +
    //        " 	@Tag, " +
    //        " 	@description, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalBO.OutcomeTypicalTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTypicalBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTypicalBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTypicalBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTypicalBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@Tag", curOutcomeTypicalBO.Tag);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTypicalBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM outcomeTypical " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTypicalBO.PayID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE outcomeTypical SET " +
    //        " 	outcomeTypicalTypeID = @outcomeTypicalTypeID, " +
    //        " 	fee = @fee, " +
    //        " 	discount = @discount, " +
    //        " 	payDate = @payDate, " +
    //        " 	checkDate = @checkDate, " +
    //        " 	Tag = @Tag, " +
    //        " 	description = @description, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTypicalBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalBO.OutcomeTypicalTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTypicalBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTypicalBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTypicalBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTypicalBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@Tag", curOutcomeTypicalBO.Tag);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTypicalBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static OutcomeTypicalBO Find(int payID)
    //    {
    //        string commandString = "  SELECT * FROM outcomeTypical ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (outcomeTypical.payID = {0}) ", payID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        OutcomeTypicalBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new OutcomeTypicalBO();
    //                ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
    //                ans.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
    //                ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
    //                ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
    //                ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
    //                ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
    //                ans.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<OutcomeTypicalBO> List()
    //    {
    //        string commandString = " SELECT * FROM outcomeTypical ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeTypicalBO> ans = new List<OutcomeTypicalBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeTypicalBO item = new OutcomeTypicalBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
    //                item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
    //                item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<OutcomeTypicalBO> List(int? outcomeTypicalTypeID, string payDate, string checkDate)
    //    {
    //        string commandString = " SELECT * FROM outcomeTypical ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (outcomeTypicalTypeID != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.outcomeTypicalTypeID = {0}) ", outcomeTypicalTypeID.ToString());
    //        }

    //        if (payDate != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.payDate = '{0}') ", payDate);
    //        }

    //        if (checkDate != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.checkDate = '{0}') ", checkDate);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeTypicalBO> ans = new List<OutcomeTypicalBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeTypicalBO item = new OutcomeTypicalBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
    //                item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
    //                item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<OutcomeTypicalBO> List(int? outcomeTypicalTypeID, int? fee, int? discount)
    //    {
    //        string commandString = " SELECT * FROM outcomeTypical ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (outcomeTypicalTypeID != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.outcomeTypicalTypeID = {0}) ", outcomeTypicalTypeID.ToString());
    //        }

    //        if (fee != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.fee = {0}) ", fee.ToString());
    //        }

    //        if (discount != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeTypical.discount = {0}) ", discount.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeTypicalBO> ans = new List<OutcomeTypicalBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeTypicalBO item = new OutcomeTypicalBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
    //                item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
    //                item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class OutcomeTypicalDA : DataAccess
    {
        #region Constructors
        public OutcomeTypicalDA(OutcomeTypicalBO inOutcomeTypicalBO)
        {
            curOutcomeTypicalBO = inOutcomeTypicalBO;
            LastChangeFiller.SetChangesInfo(curOutcomeTypicalBO);
        }
        #endregion


        #region Variables

        private OutcomeTypicalBO curOutcomeTypicalBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeTypical (" +
            " 	outcomeTypicalTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	Tag, " +
            " 	description, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	payTypeID, " +
            " 	checkNumber) " +
            " VALUES (" +
            " 	@outcomeTypicalTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@Tag, " +
            " 	@description, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@payTypeID, " +
            " 	@checkNumber) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalBO.OutcomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTypicalBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTypicalBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTypicalBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTypicalBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@Tag", curOutcomeTypicalBO.Tag);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTypicalBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeTypicalBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeTypicalBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeTypical " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTypicalBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeTypical SET " +
            " 	outcomeTypicalTypeID = @outcomeTypicalTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	Tag = @Tag, " +
            " 	description = @description, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	payTypeID = @payTypeID, " +
            " 	checkNumber = @checkNumber " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTypicalBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalBO.OutcomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTypicalBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTypicalBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTypicalBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTypicalBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@Tag", curOutcomeTypicalBO.Tag);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTypicalBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeTypicalBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeTypicalBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeTypicalBO Find(int payID)
        {
            string commandString = "  SELECT * FROM outcomeTypical ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeTypical.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeTypicalBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeTypicalBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
                    ans.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
                    ans.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayTypeID]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckNumber]);

                }
            }
            return ans;
        }

        public static List<OutcomeTypicalBO> List(int? outcomeTypicalTypeID, string payDate, string checkDate, int? payTypeID, string checkNumber)
        {
            string commandString = " SELECT * FROM outcomeTypical ";
            string wherePart = " WHERE (1=1) ";
            if (outcomeTypicalTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeTypical.outcomeTypicalTypeID = {0}) ", outcomeTypicalTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (outcomeTypical.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (outcomeTypical.checkDate = '{0}') ", checkDate);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeTypical.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (outcomeTypical.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeTypicalBO> ans = new List<OutcomeTypicalBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeTypicalBO item = new OutcomeTypicalBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
                    item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
                    item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayTypeID]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<OutcomeTypicalBO> List()
        {
            string commandString = " SELECT * FROM outcomeTypical ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeTypicalBO> ans = new List<OutcomeTypicalBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeTypicalBO item = new OutcomeTypicalBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayID]);
                    item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.OutcomeTypicalTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTypical.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckDate]);
                    item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Tag]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.LastChangeTime]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypical.PayTypeID]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypical.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }


    public partial class OutcomeTypicalTypeDA : DataAccess
    {
        #region Constructors
        public OutcomeTypicalTypeDA(OutcomeTypicalTypeBO inOutcomeTypicalTypeBO)
        {
            curOutcomeTypicalTypeBO = inOutcomeTypicalTypeBO;
            LastChangeFiller.SetChangesInfo(curOutcomeTypicalTypeBO);
        }
        #endregion


        #region Variables

        private OutcomeTypicalTypeBO curOutcomeTypicalTypeBO = null;
        internal static List<OutcomeTypicalBO> alloutcomeT = new List<OutcomeTypicalBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeTypicalType (" +
            " 	outcomeTypicalTypeID, " +
            " 	outcomeTypicalTypeName, " +
            " 	outcomeTypicalTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@outcomeTypicalTypeID, " +
            " 	@outcomeTypicalTypeName, " +
            " 	@outcomeTypicalTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalTypeBO.OutcomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeName", curOutcomeTypicalTypeBO.OutcomeTypicalTypeName);
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeDescription", curOutcomeTypicalTypeBO.OutcomeTypicalTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeTypicalType " +
            " WHERE (1=1) " +
            " AND 	outcomeTypicalTypeID = @outcomeTypicalTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalTypeBO.OutcomeTypicalTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeTypicalType SET " +
            " 	outcomeTypicalTypeName = @outcomeTypicalTypeName, " +
            " 	outcomeTypicalTypeDescription = @outcomeTypicalTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	outcomeTypicalTypeID = @outcomeTypicalTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeID", curOutcomeTypicalTypeBO.OutcomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeName", curOutcomeTypicalTypeBO.OutcomeTypicalTypeName);
            UtilityDB.AddParameter(command.Parameters, "@outcomeTypicalTypeDescription", curOutcomeTypicalTypeBO.OutcomeTypicalTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTypicalTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTypicalTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTypicalTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeTypicalTypeBO Find(int outcomeTypicalTypeID)
        {
            string commandString = "  SELECT * FROM outcomeTypicalType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeTypicalType.outcomeTypicalTypeID = {0}) ", outcomeTypicalTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeTypicalTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeTypicalTypeBO();
                    ans.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeID]);
                    ans.OutcomeTypicalTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeName]);
                    ans.OutcomeTypicalTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<OutcomeTypicalTypeBO> List()
        {
            string commandString = " SELECT * FROM outcomeTypicalType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeTypicalTypeBO> ans = new List<OutcomeTypicalTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeTypicalTypeBO item = new OutcomeTypicalTypeBO();
                    item.OutcomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeID]);
                    item.OutcomeTypicalTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeName]);
                    item.OutcomeTypicalTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.OutcomeTypicalTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTypicalType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class OutcomeOveralTypeDA : DataAccess
    {
        #region Constructors
        public OutcomeOveralTypeDA(OutcomeOveralTypeBO inOutcomeOveralTypeBO)
        {
            curOutcomeOveralTypeBO = inOutcomeOveralTypeBO;
            LastChangeFiller.SetChangesInfo(curOutcomeOveralTypeBO);
        }
        #endregion


        #region Variables

        private OutcomeOveralTypeBO curOutcomeOveralTypeBO = null;
        internal static List<OutcomeOveralTypeBO> allOutcomeO = new List<OutcomeOveralTypeBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeOveralType (" +
            " 	outcomeOveralTypeID, " +
            " 	outcomeOveralTypeName, " +
            " 	outcomeOveralTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@outcomeOveralTypeID, " +
            " 	@outcomeOveralTypeName, " +
            " 	@outcomeOveralTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curOutcomeOveralTypeBO.OutcomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeName", curOutcomeOveralTypeBO.OutcomeOveralTypeName);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeDescription", curOutcomeOveralTypeBO.OutcomeOveralTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeOveralTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeOveralTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeOveralTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeOveralType " +
            " WHERE (1=1) " +
            " AND 	outcomeOveralTypeID = @outcomeOveralTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curOutcomeOveralTypeBO.OutcomeOveralTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeOveralType SET " +
            " 	outcomeOveralTypeName = @outcomeOveralTypeName, " +
            " 	outcomeOveralTypeDescription = @outcomeOveralTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	outcomeOveralTypeID = @outcomeOveralTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curOutcomeOveralTypeBO.OutcomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeName", curOutcomeOveralTypeBO.OutcomeOveralTypeName);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeDescription", curOutcomeOveralTypeBO.OutcomeOveralTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeOveralTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeOveralTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeOveralTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeOveralTypeBO Find(int outcomeOveralTypeID)
        {
            string commandString = "  SELECT * FROM outcomeOveralType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeOveralType.outcomeOveralTypeID = {0}) ", outcomeOveralTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeOveralTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeOveralTypeBO();
                    ans.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeID]);
                    ans.OutcomeOveralTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeName]);
                    ans.OutcomeOveralTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<OutcomeOveralTypeBO> List()
        {
            string commandString = " SELECT * FROM outcomeOveralType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeOveralTypeBO> ans = new List<OutcomeOveralTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeOveralTypeBO item = new OutcomeOveralTypeBO();
                    item.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeID]);
                    item.OutcomeOveralTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeName]);
                    item.OutcomeOveralTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.OutcomeOveralTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeOveralType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    //public partial class OutcomeBuyStuffDA : DataAccess
    //{
    //    #region Constructors
    //    public OutcomeBuyStuffDA(OutcomeBuyStuffBO inOutcomeBuyStuffBO)
    //    {
    //        curOutcomeBuyStuffBO = inOutcomeBuyStuffBO;
    //        LastChangeFiller.SetChangesInfo(curOutcomeBuyStuffBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private OutcomeBuyStuffBO curOutcomeBuyStuffBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO outcomeBuyStuff (" +
    //        " 	payID, " +
    //        " 	fee, " +
    //        " 	discount, " +
    //        " 	payDate, " +
    //        " 	checkDate, " +
    //        " 	stuffName, " +
    //        " 	stuffCount, " +
    //        " 	description, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime) " +
    //        " VALUES (" +
    //        " 	@payID, " +
    //        " 	@fee, " +
    //        " 	@discount, " +
    //        " 	@payDate, " +
    //        " 	@checkDate, " +
    //        " 	@stuffName, " +
    //        " 	@stuffCount, " +
    //        " 	@description, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeBuyStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeBuyStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeBuyStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeBuyStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curOutcomeBuyStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curOutcomeBuyStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeBuyStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeBuyStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeBuyStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeBuyStuffBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM outcomeBuyStuff " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeBuyStuffBO.PayID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE outcomeBuyStuff SET " +
    //        " 	fee = @fee, " +
    //        " 	discount = @discount, " +
    //        " 	payDate = @payDate, " +
    //        " 	checkDate = @checkDate, " +
    //        " 	stuffName = @stuffName, " +
    //        " 	stuffCount = @stuffCount, " +
    //        " 	description = @description, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeBuyStuffBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeBuyStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeBuyStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeBuyStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeBuyStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curOutcomeBuyStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curOutcomeBuyStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeBuyStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeBuyStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeBuyStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeBuyStuffBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static OutcomeBuyStuffBO Find(int payID)
    //    {
    //        string commandString = "  SELECT * FROM outcomeBuyStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (outcomeBuyStuff.payID = {0}) ", payID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        OutcomeBuyStuffBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new OutcomeBuyStuffBO();
    //                ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayID]);
    //                ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.Fee]);
    //                ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.Discount]);
    //                ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.PayDate]);
    //                ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckDate]);
    //                ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.StuffName]);
    //                ans.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.StuffCount]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.Description]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeTime]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<OutcomeBuyStuffBO> List()
    //    {
    //        string commandString = " SELECT * FROM outcomeBuyStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeBuyStuffBO> ans = new List<OutcomeBuyStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeBuyStuffBO item = new OutcomeBuyStuffBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckDate]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.StuffName]);
    //                item.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.StuffCount]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<OutcomeBuyStuffBO> List(string payDate, string checkDate)
    //    {
    //        string commandString = " SELECT * FROM outcomeBuyStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (payDate != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeBuyStuff.payDate = '{0}') ", payDate);
    //        }

    //        if (checkDate != null)
    //        {
    //            wherePart += string.Format(" AND (outcomeBuyStuff.checkDate = '{0}') ", checkDate);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeBuyStuffBO> ans = new List<OutcomeBuyStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeBuyStuffBO item = new OutcomeBuyStuffBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckDate]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.StuffName]);
    //                item.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.StuffCount]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    //public partial class OutcomeBuyStuffDA : DataAccess
    //{
    //    #region Constructors
    //    public OutcomeBuyStuffDA(OutcomeBuyStuffBO inOutcomeBuyStuffBO)
    //    {
    //        curOutcomeBuyStuffBO = inOutcomeBuyStuffBO;
    //        LastChangeFiller.SetChangesInfo(curOutcomeBuyStuffBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private OutcomeBuyStuffBO curOutcomeBuyStuffBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO outcomeBuyStuff (" +
    //        " 	fee, " +
    //        " 	discount, " +
    //        " 	payDate, " +
    //        " 	checkDate, " +
    //        " 	stuffName, " +
    //        " 	stuffCount, " +
    //        " 	description, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime, " +
    //        " 	checkNumber, " +
    //        " 	payTypeID) " +
    //        " VALUES (" +
    //        " 	@fee, " +
    //        " 	@discount, " +
    //        " 	@payDate, " +
    //        " 	@checkDate, " +
    //        " 	@stuffName, " +
    //        " 	@stuffCount, " +
    //        " 	@description, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime, " +
    //        " 	@checkNumber, " +
    //        " 	@payTypeID) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeBuyStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeBuyStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeBuyStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeBuyStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curOutcomeBuyStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curOutcomeBuyStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeBuyStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeBuyStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeBuyStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeBuyStuffBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeBuyStuffBO.CheckNumber);
    //        UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeBuyStuffBO.PayTypeID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM outcomeBuyStuff " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeBuyStuffBO.PayID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE outcomeBuyStuff SET " +
    //        " 	fee = @fee, " +
    //        " 	discount = @discount, " +
    //        " 	payDate = @payDate, " +
    //        " 	checkDate = @checkDate, " +
    //        " 	stuffName = @stuffName, " +
    //        " 	stuffCount = @stuffCount, " +
    //        " 	description = @description, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime, " +
    //        " 	checkNumber = @checkNumber, " +
    //        " 	payTypeID = @payTypeID " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeBuyStuffBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeBuyStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeBuyStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeBuyStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeBuyStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curOutcomeBuyStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curOutcomeBuyStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeBuyStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeBuyStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeBuyStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeBuyStuffBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeBuyStuffBO.CheckNumber);
    //        UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeBuyStuffBO.PayTypeID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static OutcomeBuyStuffBO Find(int payID)
    //    {
    //        string commandString = "  SELECT * FROM outcomeBuyStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (outcomeBuyStuff.payID = {0}) ", payID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        OutcomeBuyStuffBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new OutcomeBuyStuffBO();
    //                ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayID]);
    //                ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.Fee]);
    //                ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.Discount]);
    //                ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.PayDate]);
    //                ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckDate]);
    //                ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.StuffName]);
    //                ans.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.StuffCount]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.Description]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeTime]);
    //                ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckNumber]);
    //                ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayTypeID]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<OutcomeBuyStuffBO> List()
    //    {
    //        string commandString = " SELECT * FROM outcomeBuyStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<OutcomeBuyStuffBO> ans = new List<OutcomeBuyStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                OutcomeBuyStuffBO item = new OutcomeBuyStuffBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckDate]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.StuffName]);
    //                item.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeBuyStuff.StuffCount]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.LastChangeTime]);
    //                item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeBuyStuff.CheckNumber]);
    //                item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeBuyStuff.PayTypeID]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class OutcomeStudentDA : DataAccess
    {
        #region Constructors
        public OutcomeStudentDA(OutcomeStudentBO inOutcomeStudentBO)
        {
            curOutcomeStudentBO = inOutcomeStudentBO;
            LastChangeFiller.SetChangesInfo(curOutcomeStudentBO);
        }
        #endregion


        #region Variables

        private OutcomeStudentBO curOutcomeStudentBO = null;
        internal static List<OutcomeStudentBO> alloutcomeS = new List<OutcomeStudentBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeStudent (" +
            " 	studentID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	classID, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@studentID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@classID, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curOutcomeStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeStudentBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeStudentBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeStudentBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeStudentBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeStudentBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeStudentBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeStudentBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curOutcomeStudentBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeStudent " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeStudentBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeStudent SET " +
            " 	studentID = @studentID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	classID = @classID, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeStudentBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curOutcomeStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeStudentBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeStudentBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeStudentBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeStudentBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeStudentBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeStudentBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeStudentBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curOutcomeStudentBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeStudentBO Find(int payID)
        {
            string commandString = "  SELECT * FROM outcomeStudent ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeStudent.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeStudentBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeStudentBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.StudentID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStudent.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.Description]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.ClassID]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<OutcomeStudentBO> List()
        {
            string commandString = " SELECT * FROM outcomeStudent ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeStudentBO> ans = new List<OutcomeStudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeStudentBO item = new OutcomeStudentBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.StudentID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStudent.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<OutcomeStudentBO> List(string studentID, int? payTypeID, string payDate, string checkDate, string checkNumber, int? classID)
        {
            string commandString = " SELECT * FROM outcomeStudent ";
            string wherePart = " WHERE (1=1) ";
            if (studentID != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.studentID = '{0}') ", studentID);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.checkNumber = '{0}') ", checkNumber);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (outcomeStudent.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeStudentBO> ans = new List<OutcomeStudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeStudentBO item = new OutcomeStudentBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.StudentID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStudent.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStudent.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStudent.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class OutcomeEmployeeDA : DataAccess
    {
        #region Constructors
        public OutcomeEmployeeDA(OutcomeEmployeeBO inOutcomeEmployeeBO)
        {
            curOutcomeEmployeeBO = inOutcomeEmployeeBO;
            LastChangeFiller.SetChangesInfo(curOutcomeEmployeeBO);
        }
        #endregion


        #region Variables

        private OutcomeEmployeeBO curOutcomeEmployeeBO = null;
        internal static List<OutcomeEmployeeBO> alloutcomeE = new List<OutcomeEmployeeBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeEmployee (" +
            " 	employeeID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	dateFrom, " +
            " 	dateTo, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@employeeID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@dateFrom, " +
            " 	@dateTo, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curOutcomeEmployeeBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeEmployeeBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeEmployeeBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeEmployeeBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeEmployeeBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeEmployeeBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeEmployeeBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeEmployeeBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@dateFrom", curOutcomeEmployeeBO.DateFrom);
            UtilityDB.AddParameter(command.Parameters, "@dateTo", curOutcomeEmployeeBO.DateTo);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeEmployeeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeEmployeeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeEmployeeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeEmployee " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeEmployeeBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeEmployee SET " +
            " 	employeeID = @employeeID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	dateFrom = @dateFrom, " +
            " 	dateTo = @dateTo, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeEmployeeBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curOutcomeEmployeeBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeEmployeeBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeEmployeeBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeEmployeeBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeEmployeeBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeEmployeeBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeEmployeeBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeEmployeeBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@dateFrom", curOutcomeEmployeeBO.DateFrom);
            UtilityDB.AddParameter(command.Parameters, "@dateTo", curOutcomeEmployeeBO.DateTo);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeEmployeeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeEmployeeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeEmployeeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeEmployeeBO Find(int payID)
        {
            string commandString = "  SELECT * FROM outcomeEmployee ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeEmployee.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeEmployeeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeEmployeeBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayID]);
                    ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.EmployeeID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeEmployee.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.Description]);
                    ans.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateFrom]);
                    ans.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateTo]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<OutcomeEmployeeBO> List()
        {
            string commandString = " SELECT * FROM outcomeEmployee ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeEmployeeBO> ans = new List<OutcomeEmployeeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeEmployeeBO item = new OutcomeEmployeeBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayID]);
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.EmployeeID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeEmployee.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.Description]);
                    item.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateFrom]);
                    item.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateTo]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<OutcomeEmployeeBO> List(string employeeID, int? payTypeID, string payDate, string checkDate, string checkNumber, string dateFrom, string dateTo)
        {
            string commandString = " SELECT * FROM outcomeEmployee ";
            string wherePart = " WHERE (1=1) ";
            if (employeeID != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.employeeID = '{0}') ", employeeID);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.checkNumber = '{0}') ", checkNumber);
            }

            if (dateFrom != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.dateFrom = '{0}') ", dateFrom);
            }

            if (dateTo != null)
            {
                wherePart += string.Format(" AND (outcomeEmployee.dateTo = '{0}') ", dateTo);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeEmployeeBO> ans = new List<OutcomeEmployeeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeEmployeeBO item = new OutcomeEmployeeBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayID]);
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.EmployeeID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeEmployee.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeEmployee.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.Description]);
                    item.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateFrom]);
                    item.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.DateTo]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeEmployee.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class OutcomeTeacherDA : DataAccess
    {
        #region Constructors
        public OutcomeTeacherDA(OutcomeTeacherBO inOutcomeTeacherBO)
        {
            curOutcomeTeacherBO = inOutcomeTeacherBO;
            LastChangeFiller.SetChangesInfo(curOutcomeTeacherBO);
        }
        #endregion


        #region Variables

        private OutcomeTeacherBO curOutcomeTeacherBO = null;
        internal static List<OutcomeTeacherBO> alloutcomeTe = new List<OutcomeTeacherBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeTeacher (" +
            " 	teacherID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	classID, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	groupPayID, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@classID, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@groupPayID, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curOutcomeTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeTeacherBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTeacherBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTeacherBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTeacherBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTeacherBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeTeacherBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTeacherBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curOutcomeTeacherBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@groupPayID", curOutcomeTeacherBO.GroupPayID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeTeacher " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTeacherBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeTeacher SET " +
            " 	teacherID = @teacherID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	classID = @classID, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeTeacherBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curOutcomeTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeTeacherBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeTeacherBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeTeacherBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeTeacherBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeTeacherBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeTeacherBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeTeacherBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curOutcomeTeacherBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeTeacherBO Find(int payID)
        {
            string commandString = "  SELECT * FROM outcomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeTeacher.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeTeacherBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeTeacherBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.TeacherID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTeacher.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.Description]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.ClassID]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeTime]);
                    ans.GroupPayID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.GroupPayID]);

                }
            }
            return ans;
        }

        public static List<OutcomeTeacherBO> List()
        {
            string commandString = " SELECT * FROM outcomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeTeacherBO> ans = new List<OutcomeTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeTeacherBO item = new OutcomeTeacherBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.TeacherID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTeacher.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeTime]);
                    item.GroupPayID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.GroupPayID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<OutcomeTeacherBO> List(string teacherID, int? payTypeID, string payDate, string checkDate, string checkNumber, int? classID)
        {
            string commandString = " SELECT * FROM outcomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.teacherID = '{0}') ", teacherID);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.checkNumber = '{0}') ", checkNumber);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (outcomeTeacher.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeTeacherBO> ans = new List<OutcomeTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeTeacherBO item = new OutcomeTeacherBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.TeacherID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeTeacher.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeTeacher.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.LastChangeTime]);
                    item.GroupPayID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeTeacher.GroupPayID]);
                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    //public partial class ViwOutcomeOveralDA : DataAccess
    //{
    //    #region Constructors
    //    public ViwOutcomeOveralDA(ViwOutcomeOveralBO inViwOutcomeOveralBO)
    //    {
    //        curViwOutcomeOveralBO = inViwOutcomeOveralBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private ViwOutcomeOveralBO curViwOutcomeOveralBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO viwOutcomeOveral (" +
    //        " 	payID, " +
    //        " 	outcomeOveralTypeID, " +
    //        " 	fee, " +
    //        " 	discount, " +
    //        " 	payDate, " +
    //        " 	checkDate, " +
    //        " 	description, " +
    //        " 	payName) " +
    //        " VALUES (" +
    //        " 	@payID, " +
    //        " 	@outcomeOveralTypeID, " +
    //        " 	@fee, " +
    //        " 	@discount, " +
    //        " 	@payDate, " +
    //        " 	@checkDate, " +
    //        " 	@description, " +
    //        " 	@payName) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curViwOutcomeOveralBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curViwOutcomeOveralBO.OutcomeOveralTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curViwOutcomeOveralBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curViwOutcomeOveralBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curViwOutcomeOveralBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwOutcomeOveralBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwOutcomeOveralBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@payName", curViwOutcomeOveralBO.PayName);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM viwOutcomeOveral " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curViwOutcomeOveralBO.PayID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE viwOutcomeOveral SET " +
    //        " 	outcomeOveralTypeID = @outcomeOveralTypeID, " +
    //        " 	fee = @fee, " +
    //        " 	discount = @discount, " +
    //        " 	payDate = @payDate, " +
    //        " 	checkDate = @checkDate, " +
    //        " 	description = @description, " +
    //        " 	payName = @payName " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curViwOutcomeOveralBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curViwOutcomeOveralBO.OutcomeOveralTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curViwOutcomeOveralBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curViwOutcomeOveralBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curViwOutcomeOveralBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwOutcomeOveralBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwOutcomeOveralBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@payName", curViwOutcomeOveralBO.PayName);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static ViwOutcomeOveralBO Find(int payID)
    //    {
    //        string commandString = "  SELECT * FROM viwOutcomeOveral ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (viwOutcomeOveral.payID = {0}) ", payID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        ViwOutcomeOveralBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new ViwOutcomeOveralBO();
    //                ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
    //                ans.OutcomeOveralTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
    //                ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
    //                ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
    //                ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
    //                ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
    //                ans.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<ViwOutcomeOveralBO> List()
    //    {
    //        string commandString = " SELECT * FROM viwOutcomeOveral ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
    //                item.OutcomeOveralTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
    //                item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<ViwOutcomeOveralBO> List(int? outcomeOveralTypeID, string payDate, string checkDate)
    //    {
    //        string commandString = " SELECT * FROM viwOutcomeOveral ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (outcomeOveralTypeID != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.outcomeOveralTypeID = {0}) ", outcomeOveralTypeID.ToString());
    //        }

    //        if (payDate != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.payDate = '{0}') ", payDate);
    //        }

    //        if (checkDate != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.checkDate = '{0}') ", checkDate);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
    //                item.OutcomeOveralTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
    //                item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<ViwOutcomeOveralBO> List(int? outcomeOveralTypeID, int? fee, int? discount)
    //    {
    //        string commandString = " SELECT * FROM viwOutcomeOveral ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (outcomeOveralTypeID != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.outcomeOveralTypeID = {0}) ", outcomeOveralTypeID.ToString());
    //        }

    //        if (fee != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.fee = {0}) ", fee.ToString());
    //        }

    //        if (discount != null)
    //        {
    //            wherePart += string.Format(" AND (viwOutcomeOveral.discount = {0}) ", discount.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
    //                item.OutcomeOveralTypeID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
    //                item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class ViwOutcomeOveralDA : DataAccess
    {
        #region Constructors
        public ViwOutcomeOveralDA(ViwOutcomeOveralBO inViwOutcomeOveralBO)
        {
            curViwOutcomeOveralBO = inViwOutcomeOveralBO;
        }
        #endregion


        #region Variables

        private ViwOutcomeOveralBO curViwOutcomeOveralBO = null;
        internal static List<ViwOutcomeOveralBO> allViwOutcomeO = new List<ViwOutcomeOveralBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwOutcomeOveral (" +
            " 	payID, " +
            " 	outcomeOveralTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	description, " +
            " 	payName, " +
            " 	checkNumber, " +
            " 	payTypeID) " +
            " VALUES (" +
            " 	@payID, " +
            " 	@outcomeOveralTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@description, " +
            " 	@payName, " +
            " 	@checkNumber, " +
            " 	@payTypeID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwOutcomeOveralBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curViwOutcomeOveralBO.OutcomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwOutcomeOveralBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwOutcomeOveralBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwOutcomeOveralBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwOutcomeOveralBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwOutcomeOveralBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payName", curViwOutcomeOveralBO.PayName);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwOutcomeOveralBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwOutcomeOveralBO.PayTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwOutcomeOveral " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwOutcomeOveral SET " +
            " 	payID = @payID, " +
            " 	outcomeOveralTypeID = @outcomeOveralTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	description = @description, " +
            " 	payName = @payName, " +
            " 	checkNumber = @checkNumber, " +
            " 	payTypeID = @payTypeID " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwOutcomeOveralBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@outcomeOveralTypeID", curViwOutcomeOveralBO.OutcomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwOutcomeOveralBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwOutcomeOveralBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwOutcomeOveralBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwOutcomeOveralBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwOutcomeOveralBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payName", curViwOutcomeOveralBO.PayName);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwOutcomeOveralBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwOutcomeOveralBO.PayTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwOutcomeOveralBO Find()
        {
            string commandString = "  SELECT * FROM viwOutcomeOveral ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwOutcomeOveralBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwOutcomeOveralBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
                    ans.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
                    ans.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckNumber]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayTypeID]);

                }
            }
            return ans;
        }

        public static List<ViwOutcomeOveralBO> List()
        {
            string commandString = " SELECT * FROM viwOutcomeOveral ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
           // List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>(); //hanieh
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
                    item.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckNumber]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayTypeID]);

                    //hanieh
                    //ans.Add(item);
                    allViwOutcomeO.Add(item);
                    //
                }
            }
            return allViwOutcomeO; //ans; //hanieh
        }
        public static List<ViwOutcomeOveralBO> List(int? outcomeOveralTypeID, string payDate, string checkDate, string checkNumber, int? payTypeID)
        {
            string commandString = " SELECT * FROM viwOutcomeOveral ";
            string wherePart = " WHERE (1=1) ";
            if (outcomeOveralTypeID != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.outcomeOveralTypeID = {0}) ", outcomeOveralTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.checkNumber = '{0}') ", checkNumber);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.payTypeID = {0}) ", payTypeID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
                    item.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckNumber]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayTypeID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<ViwOutcomeOveralBO> List(int? outcomeOveralTypeID, string payDateFrom, string payDateTo, string checkDate, string checkNumber, int? payTypeID)
        {
            string commandString = " SELECT * FROM viwOutcomeOveral ";
            string wherePart = " WHERE (1=1) ";
            if (outcomeOveralTypeID != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.outcomeOveralTypeID = {0}) ", outcomeOveralTypeID.ToString());
            }

            if (payDateFrom != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.payDate >= '{0}') ", payDateFrom);
            }

            if (payDateTo != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.payDate <= '{0}') ", payDateTo);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.checkNumber = '{0}') ", checkNumber);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (viwOutcomeOveral.payTypeID = {0}) ", payTypeID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwOutcomeOveralBO> ans = new List<ViwOutcomeOveralBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwOutcomeOveralBO item = new ViwOutcomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayID]);
                    item.OutcomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.OutcomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwOutcomeOveral.CheckNumber]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwOutcomeOveral.PayTypeID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
    }

    public partial class PayTypeDA : DataAccess
    {
        #region Constructors
        public PayTypeDA(PayTypeBO inPayTypeBO)
        {
            curPayTypeBO = inPayTypeBO;
            LastChangeFiller.SetChangesInfo(curPayTypeBO);
        }
        #endregion


        #region Variables

        private PayTypeBO curPayTypeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO payType (" +
            " 	payTypeID, " +
            " 	payTypeName, " +
            " 	payTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@payTypeID, " +
            " 	@payTypeName, " +
            " 	@payTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curPayTypeBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curPayTypeBO.PayTypeName);
            UtilityDB.AddParameter(command.Parameters, "@payTypeDescription", curPayTypeBO.PayTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curPayTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curPayTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curPayTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM payType " +
            " WHERE (1=1) " +
            " AND 	payTypeID = @payTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curPayTypeBO.PayTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE payType SET " +
            " 	payTypeName = @payTypeName, " +
            " 	payTypeDescription = @payTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payTypeID = @payTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curPayTypeBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curPayTypeBO.PayTypeName);
            UtilityDB.AddParameter(command.Parameters, "@payTypeDescription", curPayTypeBO.PayTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curPayTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curPayTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curPayTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static PayTypeBO Find(int payTypeID)
        {
            string commandString = "  SELECT * FROM payType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (payType.payTypeID = {0}) ", payTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            PayTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new PayTypeBO();
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.PayType.PayTypeID]);
                    ans.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.PayTypeName]);
                    ans.PayTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.PayTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<PayTypeBO> List()
        {
            string commandString = " SELECT * FROM payType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<PayTypeBO> ans = new List<PayTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    PayTypeBO item = new PayTypeBO();
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.PayType.PayTypeID]);
                    item.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.PayTypeName]);
                    item.PayTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.PayTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PayType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class IncomeTypicalTypeDA : DataAccess
    {
        #region Constructors
        public IncomeTypicalTypeDA(IncomeTypicalTypeBO inIncomeTypicalTypeBO)
        {
            curIncomeTypicalTypeBO = inIncomeTypicalTypeBO;
            LastChangeFiller.SetChangesInfo(curIncomeTypicalTypeBO);
        }
        #endregion


        #region Variables

        private IncomeTypicalTypeBO curIncomeTypicalTypeBO = null;
        internal static List<IncomeTypicalTypeBO> allIncomeTT = new List<IncomeTypicalTypeBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeTypicalType (" +
            " 	incomeTypicalTypeID, " +
            " 	incomeTypicalTypeName, " +
            " 	incomeTypicalTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@incomeTypicalTypeID, " +
            " 	@incomeTypicalTypeName, " +
            " 	@incomeTypicalTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeID", curIncomeTypicalTypeBO.IncomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeName", curIncomeTypicalTypeBO.IncomeTypicalTypeName);
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeDescription", curIncomeTypicalTypeBO.IncomeTypicalTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTypicalTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTypicalTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTypicalTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeTypicalType " +
            " WHERE (1=1) " +
            " AND 	incomeTypicalTypeID = @incomeTypicalTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeID", curIncomeTypicalTypeBO.IncomeTypicalTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeTypicalType SET " +
            " 	incomeTypicalTypeName = @incomeTypicalTypeName, " +
            " 	incomeTypicalTypeDescription = @incomeTypicalTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	incomeTypicalTypeID = @incomeTypicalTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeID", curIncomeTypicalTypeBO.IncomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeName", curIncomeTypicalTypeBO.IncomeTypicalTypeName);
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeDescription", curIncomeTypicalTypeBO.IncomeTypicalTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTypicalTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTypicalTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTypicalTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeTypicalTypeBO Find(int incomeTypicalTypeID)
        {
            string commandString = "  SELECT * FROM incomeTypicalType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeTypicalType.incomeTypicalTypeID = {0}) ", incomeTypicalTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeTypicalTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeTypicalTypeBO();
                    ans.IncomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeID]);
                    ans.IncomeTypicalTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeName]);
                    ans.IncomeTypicalTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<IncomeTypicalTypeBO> List()
        {
            string commandString = " SELECT * FROM incomeTypicalType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeTypicalTypeBO> ans = new List<IncomeTypicalTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeTypicalTypeBO item = new IncomeTypicalTypeBO();
                    item.IncomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeID]);
                    item.IncomeTypicalTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeName]);
                    item.IncomeTypicalTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.IncomeTypicalTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypicalType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class IncomeOveralTypeDA : DataAccess
    {
        #region Constructors
        public IncomeOveralTypeDA(IncomeOveralTypeBO inIncomeOveralTypeBO)
        {
            curIncomeOveralTypeBO = inIncomeOveralTypeBO;
            LastChangeFiller.SetChangesInfo(curIncomeOveralTypeBO);
        }
        #endregion


        #region Variables

        private IncomeOveralTypeBO curIncomeOveralTypeBO = null;
        internal static List<IncomeOveralTypeBO> allIncomeOT = new List<IncomeOveralTypeBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeOveralType (" +
            " 	incomeOveralTypeID, " +
            " 	incomeOveralTypeName, " +
            " 	incomeOveralTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@incomeOveralTypeID, " +
            " 	@incomeOveralTypeName, " +
            " 	@incomeOveralTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeID", curIncomeOveralTypeBO.IncomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeName", curIncomeOveralTypeBO.IncomeOveralTypeName);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeDescription", curIncomeOveralTypeBO.IncomeOveralTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeOveralTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeOveralTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeOveralTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeOveralType " +
            " WHERE (1=1) " +
            " AND 	incomeOveralTypeID = @incomeOveralTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeID", curIncomeOveralTypeBO.IncomeOveralTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeOveralType SET " +
            " 	incomeOveralTypeName = @incomeOveralTypeName, " +
            " 	incomeOveralTypeDescription = @incomeOveralTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	incomeOveralTypeID = @incomeOveralTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeID", curIncomeOveralTypeBO.IncomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeName", curIncomeOveralTypeBO.IncomeOveralTypeName);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeDescription", curIncomeOveralTypeBO.IncomeOveralTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeOveralTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeOveralTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeOveralTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeOveralTypeBO Find(int incomeOveralTypeID)
        {
            string commandString = "  SELECT * FROM incomeOveralType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeOveralType.incomeOveralTypeID = {0}) ", incomeOveralTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeOveralTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeOveralTypeBO();
                    ans.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeID]);
                    ans.IncomeOveralTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeName]);
                    ans.IncomeOveralTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<IncomeOveralTypeBO> List()
        {
            string commandString = " SELECT * FROM incomeOveralType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeOveralTypeBO> ans = new List<IncomeOveralTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeOveralTypeBO item = new IncomeOveralTypeBO();
                    item.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeID]);
                    item.IncomeOveralTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeName]);
                    item.IncomeOveralTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.IncomeOveralTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeOveralType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class IncomeTypicalDA : DataAccess
    {
        #region Constructors
        public IncomeTypicalDA(IncomeTypicalBO inIncomeTypicalBO)
        {
            curIncomeTypicalBO = inIncomeTypicalBO;
            LastChangeFiller.SetChangesInfo(curIncomeTypicalBO);
        }
        #endregion


        #region Variables

        private IncomeTypicalBO curIncomeTypicalBO = null;
        internal static List<IncomeTypicalBO> allIncomeT = new List<IncomeTypicalBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeTypical (" +
            " 	incomeTypicalTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	Tag, " +
            " 	description, " +
            " 	checkNumber, " +
            " 	payTypeID, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@incomeTypicalTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@Tag, " +
            " 	@description, " +
            " 	@checkNumber, " +
            " 	@payTypeID, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeID", curIncomeTypicalBO.IncomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeTypicalBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeTypicalBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeTypicalBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeTypicalBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@Tag", curIncomeTypicalBO.Tag);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeTypicalBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeTypicalBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeTypicalBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTypicalBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTypicalBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTypicalBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeTypical " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeTypicalBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeTypical SET " +
            " 	incomeTypicalTypeID = @incomeTypicalTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	Tag = @Tag, " +
            " 	description = @description, " +
            " 	checkNumber = @checkNumber, " +
            "   payTypeID = @payTypeID, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeTypicalBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@incomeTypicalTypeID", curIncomeTypicalBO.IncomeTypicalTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeTypicalBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeTypicalBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeTypicalBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeTypicalBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@Tag", curIncomeTypicalBO.Tag);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeTypicalBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeTypicalBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeTypicalBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTypicalBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTypicalBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTypicalBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeTypicalBO Find(int payID)
        {
            string commandString = "  SELECT * FROM incomeTypical ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeTypical.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeTypicalBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeTypicalBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayID]);
                    ans.IncomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.IncomeTypicalTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTypical.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckDate]);
                    ans.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Tag]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Description]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckNumber]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayTypeID]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<IncomeTypicalBO> List()
        {
            string commandString = " SELECT * FROM incomeTypical ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeTypicalBO> ans = new List<IncomeTypicalBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeTypicalBO item = new IncomeTypicalBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayID]);
                    item.IncomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.IncomeTypicalTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTypical.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckDate]);
                    item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Tag]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Description]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckNumber]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayTypeID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<IncomeTypicalBO> List(int? incomeTypicalTypeID, string payDate, string checkDate, string checkNumber)
        {
            string commandString = " SELECT * FROM incomeTypical ";
            string wherePart = " WHERE (1=1) ";
            if (incomeTypicalTypeID != null)
            {
                wherePart += string.Format(" AND (incomeTypical.incomeTypicalTypeID = {0}) ", incomeTypicalTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (incomeTypical.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (incomeTypical.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (incomeTypical.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeTypicalBO> ans = new List<IncomeTypicalBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeTypicalBO item = new IncomeTypicalBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayID]);
                    item.IncomeTypicalTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.IncomeTypicalTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTypical.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckDate]);
                    item.Tag = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Tag]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.Description]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.CheckNumber]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTypical.PayTypeID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTypical.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    //public partial class IncomeSellStuffDA : DataAccess
    //{
    //    #region Constructors
    //    public IncomeSellStuffDA(IncomeSellStuffBO inIncomeSellStuffBO)
    //    {
    //        curIncomeSellStuffBO = inIncomeSellStuffBO;
    //        LastChangeFiller.SetChangesInfo(curIncomeSellStuffBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private IncomeSellStuffBO curIncomeSellStuffBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO incomeSellStuff (" +
    //        " 	fee, " +
    //        " 	discount, " +
    //        " 	payDate, " +
    //        " 	checkDate, " +
    //        " 	stuffName, " +
    //        " 	stuffCount, " +
    //        " 	description, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime, " +
    //        " 	checkNumber) " +
    //        " VALUES (" +
    //        " 	@fee, " +
    //        " 	@discount, " +
    //        " 	@payDate, " +
    //        " 	@checkDate, " +
    //        " 	@stuffName, " +
    //        " 	@stuffCount, " +
    //        " 	@description, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime, " +
    //        " 	@checkNumber) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeSellStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeSellStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeSellStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeSellStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curIncomeSellStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curIncomeSellStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curIncomeSellStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeSellStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeSellStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeSellStuffBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeSellStuffBO.CheckNumber);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM incomeSellStuff " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeSellStuffBO.PayID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE incomeSellStuff SET " +
    //        " 	fee = @fee, " +
    //        " 	discount = @discount, " +
    //        " 	payDate = @payDate, " +
    //        " 	checkDate = @checkDate, " +
    //        " 	stuffName = @stuffName, " +
    //        " 	stuffCount = @stuffCount, " +
    //        " 	description = @description, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime, " +
    //        " 	checkNumber = @checkNumber " +
    //        " WHERE (1=1) " +
    //        " AND 	payID = @payID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeSellStuffBO.PayID);
    //        UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeSellStuffBO.Fee);
    //        UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeSellStuffBO.Discount);
    //        UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeSellStuffBO.PayDate);
    //        UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeSellStuffBO.CheckDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curIncomeSellStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curIncomeSellStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curIncomeSellStuffBO.Description);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeSellStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeSellStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeSellStuffBO.LastChangeTime);
    //        UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeSellStuffBO.CheckNumber);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static IncomeSellStuffBO Find(int payID)
    //    {
    //        string commandString = "  SELECT * FROM incomeSellStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (incomeSellStuff.payID = {0}) ", payID.ToString());

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        IncomeSellStuffBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new IncomeSellStuffBO();
    //                ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.PayID]);
    //                ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.Fee]);
    //                ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.Discount]);
    //                ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.PayDate]);
    //                ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckDate]);
    //                ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.StuffName]);
    //                ans.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.StuffCount]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.Description]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeTime]);
    //                ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckNumber]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<IncomeSellStuffBO> List()
    //    {
    //        string commandString = " SELECT * FROM incomeSellStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<IncomeSellStuffBO> ans = new List<IncomeSellStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                IncomeSellStuffBO item = new IncomeSellStuffBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.PayID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckDate]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.StuffName]);
    //                item.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.StuffCount]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeTime]);
    //                item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckNumber]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<IncomeSellStuffBO> List(string payDate, string checkDate, string checkNumber)
    //    {
    //        string commandString = " SELECT * FROM incomeSellStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (payDate != null)
    //        {
    //            wherePart += string.Format(" AND (incomeSellStuff.payDate = '{0}') ", payDate);
    //        }

    //        if (checkDate != null)
    //        {
    //            wherePart += string.Format(" AND (incomeSellStuff.checkDate = '{0}') ", checkDate);
    //        }

    //        if (checkNumber != null)
    //        {
    //            wherePart += string.Format(" AND (incomeSellStuff.checkNumber = '{0}') ", checkNumber);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<IncomeSellStuffBO> ans = new List<IncomeSellStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                IncomeSellStuffBO item = new IncomeSellStuffBO();
    //                item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.PayID]);
    //                item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeSellStuff.Fee]);
    //                item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.Discount]);
    //                item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.PayDate]);
    //                item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckDate]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.StuffName]);
    //                item.StuffCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeSellStuff.StuffCount]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.Description]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.LastChangeTime]);
    //                item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeSellStuff.CheckNumber]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class ViwIncomeOveralDA : DataAccess
    {
        #region Constructors
        public ViwIncomeOveralDA(ViwIncomeOveralBO inViwIncomeOveralBO)
        {
            curViwIncomeOveralBO = inViwIncomeOveralBO;
        }
        #endregion


        #region Variables

        private ViwIncomeOveralBO curViwIncomeOveralBO = null;
        internal static List<ViwIncomeOveralBO> allViwIncomeO = new List<ViwIncomeOveralBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwIncomeOveral (" +
            " 	incomeOveralTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	description, " +
            " 	payName, " +
            " 	checkNumber) " +
            " VALUES (" +
            " 	@incomeOveralTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@description, " +
            " 	@payName, " +
            " 	@checkNumber) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwIncomeOveralBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeID", curViwIncomeOveralBO.IncomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwIncomeOveralBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwIncomeOveralBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwIncomeOveralBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwIncomeOveralBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwIncomeOveralBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payName", curViwIncomeOveralBO.PayName);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwIncomeOveralBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwIncomeOveral " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwIncomeOveral SET " +
            " 	payID = @payID, " +
            " 	incomeOveralTypeID = @incomeOveralTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	description = @description, " +
            " 	payName = @payName, " +
            " 	checkNumber = @checkNumber " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwIncomeOveralBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@incomeOveralTypeID", curViwIncomeOveralBO.IncomeOveralTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwIncomeOveralBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwIncomeOveralBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwIncomeOveralBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwIncomeOveralBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwIncomeOveralBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payName", curViwIncomeOveralBO.PayName);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwIncomeOveralBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwIncomeOveralBO Find()
        {
            string commandString = "  SELECT * FROM viwIncomeOveral ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwIncomeOveralBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwIncomeOveralBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.PayID]);
                    ans.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.IncomeOveralTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckDate]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.Description]);
                    ans.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayName]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckNumber]);

                }
            }
            return ans;
        }

        public static List<ViwIncomeOveralBO> List(int? incomeOveralTypeID, string payDate, string checkDate, string checkNumber)
        {
            string commandString = " SELECT * FROM viwIncomeOveral ";
            string wherePart = " WHERE (1=1) ";
            if (incomeOveralTypeID != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.incomeOveralTypeID = {0}) ", incomeOveralTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwIncomeOveralBO> ans = new List<ViwIncomeOveralBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwIncomeOveralBO item = new ViwIncomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.PayID]);
                    item.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.IncomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwIncomeOveralBO> List()
        {
            string commandString = " SELECT * FROM viwIncomeOveral ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwIncomeOveralBO> ans = new List<ViwIncomeOveralBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwIncomeOveralBO item = new ViwIncomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.PayID]);
                    item.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.IncomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<ViwIncomeOveralBO> List(int? incomeOveralTypeID, string payDateFrom, string payDateTo, string checkDate, string checkNumber)
        {
            string commandString = " SELECT * FROM viwIncomeOveral ";
            string wherePart = " WHERE (1=1) ";
            if (incomeOveralTypeID != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.incomeOveralTypeID = {0}) ", incomeOveralTypeID.ToString());
            }

            if (payDateFrom != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.payDate >= '{0}') ", payDateFrom);
            }

            if (payDateTo != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.payDate <= '{0}') ", payDateTo);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (viwIncomeOveral.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwIncomeOveralBO> ans = new List<ViwIncomeOveralBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwIncomeOveralBO item = new ViwIncomeOveralBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.PayID]);
                    item.IncomeOveralTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.IncomeOveralTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Fee]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwIncomeOveral.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.Description]);
                    item.PayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.PayName]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwIncomeOveral.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
    }

    //public partial class RegistrationDA : DataAccess
    //{
    //    #region Constructors
    //    public RegistrationDA(RegistrationBO inRegistrationBO)
    //    {
    //        curRegistrationBO = inRegistrationBO;
    //        LastChangeFiller.SetChangesInfo(curRegistrationBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private RegistrationBO curRegistrationBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO registration (" +
    //        " 	classID, " +
    //        " 	studentID, " +
    //        " 	registrationDate, " +
    //        " 	activityStatus, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime) " +
    //        " VALUES (" +
    //        " 	@classID, " +
    //        " 	@studentID, " +
    //        " 	@registrationDate, " +
    //        " 	@activityStatus, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);
    //        UtilityDB.AddParameter(command.Parameters, "@registrationDate", curRegistrationBO.RegistrationDate);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curRegistrationBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRegistrationBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRegistrationBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRegistrationBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM registration " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	studentID = @studentID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE registration SET " +
    //        " 	registrationDate = @registrationDate, " +
    //        " 	activityStatus = @activityStatus, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	studentID = @studentID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);
    //        UtilityDB.AddParameter(command.Parameters, "@registrationDate", curRegistrationBO.RegistrationDate);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curRegistrationBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRegistrationBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRegistrationBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRegistrationBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static RegistrationBO Find(int classID, string studentID)
    //    {
    //        if (studentID == null) return null;
    //        string commandString = "  SELECT * FROM registration ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (registration.classID = {0}) ", classID.ToString());

    //        wherePart += string.Format(" AND (registration.studentID = '{0}') ", studentID);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        RegistrationBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new RegistrationBO();
    //                ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
    //                ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
    //                ans.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
    //                ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<RegistrationBO> List()
    //    {
    //        string commandString = " SELECT * FROM registration ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<RegistrationBO> ans = new List<RegistrationBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                RegistrationBO item = new RegistrationBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
    //                item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
    //                item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<RegistrationBO> List(bool? activityStatus)
    //    {
    //        string commandString = " SELECT * FROM registration ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (activityStatus != null)
    //        {
    //            wherePart += string.Format(" AND (registration.activityStatus = {0}) ", activityStatus.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<RegistrationBO> ans = new List<RegistrationBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                RegistrationBO item = new RegistrationBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
    //                item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
    //                item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<RegistrationBO> List(int? classID, string studentID, bool? activityStatus)
    //    {
    //        string commandString = " SELECT * FROM registration ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (classID != null)
    //        {
    //            wherePart += string.Format(" AND (registration.classID = {0}) ", classID.ToString());
    //        }

    //        if (studentID != null)
    //        {
    //            wherePart += string.Format(" AND (registration.studentID = '{0}') ", studentID);
    //        }

    //        if (activityStatus != null)
    //        {
    //            wherePart += string.Format(" AND (registration.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<RegistrationBO> ans = new List<RegistrationBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                RegistrationBO item = new RegistrationBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
    //                item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
    //                item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion

        
    //}

    public partial class RegistrationDA : DataAccess
    {
        #region Constructors
        public RegistrationDA(RegistrationBO inRegistrationBO)
        {
            curRegistrationBO = inRegistrationBO;
            LastChangeFiller.SetChangesInfo(curRegistrationBO);
        }
        #endregion


        #region Variables

        private RegistrationBO curRegistrationBO = null;
        internal static List<RegistrationBO> allregistration = new List<RegistrationBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO registration (" +
            " 	classID, " +
            " 	studentID, " +
            " 	registrationDate, " +
            " 	activityStatus, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	isBalancedFinalWithStudent) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@studentID, " +
            " 	@registrationDate, " +
            " 	@activityStatus, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@isBalancedFinalWithStudent) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@registrationDate", curRegistrationBO.RegistrationDate);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curRegistrationBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRegistrationBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRegistrationBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRegistrationBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithStudent", curRegistrationBO.IsBalancedFinalWithStudent);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM registration " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE registration SET " +
            " 	registrationDate = @registrationDate, " +
            " 	activityStatus = @activityStatus, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	isBalancedFinalWithStudent = @isBalancedFinalWithStudent " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@registrationDate", curRegistrationBO.RegistrationDate);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curRegistrationBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRegistrationBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRegistrationBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRegistrationBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithStudent", curRegistrationBO.IsBalancedFinalWithStudent);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static RegistrationBO Find(int classID, string studentID)
        {
            if (studentID == null) return null;
            string commandString = "  SELECT * FROM registration ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (registration.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (registration.studentID = '{0}') ", studentID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            RegistrationBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new RegistrationBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
                    ans.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);
                    ans.IsBalancedFinalWithStudent = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.IsBalancedFinalWithStudent]);

                }
            }
            return ans;
        }

        public static List<RegistrationBO> List()
        {
            string commandString = " SELECT * FROM registration ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<RegistrationBO> ans = new List<RegistrationBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    RegistrationBO item = new RegistrationBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
                    item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);
                    item.IsBalancedFinalWithStudent = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.IsBalancedFinalWithStudent]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<RegistrationBO> List(bool? activityStatus)
        {
            string commandString = " SELECT * FROM registration ";
            string wherePart = " WHERE (1=1) ";
            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (registration.activityStatus = {0}) ", activityStatus.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<RegistrationBO> ans = new List<RegistrationBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    RegistrationBO item = new RegistrationBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
                    item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);
                    item.IsBalancedFinalWithStudent = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.IsBalancedFinalWithStudent]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<RegistrationBO> List(int? classID, string studentID, bool? activityStatus, bool? isBalancedFinalWithStudent)
        {
            string commandString = " SELECT * FROM registration ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (registration.classID = {0}) ", classID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (registration.studentID = '{0}') ", studentID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (registration.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            if (isBalancedFinalWithStudent != null)
            {
                wherePart += string.Format(" AND (registration.isBalancedFinalWithStudent = {0}) ", isBalancedFinalWithStudent.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<RegistrationBO> ans = new List<RegistrationBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    RegistrationBO item = new RegistrationBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.Registration.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.StudentID]);
                    item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.RegistrationDate]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.ActivityStatus]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.Registration.LastChangeTime]);
                    item.IsBalancedFinalWithStudent = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.Registration.IsBalancedFinalWithStudent]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public bool SetBalanced(bool isBalanced)
        {
            string commandString =
            " UPDATE registration SET " +
            " 	isBalancedFinalWithStudent = @isBalancedFinalWithStudent, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curRegistrationBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curRegistrationBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@isBalancedFinalWithStudent", isBalanced);

            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curRegistrationBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curRegistrationBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curRegistrationBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }
    }


    //public partial class ViwTeacherFinancialStatusDAOld : DataAccess
    //{
    //    #region Constructors
    //    public ViwTeacherFinancialStatusDA(ViwTeacherFinancialStatusBO inViwTeacherFinancialStatusBO)
    //    {
    //        curViwTeacherFinancialStatusBO = inViwTeacherFinancialStatusBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private ViwTeacherFinancialStatusBO curViwTeacherFinancialStatusBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO viwTeacherFinancialStatus (" +
    //        " 	classID, " +
    //        " 	className, " +
    //        " 	teacherID, " +
    //        " 	fullName, " +
    //        " 	heldSessionsValue, " +
    //        " 	havePaidValue, " +
    //        " 	mustPayValue, " +
    //        " 	isSuccessor, " +
    //        " 	description) " +
    //        " VALUES (" +
    //        " 	@classID, " +
    //        " 	@className, " +
    //        " 	@teacherID, " +
    //        " 	@fullName, " +
    //        " 	@heldSessionsValue, " +
    //        " 	@havePaidValue, " +
    //        " 	@mustPayValue, " +
    //        " 	@isSuccessor, " +
    //        " 	@description) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialStatusBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);
    //        UtilityDB.AddParameter(command.Parameters, "@fullName", curViwTeacherFinancialStatusBO.FullName);
    //        UtilityDB.AddParameter(command.Parameters, "@heldSessionsValue", curViwTeacherFinancialStatusBO.HeldSessionsValue);
    //        UtilityDB.AddParameter(command.Parameters, "@havePaidValue", curViwTeacherFinancialStatusBO.HavePaidValue);
    //        UtilityDB.AddParameter(command.Parameters, "@mustPayValue", curViwTeacherFinancialStatusBO.MustPayValue);
    //        UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherFinancialStatusBO.IsSuccessor);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwTeacherFinancialStatusBO.Description);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM viwTeacherFinancialStatus " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	teacherID = @teacherID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE viwTeacherFinancialStatus SET " +
    //        " 	className = @className, " +
    //        " 	fullName = @fullName, " +
    //        " 	heldSessionsValue = @heldSessionsValue, " +
    //        " 	havePaidValue = @havePaidValue, " +
    //        " 	mustPayValue = @mustPayValue, " +
    //        " 	isSuccessor = @isSuccessor, " +
    //        " 	description = @description " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	teacherID = @teacherID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialStatusBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);
    //        UtilityDB.AddParameter(command.Parameters, "@fullName", curViwTeacherFinancialStatusBO.FullName);
    //        UtilityDB.AddParameter(command.Parameters, "@heldSessionsValue", curViwTeacherFinancialStatusBO.HeldSessionsValue);
    //        UtilityDB.AddParameter(command.Parameters, "@havePaidValue", curViwTeacherFinancialStatusBO.HavePaidValue);
    //        UtilityDB.AddParameter(command.Parameters, "@mustPayValue", curViwTeacherFinancialStatusBO.MustPayValue);
    //        UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherFinancialStatusBO.IsSuccessor);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwTeacherFinancialStatusBO.Description);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static ViwTeacherFinancialStatusBO Find(int classID, string teacherID)
    //    {
    //        if (teacherID == null) return null;
    //        string commandString = "  SELECT * FROM viwTeacherFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (viwTeacherFinancialStatus.classID = {0}) ", classID.ToString());

    //        wherePart += string.Format(" AND (viwTeacherFinancialStatus.teacherID = '{0}') ", teacherID);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        ViwTeacherFinancialStatusBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new ViwTeacherFinancialStatusBO();
    //                ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
    //                ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
    //                ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
    //                ans.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FullName]);
    //                ans.HeldSessionsValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HeldSessionsValue]);
    //                ans.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HavePaidValue]);
    //                ans.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayValue]);
    //                ans.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessor]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.Description]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<ViwTeacherFinancialStatusBO> List()
    //    {
    //        string commandString = " SELECT * FROM viwTeacherFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwTeacherFinancialStatusBO> ans = new List<ViwTeacherFinancialStatusBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwTeacherFinancialStatusBO item = new ViwTeacherFinancialStatusBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
    //                item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
    //                item.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FullName]);
    //                item.HeldSessionsValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HeldSessionsValue]);
    //                item.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HavePaidValue]);
    //                item.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayValue]);
    //                item.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessor]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.Description]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<ViwTeacherFinancialStatusBO> List(int? classID, string teacherID, int? heldSessionsValue, int? havePaidValue, int? mustPayValue, bool? isSuccessor)
    //    {
    //        string commandString = " SELECT * FROM viwTeacherFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (classID != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.classID = {0}) ", classID.ToString());
    //        }

    //        if (teacherID != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.teacherID = '{0}') ", teacherID);
    //        }

    //        if (heldSessionsValue != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.heldSessionsValue = {0}) ", heldSessionsValue.ToString());
    //        }

    //        if (havePaidValue != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.havePaidValue = {0}) ", havePaidValue.ToString());
    //        }

    //        if (mustPayValue != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.mustPayValue = {0}) ", mustPayValue.ToString());
    //        }

    //        if (isSuccessor != null)
    //        {
    //            wherePart += string.Format(" AND (viwTeacherFinancialStatus.isSuccessor = {0}) ", isSuccessor.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwTeacherFinancialStatusBO> ans = new List<ViwTeacherFinancialStatusBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwTeacherFinancialStatusBO item = new ViwTeacherFinancialStatusBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
    //                item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
    //                item.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FullName]);
    //                item.HeldSessionsValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HeldSessionsValue]);
    //                item.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.HavePaidValue]);
    //                item.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayValue]);
    //                item.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessor]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.Description]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class ViwClassesPrivateDA : DataAccess
    {
        #region Constructors
        public ViwClassesPrivateDA(ViwClassesPrivateBO inViwClassesPrivateBO)
        {
            curViwClassesPrivateBO = inViwClassesPrivateBO;
        }
        #endregion


        #region Variables

        private ViwClassesPrivateBO curViwClassesPrivateBO = null;
        internal static List<ViwClassesPrivateBO> allViwClassP = new List<ViwClassesPrivateBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwClassesPrivate (" +
            " 	classID, " +
            " 	className, " +
            " 	teacherFirstName, " +
            " 	teacherLastName, " +
            " 	studentFirstName, " +
            " 	studentID, " +
            " 	studentLastName, " +
            " 	registrationDate, " +
            " 	majorName, " +
            " 	teacherID, " +
            " 	majorID) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@className, " +
            " 	@teacherFirstName, " +
            " 	@teacherLastName, " +
            " 	@studentFirstName, " +
            " 	@studentID, " +
            " 	@studentLastName, " +
            " 	@registrationDate, " +
            " 	@majorName, " +
            " 	@teacherID, " +
            " 	@majorID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassesPrivateBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwClassesPrivateBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@teacherFirstName", curViwClassesPrivateBO.TeacherFirstName);
            UtilityDB.AddParameter(command.Parameters, "@teacherLastName", curViwClassesPrivateBO.TeacherLastName);
            UtilityDB.AddParameter(command.Parameters, "@studentFirstName", curViwClassesPrivateBO.StudentFirstName);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwClassesPrivateBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentLastName", curViwClassesPrivateBO.StudentLastName);
            UtilityDB.AddParameter(command.Parameters, "@registrationDate", curViwClassesPrivateBO.RegistrationDate);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curViwClassesPrivateBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwClassesPrivateBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwClassesPrivateBO.MajorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwClassesPrivate " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassesPrivateBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwClassesPrivate SET " +
            " 	className = @className, " +
            " 	teacherFirstName = @teacherFirstName, " +
            " 	teacherLastName = @teacherLastName, " +
            " 	studentFirstName = @studentFirstName, " +
            " 	studentID = @studentID, " +
            " 	studentLastName = @studentLastName, " +
            " 	registrationDate = @registrationDate, " +
            " 	majorName = @majorName, " +
            " 	teacherID = @teacherID, " +
            " 	majorID = @majorID " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassesPrivateBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwClassesPrivateBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@teacherFirstName", curViwClassesPrivateBO.TeacherFirstName);
            UtilityDB.AddParameter(command.Parameters, "@teacherLastName", curViwClassesPrivateBO.TeacherLastName);
            UtilityDB.AddParameter(command.Parameters, "@studentFirstName", curViwClassesPrivateBO.StudentFirstName);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwClassesPrivateBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentLastName", curViwClassesPrivateBO.StudentLastName);
            UtilityDB.AddParameter(command.Parameters, "@registrationDate", curViwClassesPrivateBO.RegistrationDate);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curViwClassesPrivateBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwClassesPrivateBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwClassesPrivateBO.MajorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwClassesPrivateBO Find(int classID)
        {
            string commandString = "  SELECT * FROM viwClassesPrivate ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwClassesPrivate.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwClassesPrivateBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwClassesPrivateBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.ClassID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.ClassName]);
                    ans.TeacherFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherFirstName]);
                    ans.TeacherLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherLastName]);
                    ans.StudentFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentFirstName]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentID]);
                    ans.StudentLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentLastName]);
                    ans.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.RegistrationDate]);
                    ans.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.MajorName]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherID]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.MajorID]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwClassesPrivate.ActivityStatus]);

                }
            }
            return ans;
        }

        public static List<ViwClassesPrivateBO> List()
        {
            string commandString = " SELECT * FROM viwClassesPrivate ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwClassesPrivateBO> ans = new List<ViwClassesPrivateBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwClassesPrivateBO item = new ViwClassesPrivateBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.ClassName]);
                    item.TeacherFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherFirstName]);
                    item.TeacherLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherLastName]);
                    item.StudentFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentFirstName]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentID]);
                    item.StudentLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentLastName]);
                    item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.RegistrationDate]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.MajorName]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherID]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.MajorID]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwClassesPrivate.ActivityStatus]);
                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwClassesPrivateBO> List(int? classID, string studentID, string teacherID, int? majorID, bool? activityStatus)
        {
            string commandString = " SELECT * FROM viwClassesPrivate ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (viwClassesPrivate.classID = {0}) ", classID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwClassesPrivate.studentID = '{0}') ", studentID);
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwClassesPrivate.teacherID = '{0}') ", teacherID);
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND (viwClassesPrivate.majorID = {0}) ", majorID.ToString());
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwClassesPrivate.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwClassesPrivateBO> ans = new List<ViwClassesPrivateBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwClassesPrivateBO item = new ViwClassesPrivateBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.ClassName]);
                    item.TeacherFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherFirstName]);
                    item.TeacherLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherLastName]);
                    item.StudentFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentFirstName]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentID]);
                    item.StudentLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.StudentLastName]);
                    item.RegistrationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.RegistrationDate]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.MajorName]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassesPrivate.TeacherID]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassesPrivate.MajorID]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwClassesPrivate.ActivityStatus]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwTeacherScheduleDA : DataAccess
    {
        #region Constructors
        public ViwTeacherScheduleDA(ViwTeacherScheduleBO inViwTeacherScheduleBO)
        {
            curViwTeacherScheduleBO = inViwTeacherScheduleBO;
        }
        #endregion


        #region Variables

        private ViwTeacherScheduleBO curViwTeacherScheduleBO = null;
        internal static List<ViwTeacherScheduleBO> allViwTeacherSC = new List<ViwTeacherScheduleBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwTeacherSchedule (" +
            " 	teacherID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	classID, " +
            " 	className, " +
            " 	classDate, " +
            " 	timeID, " +
            " 	startHour, " +
            " 	startMin, " +
            " 	finishHour, " +
            " 	finishMin, " +
            " 	dayID, " +
            " 	dayName, " +
            " 	majorName, " +
            " 	majorID) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@classID, " +
            " 	@className, " +
            " 	@classDate, " +
            " 	@timeID, " +
            " 	@startHour, " +
            " 	@startMin, " +
            " 	@finishHour, " +
            " 	@finishMin, " +
            " 	@dayID, " +
            " 	@dayName, " +
            " 	@majorName, " +
            " 	@majorID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherScheduleBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherScheduleBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherScheduleBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherScheduleBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherScheduleBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwTeacherScheduleBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwTeacherScheduleBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@startHour", curViwTeacherScheduleBO.StartHour);
            UtilityDB.AddParameter(command.Parameters, "@startMin", curViwTeacherScheduleBO.StartMin);
            UtilityDB.AddParameter(command.Parameters, "@finishHour", curViwTeacherScheduleBO.FinishHour);
            UtilityDB.AddParameter(command.Parameters, "@finishMin", curViwTeacherScheduleBO.FinishMin);
            UtilityDB.AddParameter(command.Parameters, "@dayID", curViwTeacherScheduleBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@dayName", curViwTeacherScheduleBO.DayName);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curViwTeacherScheduleBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwTeacherScheduleBO.MajorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwTeacherSchedule " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwTeacherSchedule SET " +
            " 	teacherID = @teacherID, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	classID = @classID, " +
            " 	className = @className, " +
            " 	classDate = @classDate, " +
            " 	timeID = @timeID, " +
            " 	startHour = @startHour, " +
            " 	startMin = @startMin, " +
            " 	finishHour = @finishHour, " +
            " 	finishMin = @finishMin, " +
            " 	dayID = @dayID, " +
            " 	dayName = @dayName, " +
            " 	majorName = @majorName, " +
            " 	majorID = @majorID " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherScheduleBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherScheduleBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherScheduleBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherScheduleBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherScheduleBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwTeacherScheduleBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwTeacherScheduleBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@startHour", curViwTeacherScheduleBO.StartHour);
            UtilityDB.AddParameter(command.Parameters, "@startMin", curViwTeacherScheduleBO.StartMin);
            UtilityDB.AddParameter(command.Parameters, "@finishHour", curViwTeacherScheduleBO.FinishHour);
            UtilityDB.AddParameter(command.Parameters, "@finishMin", curViwTeacherScheduleBO.FinishMin);
            UtilityDB.AddParameter(command.Parameters, "@dayID", curViwTeacherScheduleBO.DayID);
            UtilityDB.AddParameter(command.Parameters, "@dayName", curViwTeacherScheduleBO.DayName);
            UtilityDB.AddParameter(command.Parameters, "@majorName", curViwTeacherScheduleBO.MajorName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwTeacherScheduleBO.MajorID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwTeacherScheduleBO Find()
        {
            string commandString = "  SELECT * FROM viwTeacherSchedule ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwTeacherScheduleBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwTeacherScheduleBO();
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.TeacherID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.LastName]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.ClassID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassName]);
                    ans.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassDate]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.TimeID]);
                    ans.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartHour]);
                    ans.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartMin]);
                    ans.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishHour]);
                    ans.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishMin]);
                    ans.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.DayID]);
                    ans.DayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.DayName]);
                    ans.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.MajorName]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.MajorID]);

                }
            }
            return ans;
        }

        public static List<ViwTeacherScheduleBO> List()
        {
            string commandString = " SELECT * FROM viwTeacherSchedule ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherScheduleBO> ans = new List<ViwTeacherScheduleBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherScheduleBO item = new ViwTeacherScheduleBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.LastName]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.TimeID]);
                    item.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartHour]);
                    item.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartMin]);
                    item.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishHour]);
                    item.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishMin]);
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.DayID]);
                    item.DayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.DayName]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.MajorName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.MajorID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwTeacherScheduleBO> List(string teacherID, int? classID, string classDate, int? timeID, int? startHour, int? startMin, int? finishHour, int? finishMin, int? dayID, int? majorID)
        {
            string commandString = " SELECT * FROM viwTeacherSchedule ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.teacherID = '{0}') ", teacherID);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.classID = {0}) ", classID.ToString());
            }

            if (classDate != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.classDate = '{0}') ", classDate);
            }

            if (timeID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.timeID = {0}) ", timeID.ToString());
            }

            if (startHour != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.startHour = {0}) ", startHour.ToString());
            }

            if (startMin != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.startMin = {0}) ", startMin.ToString());
            }

            if (finishHour != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.finishHour = {0}) ", finishHour.ToString());
            }

            if (finishMin != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.finishMin = {0}) ", finishMin.ToString());
            }

            if (dayID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.dayID = {0}) ", dayID.ToString());
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSchedule.majorID = {0}) ", majorID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherScheduleBO> ans = new List<ViwTeacherScheduleBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherScheduleBO item = new ViwTeacherScheduleBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.TeacherID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.LastName]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.TimeID]);
                    item.StartHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartHour]);
                    item.StartMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.StartMin]);
                    item.FinishHour = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishHour]);
                    item.FinishMin = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.FinishMin]);
                    item.DayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.DayID]);
                    item.DayName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.DayName]);
                    item.MajorName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSchedule.MajorName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSchedule.MajorID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwClassHoldDetailsDA : DataAccess
    {
        #region Constructors
        public ViwClassHoldDetailsDA(ViwClassHoldDetailsBO inViwClassHoldDetailsBO)
        {
            curViwClassHoldDetailsBO = inViwClassHoldDetailsBO;
        }
        #endregion


        #region Variables

        private ViwClassHoldDetailsBO curViwClassHoldDetailsBO = null;
        internal static List<ViwClassHoldDetailsBO> allViwClassHD = new List<ViwClassHoldDetailsBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwClassHoldDetails (" +
            " 	classID, " +
            " 	HeldCount, " +
            " 	WillHoldCount, " +
            " 	HeldWithSuccessorTeacherCount, " +
            " 	SuspendendDueTeacherCount, " +
            " 	SuspendedDueStudentCount, " +
            " 	SuspendedDueNotificationCount, " +
            " 	className, " +
            " 	majorID, " +
            " 	teacherID) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@HeldCount, " +
            " 	@WillHoldCount, " +
            " 	@HeldWithSuccessorTeacherCount, " +
            " 	@SuspendendDueTeacherCount, " +
            " 	@SuspendedDueStudentCount, " +
            " 	@SuspendedDueNotificationCount, " +
            " 	@className, " +
            " 	@majorID, " +
            " 	@teacherID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassHoldDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@HeldCount", curViwClassHoldDetailsBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@WillHoldCount", curViwClassHoldDetailsBO.WillHoldCount);
            UtilityDB.AddParameter(command.Parameters, "@HeldWithSuccessorTeacherCount", curViwClassHoldDetailsBO.HeldWithSuccessorTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendendDueTeacherCount", curViwClassHoldDetailsBO.SuspendendDueTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendedDueStudentCount", curViwClassHoldDetailsBO.SuspendedDueStudentCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendedDueNotificationCount", curViwClassHoldDetailsBO.SuspendedDueNotificationCount);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwClassHoldDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwClassHoldDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwClassHoldDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwClassHoldDetails " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassHoldDetailsBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwClassHoldDetails SET " +
            " 	HeldCount = @HeldCount, " +
            " 	WillHoldCount = @WillHoldCount, " +
            " 	HeldWithSuccessorTeacherCount = @HeldWithSuccessorTeacherCount, " +
            " 	SuspendendDueTeacherCount = @SuspendendDueTeacherCount, " +
            " 	SuspendedDueStudentCount = @SuspendedDueStudentCount, " +
            " 	SuspendedDueNotificationCount = @SuspendedDueNotificationCount, " +
            " 	className = @className, " +
            " 	majorID = @majorID, " +
            " 	teacherID = @teacherID " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwClassHoldDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@HeldCount", curViwClassHoldDetailsBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@WillHoldCount", curViwClassHoldDetailsBO.WillHoldCount);
            UtilityDB.AddParameter(command.Parameters, "@HeldWithSuccessorTeacherCount", curViwClassHoldDetailsBO.HeldWithSuccessorTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendendDueTeacherCount", curViwClassHoldDetailsBO.SuspendendDueTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendedDueStudentCount", curViwClassHoldDetailsBO.SuspendedDueStudentCount);
            UtilityDB.AddParameter(command.Parameters, "@SuspendedDueNotificationCount", curViwClassHoldDetailsBO.SuspendedDueNotificationCount);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwClassHoldDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwClassHoldDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwClassHoldDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwClassHoldDetailsBO Find(int classID)
        {
            string commandString = "  SELECT * FROM viwClassHoldDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwClassHoldDetails.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwClassHoldDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwClassHoldDetailsBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.ClassID]);
                    ans.HeldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldCount]);
                    ans.WillHoldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.WillHoldCount]);
                    ans.HeldWithSuccessorTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldWithSuccessorTeacherCount]);
                    ans.SuspendendDueTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendendDueTeacherCount]);
                    ans.SuspendedDueStudentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueStudentCount]);
                    ans.SuspendedDueNotificationCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueNotificationCount]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.ClassName]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.MajorID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.TeacherID]);

                }
            }
            return ans;
        }

        public static List<ViwClassHoldDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwClassHoldDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwClassHoldDetailsBO> ans = new List<ViwClassHoldDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwClassHoldDetailsBO item = new ViwClassHoldDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.ClassID]);
                    item.HeldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldCount]);
                    item.WillHoldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.WillHoldCount]);
                    item.HeldWithSuccessorTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldWithSuccessorTeacherCount]);
                    item.SuspendendDueTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendendDueTeacherCount]);
                    item.SuspendedDueStudentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueStudentCount]);
                    item.SuspendedDueNotificationCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueNotificationCount]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwClassHoldDetailsBO> List(int? classID, int? HeldCount, int? WillHoldCount, int? HeldWithSuccessorTeacherCount, int? SuspendendDueTeacherCount, int? SuspendedDueStudentCount, int? SuspendedDueNotificationCount, int? majorID, string teacherID)
        {
            string commandString = " SELECT * FROM viwClassHoldDetails ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.classID = {0}) ", classID.ToString());
            }

            if (HeldCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.HeldCount = {0}) ", HeldCount.ToString());
            }

            if (WillHoldCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.WillHoldCount = {0}) ", WillHoldCount.ToString());
            }

            if (HeldWithSuccessorTeacherCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.HeldWithSuccessorTeacherCount = {0}) ", HeldWithSuccessorTeacherCount.ToString());
            }

            if (SuspendendDueTeacherCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.SuspendendDueTeacherCount = {0}) ", SuspendendDueTeacherCount.ToString());
            }

            if (SuspendedDueStudentCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.SuspendedDueStudentCount = {0}) ", SuspendedDueStudentCount.ToString());
            }

            if (SuspendedDueNotificationCount != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.SuspendedDueNotificationCount = {0}) ", SuspendedDueNotificationCount.ToString());
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.majorID = {0}) ", majorID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwClassHoldDetails.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwClassHoldDetailsBO> ans = new List<ViwClassHoldDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwClassHoldDetailsBO item = new ViwClassHoldDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.ClassID]);
                    item.HeldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldCount]);
                    item.WillHoldCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.WillHoldCount]);
                    item.HeldWithSuccessorTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.HeldWithSuccessorTeacherCount]);
                    item.SuspendendDueTeacherCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendendDueTeacherCount]);
                    item.SuspendedDueStudentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueStudentCount]);
                    item.SuspendedDueNotificationCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.SuspendedDueNotificationCount]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.ClassName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwClassHoldDetails.MajorID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwClassHoldDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    //public partial class ObseleteViwStudentFinancialStatusDA : DataAccess
    //{
    //    #region Constructors
    //    public ViwStudentFinancialStatusDA(ViwStudentFinancialStatusBO inViwStudentFinancialStatusBO)
    //    {
    //        curViwStudentFinancialStatusBO = inViwStudentFinancialStatusBO;
    //    }
    //    #endregion


    //    #region Variables

    //    private ViwStudentFinancialStatusBO curViwStudentFinancialStatusBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO viwStudentFinancialStatus (" +
    //        " 	classID, " +
    //        " 	className, " +
    //        " 	studentID, " +
    //        " 	fullName, " +
    //        " 	registerationFee, " +
    //        " 	havePaidValue, " +
    //        " 	mustPayValue, " +
    //        " 	description) " +
    //        " VALUES (" +
    //        " 	@classID, " +
    //        " 	@className, " +
    //        " 	@studentID, " +
    //        " 	@fullName, " +
    //        " 	@registerationFee, " +
    //        " 	@havePaidValue, " +
    //        " 	@mustPayValue, " +
    //        " 	@description) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialStatusBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);
    //        UtilityDB.AddParameter(command.Parameters, "@fullName", curViwStudentFinancialStatusBO.FullName);
    //        UtilityDB.AddParameter(command.Parameters, "@registerationFee", curViwStudentFinancialStatusBO.RegisterationFee);
    //        UtilityDB.AddParameter(command.Parameters, "@havePaidValue", curViwStudentFinancialStatusBO.HavePaidValue);
    //        UtilityDB.AddParameter(command.Parameters, "@mustPayValue", curViwStudentFinancialStatusBO.MustPayValue);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwStudentFinancialStatusBO.Description);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM viwStudentFinancialStatus " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	studentID = @studentID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE viwStudentFinancialStatus SET " +
    //        " 	className = @className, " +
    //        " 	fullName = @fullName, " +
    //        " 	registerationFee = @registerationFee, " +
    //        " 	havePaidValue = @havePaidValue, " +
    //        " 	mustPayValue = @mustPayValue, " +
    //        " 	description = @description " +
    //        " WHERE (1=1) " +
    //        " AND 	classID = @classID  " +
    //        " AND 	studentID = @studentID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
    //        UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialStatusBO.ClassName);
    //        UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);
    //        UtilityDB.AddParameter(command.Parameters, "@fullName", curViwStudentFinancialStatusBO.FullName);
    //        UtilityDB.AddParameter(command.Parameters, "@registerationFee", curViwStudentFinancialStatusBO.RegisterationFee);
    //        UtilityDB.AddParameter(command.Parameters, "@havePaidValue", curViwStudentFinancialStatusBO.HavePaidValue);
    //        UtilityDB.AddParameter(command.Parameters, "@mustPayValue", curViwStudentFinancialStatusBO.MustPayValue);
    //        UtilityDB.AddParameter(command.Parameters, "@description", curViwStudentFinancialStatusBO.Description);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static ViwStudentFinancialStatusBO Find(int classID, string studentID)
    //    {
    //        if (studentID == null) return null;
    //        string commandString = " SELECT * FROM viwStudentFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (viwStudentFinancialStatus.classID = {0}) ", classID.ToString());

    //        wherePart += string.Format(" AND (viwStudentFinancialStatus.studentID = '{0}') ", studentID);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        ViwStudentFinancialStatusBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new ViwStudentFinancialStatusBO();
    //                ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
    //                ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
    //                ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
    //                ans.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FullName]);
    //                ans.RegisterationFee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.RegisterationFee]);
    //                ans.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.HavePaidValue]);
    //                ans.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.MustPayValue]);
    //                ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.Description]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<ViwStudentFinancialStatusBO> List()
    //    {
    //        string commandString = " SELECT * FROM viwStudentFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwStudentFinancialStatusBO> ans = new List<ViwStudentFinancialStatusBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwStudentFinancialStatusBO item = new ViwStudentFinancialStatusBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
    //                item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
    //                item.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FullName]);
    //                item.RegisterationFee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.RegisterationFee]);
    //                item.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.HavePaidValue]);
    //                item.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.MustPayValue]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.Description]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<ViwStudentFinancialStatusBO> List(int? classID, string studentID)
    //    {
    //        string commandString = " SELECT * FROM viwStudentFinancialStatus ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (classID != null)
    //        {
    //            wherePart += string.Format(" AND (viwStudentFinancialStatus.classID = {0}) ", classID.ToString());
    //        }

    //        if (studentID != null)
    //        {
    //            wherePart += string.Format(" AND (viwStudentFinancialStatus.studentID = '{0}') ", studentID);
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<ViwStudentFinancialStatusBO> ans = new List<ViwStudentFinancialStatusBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                ViwStudentFinancialStatusBO item = new ViwStudentFinancialStatusBO();
    //                item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
    //                item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
    //                item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
    //                item.FullName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FullName]);
    //                item.RegisterationFee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.RegisterationFee]);
    //                item.HavePaidValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.HavePaidValue]);
    //                item.MustPayValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.MustPayValue]);
    //                item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.Description]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class SessionPresenceDA : DataAccess
    {
        #region Constructors
        public SessionPresenceDA(SessionPresenceBO inSessionPresenceBO)
        {
            curSessionPresenceBO = inSessionPresenceBO;
            LastChangeFiller.SetChangesInfo(curSessionPresenceBO);
        }
        #endregion


        #region Variables

        private SessionPresenceBO curSessionPresenceBO = null;
        internal static List<SessionPresenceBO> allSessionP = new List<SessionPresenceBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO sessionPresence (" +
            " 	classID, " +
            " 	classDate, " +
            " 	timeID, " +
            " 	studentID, " +
            " 	presenceStatusID, " +
            " 	description, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@classDate, " +
            " 	@timeID, " +
            " 	@studentID, " +
            " 	@presenceStatusID, " +
            " 	@description, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curSessionPresenceBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curSessionPresenceBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curSessionPresenceBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curSessionPresenceBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusID", curSessionPresenceBO.PresenceStatusID);
            UtilityDB.AddParameter(command.Parameters, "@description", curSessionPresenceBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curSessionPresenceBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curSessionPresenceBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curSessionPresenceBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM sessionPresence " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curSessionPresenceBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curSessionPresenceBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curSessionPresenceBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curSessionPresenceBO.StudentID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE sessionPresence SET " +
            " 	presenceStatusID = @presenceStatusID, " +
            " 	description = @description, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curSessionPresenceBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curSessionPresenceBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curSessionPresenceBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curSessionPresenceBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusID", curSessionPresenceBO.PresenceStatusID);
            UtilityDB.AddParameter(command.Parameters, "@description", curSessionPresenceBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curSessionPresenceBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curSessionPresenceBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curSessionPresenceBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static SessionPresenceBO Find(int classID, string classDate, int timeID, string studentID)
        {
            if (classDate == null || studentID == null) return null;
            string commandString = "  SELECT * FROM sessionPresence ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (sessionPresence.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (sessionPresence.classDate = '{0}') ", classDate);
            wherePart += string.Format(" AND (sessionPresence.timeID = {0}) ", timeID.ToString());

            wherePart += string.Format(" AND (sessionPresence.studentID = '{0}') ", studentID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            SessionPresenceBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new SessionPresenceBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.ClassID]);
                    ans.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.ClassDate]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.TimeID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.StudentID]);
                    ans.PresenceStatusID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.PresenceStatusID]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.Description]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<SessionPresenceBO> List()
        {
            string commandString = " SELECT * FROM sessionPresence ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<SessionPresenceBO> ans = new List<SessionPresenceBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    SessionPresenceBO item = new SessionPresenceBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.TimeID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.StudentID]);
                    item.PresenceStatusID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.PresenceStatusID]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<SessionPresenceBO> List(int? classID, string classDate, int? timeID, string studentID, int? presenceStatusID)
        {
            string commandString = " SELECT * FROM sessionPresence ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (sessionPresence.classID = {0}) ", classID.ToString());
            }

            if (classDate != null)
            {
                wherePart += string.Format(" AND (sessionPresence.classDate = '{0}') ", classDate);
            }

            if (timeID != null)
            {
                wherePart += string.Format(" AND (sessionPresence.timeID = {0}) ", timeID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (sessionPresence.studentID = '{0}') ", studentID);
            }

            if (presenceStatusID != null)
            {
                wherePart += string.Format(" AND (sessionPresence.presenceStatusID = {0}) ", presenceStatusID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<SessionPresenceBO> ans = new List<SessionPresenceBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    SessionPresenceBO item = new SessionPresenceBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.ClassID]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.TimeID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.StudentID]);
                    item.PresenceStatusID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SessionPresence.PresenceStatusID]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SessionPresence.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class PresenceStatusDA : DataAccess
    {
        #region Constructors
        public PresenceStatusDA(PresenceStatusBO inPresenceStatusBO)
        {
            curPresenceStatusBO = inPresenceStatusBO;
            LastChangeFiller.SetChangesInfo(curPresenceStatusBO);
        }
        #endregion


        #region Variables

        private PresenceStatusBO curPresenceStatusBO = null;
        
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO presenceStatus (" +
            " 	presenceStatusID, " +
            " 	presenceStatusName, " +
            " 	presenceStatusDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@presenceStatusID, " +
            " 	@presenceStatusName, " +
            " 	@presenceStatusDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusID", curPresenceStatusBO.PresenceStatusID);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusName", curPresenceStatusBO.PresenceStatusName);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusDescription", curPresenceStatusBO.PresenceStatusDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curPresenceStatusBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curPresenceStatusBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curPresenceStatusBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM presenceStatus " +
            " WHERE (1=1) " +
            " AND 	presenceStatusID = @presenceStatusID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusID", curPresenceStatusBO.PresenceStatusID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE presenceStatus SET " +
            " 	presenceStatusName = @presenceStatusName, " +
            " 	presenceStatusDescription = @presenceStatusDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	presenceStatusID = @presenceStatusID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusID", curPresenceStatusBO.PresenceStatusID);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusName", curPresenceStatusBO.PresenceStatusName);
            UtilityDB.AddParameter(command.Parameters, "@presenceStatusDescription", curPresenceStatusBO.PresenceStatusDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curPresenceStatusBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curPresenceStatusBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curPresenceStatusBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static PresenceStatusBO Find(int presenceStatusID)
        {
            string commandString = "  SELECT * FROM presenceStatus ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (presenceStatus.presenceStatusID = {0}) ", presenceStatusID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            PresenceStatusBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new PresenceStatusBO();
                    ans.PresenceStatusID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.PresenceStatus.PresenceStatusID]);
                    ans.PresenceStatusName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.PresenceStatusName]);
                    ans.PresenceStatusDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.PresenceStatusDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<PresenceStatusBO> List()
        {
            string commandString = " SELECT * FROM presenceStatus ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<PresenceStatusBO> ans = new List<PresenceStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    PresenceStatusBO item = new PresenceStatusBO();
                    item.PresenceStatusID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.PresenceStatus.PresenceStatusID]);
                    item.PresenceStatusName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.PresenceStatusName]);
                    item.PresenceStatusDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.PresenceStatusDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.PresenceStatus.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class IncomeStudentDA : DataAccess
    {
        #region Constructors
        public IncomeStudentDA(IncomeStudentBO inIncomeStudentBO)
        {
            curIncomeStudentBO = inIncomeStudentBO;
            LastChangeFiller.SetChangesInfo(curIncomeStudentBO);
        }
        #endregion


        #region Variables

        private IncomeStudentBO curIncomeStudentBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeStudent (" +
            //" 	payID, " +
            " 	studentID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	classID, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            //" 	@payID, " +
            " 	@studentID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@classID, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            //UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeStudentBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curIncomeStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeStudentBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeStudentBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeStudentBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeStudentBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeStudentBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeStudentBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeStudentBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curIncomeStudentBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeStudent " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeStudentBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeStudent SET " +
            " 	studentID = @studentID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	classID = @classID, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeStudentBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curIncomeStudentBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeStudentBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeStudentBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeStudentBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeStudentBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeStudentBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeStudentBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeStudentBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curIncomeStudentBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeStudentBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeStudentBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeStudentBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeStudentBO Find(int payID)
        {
            string commandString = "  SELECT * FROM incomeStudent ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeStudent.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeStudentBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeStudentBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.StudentID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStudent.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.Description]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.ClassID]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<IncomeStudentBO> List()
        {
            string commandString = " SELECT * FROM incomeStudent ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeStudentBO> ans = new List<IncomeStudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeStudentBO item = new IncomeStudentBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.StudentID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStudent.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<IncomeStudentBO> List(int? payID, string studentID, int? payTypeID, string payDate, string checkDate, string checkNumber, int? classID)
        {
            string commandString = " SELECT * FROM incomeStudent ";
            string wherePart = " WHERE (1=1) ";
            if (payID != null)
            {
                wherePart += string.Format(" AND (incomeStudent.payID = {0}) ", payID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (incomeStudent.studentID = '{0}') ", studentID);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (incomeStudent.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (incomeStudent.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (incomeStudent.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (incomeStudent.checkNumber = '{0}') ", checkNumber);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (incomeStudent.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeStudentBO> ans = new List<IncomeStudentBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeStudentBO item = new IncomeStudentBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.StudentID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStudent.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStudent.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStudent.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class IncomeTeacherDA : DataAccess
    {
        #region Constructors
        public IncomeTeacherDA(IncomeTeacherBO inIncomeTeacherBO)
        {
            curIncomeTeacherBO = inIncomeTeacherBO;
            LastChangeFiller.SetChangesInfo(curIncomeTeacherBO);
        }
        #endregion


        #region Variables

        private IncomeTeacherBO curIncomeTeacherBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeTeacher (" +
            " 	teacherID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	classID, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@classID, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curIncomeTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeTeacherBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeTeacherBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeTeacherBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeTeacherBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeTeacherBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeTeacherBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeTeacherBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curIncomeTeacherBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeTeacher " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeTeacherBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeTeacher SET " +
            " 	teacherID = @teacherID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	classID = @classID, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeTeacherBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curIncomeTeacherBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeTeacherBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeTeacherBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeTeacherBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeTeacherBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeTeacherBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeTeacherBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeTeacherBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@classID", curIncomeTeacherBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeTeacherBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeTeacherBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeTeacherBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeTeacherBO Find(int payID)
        {
            string commandString = "  SELECT * FROM incomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeTeacher.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeTeacherBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeTeacherBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.TeacherID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTeacher.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.Description]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.ClassID]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<IncomeTeacherBO> List(string teacherID, int? payTypeID, int? classID)
        {
            string commandString = " SELECT * FROM incomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (incomeTeacher.teacherID = '{0}') ", teacherID);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (incomeTeacher.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (incomeTeacher.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeTeacherBO> ans = new List<IncomeTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeTeacherBO item = new IncomeTeacherBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.TeacherID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTeacher.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<IncomeTeacherBO> List()
        {
            string commandString = " SELECT * FROM incomeTeacher ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeTeacherBO> ans = new List<IncomeTeacherBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeTeacherBO item = new IncomeTeacherBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.TeacherID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeTeacher.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.Description]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeTeacher.ClassID]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeTeacher.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }


    //public partial class StoreStuffDAOLD : DataAccess
    //{
    //    #region Constructors
    //    public StoreStuffDA(StoreStuffBO inStoreStuffBO)
    //    {
    //        curStoreStuffBO = inStoreStuffBO;
    //        LastChangeFiller.SetChangesInfo(curStoreStuffBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private StoreStuffBO curStoreStuffBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO storeStuff (" +
    //        " 	stuffID, " +
    //        " 	stuffTypeID, " +
    //        " 	stuffName, " +
    //        " 	buyDate, " +
    //        " 	stuffCount, " +
    //        " 	activityStatus, " +
    //        " 	isBalanced, " +
    //        " 	isSalesPersonAware, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime) " +
    //        " VALUES (" +
    //        " 	@stuffID, " +
    //        " 	@stuffTypeID, " +
    //        " 	@stuffName, " +
    //        " 	@buyDate, " +
    //        " 	@stuffCount, " +
    //        " 	@activityStatus, " +
    //        " 	@isBalanced, " +
    //        " 	@isSalesPersonAware, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStoreStuffBO.StuffTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curStoreStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@buyDate", curStoreStuffBO.BuyDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curStoreStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreStuffBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@isBalanced", curStoreStuffBO.IsBalanced);
    //        UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curStoreStuffBO.IsSalesPersonAware);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreStuffBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM storeStuff " +
    //        " WHERE (1=1) " +
    //        " AND 	stuffID = @stuffID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE storeStuff SET " +
    //        " 	stuffTypeID = @stuffTypeID, " +
    //        " 	stuffName = @stuffName, " +
    //        " 	buyDate = @buyDate, " +
    //        " 	stuffCount = @stuffCount, " +
    //        " 	activityStatus = @activityStatus, " +
    //        " 	isBalanced = @isBalanced, " +
    //        " 	isSalesPersonAware = @isSalesPersonAware, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime " +
    //        " WHERE (1=1) " +
    //        " AND 	stuffID = @stuffID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStoreStuffBO.StuffTypeID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffName", curStoreStuffBO.StuffName);
    //        UtilityDB.AddParameter(command.Parameters, "@buyDate", curStoreStuffBO.BuyDate);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffCount", curStoreStuffBO.StuffCount);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreStuffBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@isBalanced", curStoreStuffBO.IsBalanced);
    //        UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curStoreStuffBO.IsSalesPersonAware);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreStuffBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreStuffBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreStuffBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static StoreStuffBO Find(string stuffID)
    //    {
    //        if (stuffID == null) return null;
    //        string commandString = "  SELECT * FROM storeStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (storeStuff.stuffID = '{0}') ", stuffID);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        StoreStuffBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new StoreStuffBO();
    //                ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
    //                ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
    //                ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
    //                ans.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
    //                ans.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
    //                ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
    //                ans.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
    //                ans.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<StoreStuffBO> List()
    //    {
    //        string commandString = " SELECT * FROM storeStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<StoreStuffBO> ans = new List<StoreStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                StoreStuffBO item = new StoreStuffBO();
    //                item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
    //                item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
    //                item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
    //                item.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
    //                item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
    //                item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<StoreStuffBO> List(int? stuffTypeID, string buyDate, bool? activityStatus, bool? isBalanced, bool? isSalesPersonAware)
    //    {
    //        string commandString = " SELECT * FROM storeStuff ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (stuffTypeID != null)
    //        {
    //            wherePart += string.Format(" AND (storeStuff.stuffTypeID = {0}) ", stuffTypeID.ToString());
    //        }

    //        if (buyDate != null)
    //        {
    //            wherePart += string.Format(" AND (storeStuff.buyDate = '{0}') ", buyDate);
    //        }

    //        if (activityStatus != null)
    //        {
    //            wherePart += string.Format(" AND (storeStuff.activityStatus = {0}) ", activityStatus.ToString());
    //        }

    //        if (isBalanced != null)
    //        {
    //            wherePart += string.Format(" AND (storeStuff.isBalanced = {0}) ", isBalanced.ToString());
    //        }

    //        if (isSalesPersonAware != null)
    //        {
    //            wherePart += string.Format(" AND (storeStuff.isSalesPersonAware = {0}) ", isSalesPersonAware.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<StoreStuffBO> ans = new List<StoreStuffBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                StoreStuffBO item = new StoreStuffBO();
    //                item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
    //                item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
    //                item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
    //                item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
    //                item.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
    //                item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
    //                item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion

    //    public static List<string> GetKeyPattern(string pattern)
    //    {
    //        string commandString = " SELECT stuffID FROM storeStuff ";
    //        string wherePart = string.Format(" WHERE (1=1) and stuffID like '{0}%'", pattern);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<string> ans = new List<string>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                string item = "";
    //                item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);

    //                ans.Add(item);

    //            }
    //        }
    //        return ans;
    //    }
    //}

    public partial class StoreStuffDA : DataAccess
    {
        #region Constructors
        public StoreStuffDA(StoreStuffBO inStoreStuffBO)
        {
            curStoreStuffBO = inStoreStuffBO;
            LastChangeFiller.SetChangesInfo(curStoreStuffBO);
        }
        #endregion


        #region Variables

        private StoreStuffBO curStoreStuffBO = null;
        internal static List<StoreStuffBO> allStuff = new List<StoreStuffBO>(); //hanieh
        internal static List<StoreStuffBO> allActiveStuff = new List<StoreStuffBO>(); //hanieh
        #endregion

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT stuffID FROM storeStuff ";
            string wherePart = string.Format(" WHERE (1=1) and stuffID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);

                    ans.Add(item);

                }
            }
            return ans;
        }

        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO storeStuff (" +
            " 	stuffID, " +
            " 	stuffTypeID, " +
            " 	stuffName, " +
            " 	buyDate, " +
            " 	stuffCount, " +
            " 	activityStatus, " +
            " 	isBalanced, " +
            " 	isSalesPersonAware, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	stuffPrice) " +
            " VALUES (" +
            " 	@stuffID, " +
            " 	@stuffTypeID, " +
            " 	@stuffName, " +
            " 	@buyDate, " +
            " 	@stuffCount, " +
            " 	@activityStatus, " +
            " 	@isBalanced, " +
            " 	@isSalesPersonAware, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@stuffPrice) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStoreStuffBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curStoreStuffBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@buyDate", curStoreStuffBO.BuyDate);
            UtilityDB.AddParameter(command.Parameters, "@stuffCount", curStoreStuffBO.StuffCount);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreStuffBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isBalanced", curStoreStuffBO.IsBalanced);
            UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curStoreStuffBO.IsSalesPersonAware);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreStuffBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreStuffBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreStuffBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@stuffPrice", curStoreStuffBO.StuffPrice);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM storeStuff " +
            " WHERE (1=1) " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE storeStuff SET " +
            " 	stuffTypeID = @stuffTypeID, " +
            " 	stuffName = @stuffName, " +
            " 	buyDate = @buyDate, " +
            " 	stuffCount = @stuffCount, " +
            " 	activityStatus = @activityStatus, " +
            " 	isBalanced = @isBalanced, " +
            " 	isSalesPersonAware = @isSalesPersonAware, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	stuffPrice = @stuffPrice " +
            " WHERE (1=1) " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreStuffBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStoreStuffBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curStoreStuffBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@buyDate", curStoreStuffBO.BuyDate);
            UtilityDB.AddParameter(command.Parameters, "@stuffCount", curStoreStuffBO.StuffCount);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreStuffBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isBalanced", curStoreStuffBO.IsBalanced);
            UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curStoreStuffBO.IsSalesPersonAware);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreStuffBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreStuffBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreStuffBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@stuffPrice", curStoreStuffBO.StuffPrice);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static StoreStuffBO Find(string stuffID)
        {
            if (stuffID == null) return null;
            string commandString = "  SELECT * FROM storeStuff ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (storeStuff.stuffID = '{0}') ", stuffID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            StoreStuffBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new StoreStuffBO();
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
                    ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
                    ans.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
                    ans.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
                    ans.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
                    ans.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);
                    ans.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffPrice]);

                }
            }
            return ans;
        }

        public static List<StoreStuffBO> List(int? stuffTypeID, string buyDate, int? stuffCount, bool? activityStatus, bool? isBalanced, bool? isSalesPersonAware, int? stuffPrice)
        {
            string commandString = " SELECT [stuffID],[stuffTypeID],[stuffName],[buyDate],[stuffPrice],[stuffCount],[activityStatus],[isBalanced],[isSalesPersonAware] FROM storeStuff ";
            string wherePart = " WHERE (1=1) ";
            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (storeStuff.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (buyDate != null)
            {
                wherePart += string.Format(" AND (storeStuff.buyDate = '{0}') ", buyDate);
            }

            if (stuffCount != null)
            {
                wherePart += string.Format(" AND (storeStuff.stuffCount = {0}) ", stuffCount.ToString());
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (storeStuff.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            if (isBalanced != null)
            {
                wherePart += string.Format(" AND (storeStuff.isBalanced = {0}) ", UtilityDB.GetDBString(isBalanced));
            }

            if (isSalesPersonAware != null)
            {
                wherePart += string.Format(" AND (storeStuff.isSalesPersonAware = {0}) ", UtilityDB.GetDBString(isSalesPersonAware));
            }

            if (stuffPrice != null)
            {
                wherePart += string.Format(" AND (storeStuff.stuffPrice = {0}) ", stuffPrice.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreStuffBO> ans = new List<StoreStuffBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreStuffBO item = new StoreStuffBO();
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
                    item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
                    item.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
                    item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
                    item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffPrice]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<StoreStuffBO> List()
        {
            string commandString = " SELECT [stuffID],[stuffTypeID],[stuffName],[buyDate],[stuffPrice],[stuffCount],[activityStatus],[isBalanced],[isSalesPersonAware] FROM storeStuff ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreStuffBO> ans = new List<StoreStuffBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreStuffBO item = new StoreStuffBO();
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
                    item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
                    item.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
                    item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
                    item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffPrice]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<StoreStuffBO> ListDeactiveCandidates(string stuffID)
        {
            string commandString = " SELECT * FROM viwDeactiveCandidatesStoreStuff ";
            string wherePart = " WHERE (1=1) ";
            if (stuffID != null)
            {
                wherePart += string.Format(" AND (stuffID = '{0}') ", stuffID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreStuffBO> ans = new List<StoreStuffBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreStuffBO item = new StoreStuffBO();
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.StuffName]);
                    item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.BuyDate]);
                    item.StuffCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffCount]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.ActivityStatus]);
                    item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsBalanced]);
                    item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreStuff.IsSalesPersonAware]);
                    //item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeID]);
                    //item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeDate]);
                    //item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreStuff.LastChangeTime]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreStuff.StuffPrice]);
                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }


    //public partial class StoreShopDA : DataAccess
    //{
    //    #region Constructors
    //    public StoreShopDA(StoreShopBO inStoreShopBO)
    //    {
    //        curStoreShopBO = inStoreShopBO;
    //        LastChangeFiller.SetChangesInfo(curStoreShopBO);
    //    }
    //    #endregion


    //    #region Variables

    //    private StoreShopBO curStoreShopBO = null;
    //    #endregion


    //    #region Methods

    //    public override bool Add()
    //    {
    //        string commandString =
    //        " INSERT INTO storeShop (" +
    //        " 	shopID, " +
    //        " 	stuffID, " +
    //        " 	customerID, " +
    //        " 	customerName, " +
    //        " 	shopCount, " +
    //        " 	shopDescription, " +
    //        " 	activityStatus, " +
    //        " 	isManagerAware, " +
    //        " 	lastChangeID, " +
    //        " 	lastChangeDate, " +
    //        " 	lastChangeTime) " +
    //        " VALUES (" +
    //        " 	@shopID, " +
    //        " 	@stuffID, " +
    //        " 	@customerID, " +
    //        " 	@customerName, " +
    //        " 	@shopCount, " +
    //        " 	@shopDescription, " +
    //        " 	@activityStatus, " +
    //        " 	@isManagerAware, " +
    //        " 	@lastChangeID, " +
    //        " 	@lastChangeDate, " +
    //        " 	@lastChangeTime) ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreShopBO.StuffID);
    //        UtilityDB.AddParameter(command.Parameters, "@customerID", curStoreShopBO.CustomerID);
    //        UtilityDB.AddParameter(command.Parameters, "@customerName", curStoreShopBO.CustomerName);
    //        UtilityDB.AddParameter(command.Parameters, "@shopCount", curStoreShopBO.ShopCount);
    //        UtilityDB.AddParameter(command.Parameters, "@shopDescription", curStoreShopBO.ShopDescription);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreShopBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curStoreShopBO.IsManagerAware);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreShopBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreShopBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreShopBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Delete()
    //    {
    //        string commandString =
    //        " DELETE FROM storeShop " +
    //        " WHERE (1=1) " +
    //        " AND 	shopID = @shopID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public override bool Update()
    //    {
    //        string commandString =
    //        " UPDATE storeShop SET " +
    //        " 	stuffID = @stuffID, " +
    //        " 	customerID = @customerID, " +
    //        " 	customerName = @customerName, " +
    //        " 	shopCount = @shopCount, " +
    //        " 	shopDescription = @shopDescription, " +
    //        " 	activityStatus = @activityStatus, " +
    //        " 	isManagerAware = @isManagerAware, " +
    //        " 	lastChangeID = @lastChangeID, " +
    //        " 	lastChangeDate = @lastChangeDate, " +
    //        " 	lastChangeTime = @lastChangeTime " +
    //        " WHERE (1=1) " +
    //        " AND 	shopID = @shopID ";

    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;

    //        // Adding Parameters...
    //        UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);
    //        UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreShopBO.StuffID);
    //        UtilityDB.AddParameter(command.Parameters, "@customerID", curStoreShopBO.CustomerID);
    //        UtilityDB.AddParameter(command.Parameters, "@customerName", curStoreShopBO.CustomerName);
    //        UtilityDB.AddParameter(command.Parameters, "@shopCount", curStoreShopBO.ShopCount);
    //        UtilityDB.AddParameter(command.Parameters, "@shopDescription", curStoreShopBO.ShopDescription);
    //        UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreShopBO.ActivityStatus);
    //        UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curStoreShopBO.IsManagerAware);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreShopBO.LastChangeID);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreShopBO.LastChangeDate);
    //        UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreShopBO.LastChangeTime);

    //        // Doing Database part...
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            if ((JobLogger.RunCommandNonQuery(command)) == 1)
    //                return true;
    //            else
    //                return false;
    //        }
    //    }

    //    public static StoreShopBO Find(string shopID)
    //    {
    //        if (shopID == null) return null;
    //        string commandString = "  SELECT * FROM storeShop ";
    //        string wherePart = " WHERE (1=1) ";
    //        wherePart += string.Format(" AND (storeShop.shopID = '{0}') ", shopID);
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        StoreShopBO ans = null;
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            if (reader.Read())
    //            {
    //                ans = new StoreShopBO();
    //                ans.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
    //                ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
    //                ans.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
    //                ans.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
    //                ans.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
    //                ans.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
    //                ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
    //                ans.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
    //                ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
    //                ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
    //                ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);

    //            }
    //        }
    //        return ans;
    //    }

    //    public static List<StoreShopBO> List()
    //    {
    //        string commandString = " SELECT * FROM storeShop ";
    //        string wherePart = " WHERE (1=1) ";
    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<StoreShopBO> ans = new List<StoreShopBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                StoreShopBO item = new StoreShopBO();
    //                item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
    //                item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
    //                item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
    //                item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
    //                item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
    //                item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
    //                item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    public static List<StoreShopBO> List(string stuffID, string customerID, string customerName, int? shopCount, string shopDescription, bool? activityStatus, bool? isManagerAware)
    //    {
    //        string commandString = " SELECT * FROM storeShop ";
    //        string wherePart = " WHERE (1=1) ";
    //        if (stuffID != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.stuffID = '{0}') ", stuffID);
    //        }

    //        if (customerID != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.customerID = '{0}') ", customerID);
    //        }

    //        if (customerName != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.customerName = '{0}') ", customerName);
    //        }

    //        if (shopCount != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.shopCount = {0}) ", shopCount.ToString());
    //        }

    //        if (shopDescription != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.shopDescription = '{0}') ", shopDescription);
    //        }

    //        if (activityStatus != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.activityStatus = {0}) ", activityStatus.ToString());
    //        }

    //        if (isManagerAware != null)
    //        {
    //            wherePart += string.Format(" AND (storeShop.isManagerAware = {0}) ", isManagerAware.ToString());
    //        }

    //        commandString += wherePart;
    //        SqlCommand command = new SqlCommand();
    //        command.CommandText = commandString;
    //        List<StoreShopBO> ans = new List<StoreShopBO>();
    //        using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
    //        {
    //            checkConnectionState(connection);  connection.Open();
    //            command.Connection = connection;
    //            SqlDataReader reader = (JobLogger.RunCommandReader(command));
    //            while (reader.Read())
    //            {
    //                StoreShopBO item = new StoreShopBO();
    //                item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
    //                item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
    //                item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
    //                item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
    //                item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
    //                item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
    //                item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
    //                item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
    //                item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
    //                item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
    //                item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);

    //                ans.Add(item);
    //            }
    //        }
    //        return ans;
    //    }
    //    #endregion
    //}

    public partial class StoreShopDA : DataAccess
    {
        #region Constructors
        public StoreShopDA(StoreShopBO inStoreShopBO)
        {
            curStoreShopBO = inStoreShopBO;
            LastChangeFiller.SetChangesInfo(curStoreShopBO);
        }
        #endregion


        #region Variables

        private StoreShopBO curStoreShopBO = null;
        internal static List<StoreShopBO> allStore = new List<StoreShopBO>(); //hanieh
        #endregion

        public static List<string> GetKeyPattern(string pattern)
        {
            string commandString = " SELECT shopID FROM storeShop ";
            string wherePart = string.Format(" WHERE (1=1) and shopID like '{0}%'", pattern);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<string> ans = new List<string>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    string item = "";
                    item = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);

                    ans.Add(item);

                }
            }
            return ans;
        }

        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO storeShop (" +
            " 	shopID, " +
            " 	stuffID, " +
            " 	customerID, " +
            " 	customerName, " +
            " 	shopCount, " +
            " 	shopDescription, " +
            " 	activityStatus, " +
            " 	isManagerAware, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	shopDate) " +
            " VALUES (" +
            " 	@shopID, " +
            " 	@stuffID, " +
            " 	@customerID, " +
            " 	@customerName, " +
            " 	@shopCount, " +
            " 	@shopDescription, " +
            " 	@activityStatus, " +
            " 	@isManagerAware, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@shopDate) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreShopBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@customerID", curStoreShopBO.CustomerID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curStoreShopBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curStoreShopBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@shopDescription", curStoreShopBO.ShopDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreShopBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curStoreShopBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreShopBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreShopBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreShopBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curStoreShopBO.ShopDate);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM storeShop " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE storeShop SET " +
            " 	stuffID = @stuffID, " +
            " 	customerID = @customerID, " +
            " 	customerName = @customerName, " +
            " 	shopCount = @shopCount, " +
            " 	shopDescription = @shopDescription, " +
            " 	activityStatus = @activityStatus, " +
            " 	isManagerAware = @isManagerAware, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	shopDate = @shopDate " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curStoreShopBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@customerID", curStoreShopBO.CustomerID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curStoreShopBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curStoreShopBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@shopDescription", curStoreShopBO.ShopDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curStoreShopBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curStoreShopBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreShopBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreShopBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreShopBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curStoreShopBO.ShopDate);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static StoreShopBO Find(string shopID)
        {
            if (shopID == null) return null;
            string commandString = "  SELECT * FROM storeShop ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (storeShop.shopID = '{0}') ", shopID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            StoreShopBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new StoreShopBO();
                    ans.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
                    ans.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
                    ans.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
                    ans.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
                    ans.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
                    ans.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);
                    ans.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDate]);

                }
            }
            return ans;
        }

        public static List<StoreShopBO> List()
        {
            string commandString = " SELECT * FROM storeShop ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreShopBO> ans = new List<StoreShopBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreShopBO item = new StoreShopBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDate]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<StoreShopBO> List(string stuffID, string customerID, string customerName, int? shopCount, string shopDescription, bool? activityStatus, bool? isManagerAware, string shopDate)
        {
            string commandString = " SELECT * FROM storeShop ";
            string wherePart = " WHERE (1=1) ";
            if (stuffID != null)
            {
                wherePart += string.Format(" AND (storeShop.stuffID = '{0}') ", stuffID);
            }

            if (customerID != null)
            {
                wherePart += string.Format(" AND (storeShop.customerID = '{0}') ", customerID);
            }

            if (customerName != null)
            {
                wherePart += string.Format(" AND (storeShop.customerName = '{0}') ", customerName);
            }

            if (shopCount != null)
            {
                wherePart += string.Format(" AND (storeShop.shopCount = {0}) ", shopCount.ToString());
            }

            if (shopDescription != null)
            {
                wherePart += string.Format(" AND (storeShop.shopDescription = '{0}') ", shopDescription);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (storeShop.activityStatus = {0}) ", activityStatus.ToString());
            }

            if (isManagerAware != null)
            {
                wherePart += string.Format(" AND (storeShop.isManagerAware = {0}) ", isManagerAware.ToString());
            }

            if (shopDate != null)
            {
                wherePart += string.Format(" AND (storeShop.shopDate = '{0}') ", shopDate);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreShopBO> ans = new List<StoreShopBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreShopBO item = new StoreShopBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDate]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<StoreShopBO> ListInterval(string stuffTypeID, string shopDateFrom, string shopDateTo)
        {
            string commandString = " SELECT storeShop.* FROM storeShop INNER JOIN storeStuff ON storeShop.stuffID = storeStuff.stuffID ";
            string wherePart = " WHERE (1=1) ";
            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (storeStuff.stuffTypeID = '{0}') ", stuffTypeID);
            }

            if (shopDateFrom != null)
            {
                wherePart += string.Format(" AND (storeShop.shopDate >= '{0}') ", shopDateFrom);
            }

            if (shopDateTo != null)
            {
                wherePart += string.Format(" AND (storeShop.shopDate <= '{0}') ", shopDateTo);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StoreShopBO> ans = new List<StoreShopBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StoreShopBO item = new StoreShopBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.StuffID]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StoreShop.ShopCount]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.StoreShop.IsManagerAware]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.LastChangeTime]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StoreShop.ShopDate]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public bool SetManagerAware(bool isManagerAware)
        {
            string commandString =
            " UPDATE storeShop SET " +
            " 	isManagerAware = @isManagerAware, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curStoreShopBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", isManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStoreShopBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStoreShopBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStoreShopBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }
    }


    public partial class StuffTypeDA : DataAccess
    {
        #region Constructors
        public StuffTypeDA(StuffTypeBO inStuffTypeBO)
        {
            curStuffTypeBO = inStuffTypeBO;
            LastChangeFiller.SetChangesInfo(curStuffTypeBO);
        }
        #endregion


        #region Variables

        private StuffTypeBO curStuffTypeBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO stuffType (" +
            " 	stuffTypeID, " +
            " 	stuffTypeName, " +
            " 	stuffTypeDescription, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@stuffTypeID, " +
            " 	@stuffTypeName, " +
            " 	@stuffTypeDescription, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStuffTypeBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curStuffTypeBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeDescription", curStuffTypeBO.StuffTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStuffTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStuffTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStuffTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM stuffType " +
            " WHERE (1=1) " +
            " AND 	stuffTypeID = @stuffTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStuffTypeBO.StuffTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE stuffType SET " +
            " 	stuffTypeName = @stuffTypeName, " +
            " 	stuffTypeDescription = @stuffTypeDescription, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	stuffTypeID = @stuffTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curStuffTypeBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curStuffTypeBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeDescription", curStuffTypeBO.StuffTypeDescription);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curStuffTypeBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curStuffTypeBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curStuffTypeBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static StuffTypeBO Find(int stuffTypeID)
        {
            string commandString = "  SELECT * FROM stuffType ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (stuffType.stuffTypeID = {0}) ", stuffTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            StuffTypeBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new StuffTypeBO();
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StuffType.StuffTypeID]);
                    ans.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.StuffTypeName]);
                    ans.StuffTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.StuffTypeDescription]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<StuffTypeBO> List()
        {
            string commandString = " SELECT * FROM stuffType ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<StuffTypeBO> ans = new List<StuffTypeBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    StuffTypeBO item = new StuffTypeBO();
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.StuffType.StuffTypeID]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.StuffTypeName]);
                    item.StuffTypeDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.StuffTypeDescription]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.StuffType.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStuffAvailableDetailsDA : DataAccess
    {
        #region Constructors
        public ViwStuffAvailableDetailsDA(ViwStuffAvailableDetailsBO inViwStuffAvailableDetailsBO)
        {
            curViwStuffAvailableDetailsBO = inViwStuffAvailableDetailsBO;
        }
        #endregion


        #region Variables

        private ViwStuffAvailableDetailsBO curViwStuffAvailableDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStuffAvailableDetails (" +
            " 	stuffID, " +
            " 	stuffTypeID, " +
            " 	stuffName, " +
            " 	buyDate, " +
            " 	initCount, " +
            " 	activityStatus, " +
            " 	isBalanced, " +
            " 	isSalesPersonAware, " +
            " 	soldCount, " +
            " 	availableCount) " +
            " VALUES (" +
            " 	@stuffID, " +
            " 	@stuffTypeID, " +
            " 	@stuffName, " +
            " 	@buyDate, " +
            " 	@initCount, " +
            " 	@activityStatus, " +
            " 	@isBalanced, " +
            " 	@isSalesPersonAware, " +
            " 	@soldCount, " +
            " 	@availableCount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwStuffAvailableDetailsBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStuffAvailableDetailsBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwStuffAvailableDetailsBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@buyDate", curViwStuffAvailableDetailsBO.BuyDate);
            UtilityDB.AddParameter(command.Parameters, "@initCount", curViwStuffAvailableDetailsBO.InitCount);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwStuffAvailableDetailsBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isBalanced", curViwStuffAvailableDetailsBO.IsBalanced);
            UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curViwStuffAvailableDetailsBO.IsSalesPersonAware);
            UtilityDB.AddParameter(command.Parameters, "@soldCount", curViwStuffAvailableDetailsBO.SoldCount);
            UtilityDB.AddParameter(command.Parameters, "@availableCount", curViwStuffAvailableDetailsBO.AvailableCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStuffAvailableDetails " +
            " WHERE (1=1) " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwStuffAvailableDetailsBO.StuffID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStuffAvailableDetails SET " +
            " 	stuffTypeID = @stuffTypeID, " +
            " 	stuffName = @stuffName, " +
            " 	buyDate = @buyDate, " +
            " 	initCount = @initCount, " +
            " 	activityStatus = @activityStatus, " +
            " 	isBalanced = @isBalanced, " +
            " 	isSalesPersonAware = @isSalesPersonAware, " +
            " 	soldCount = @soldCount, " +
            " 	availableCount = @availableCount " +
            " WHERE (1=1) " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwStuffAvailableDetailsBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStuffAvailableDetailsBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwStuffAvailableDetailsBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@buyDate", curViwStuffAvailableDetailsBO.BuyDate);
            UtilityDB.AddParameter(command.Parameters, "@initCount", curViwStuffAvailableDetailsBO.InitCount);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwStuffAvailableDetailsBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isBalanced", curViwStuffAvailableDetailsBO.IsBalanced);
            UtilityDB.AddParameter(command.Parameters, "@isSalesPersonAware", curViwStuffAvailableDetailsBO.IsSalesPersonAware);
            UtilityDB.AddParameter(command.Parameters, "@soldCount", curViwStuffAvailableDetailsBO.SoldCount);
            UtilityDB.AddParameter(command.Parameters, "@availableCount", curViwStuffAvailableDetailsBO.AvailableCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStuffAvailableDetailsBO Find(string stuffID)
        {
            if (stuffID == null) return null;
            string commandString = "  SELECT * FROM viwStuffAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStuffAvailableDetails.stuffID = '{0}') ", stuffID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStuffAvailableDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStuffAvailableDetailsBO();
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffID]);
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffTypeID]);
                    ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffName]);
                    ans.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.BuyDate]);
                    ans.InitCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.InitCount]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.ActivityStatus]);
                    ans.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsBalanced]);
                    ans.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsSalesPersonAware]);
                    ans.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.SoldCount]);
                    ans.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.AvailableCount]);

                }
            }
            return ans;
        }

        public static List<ViwStuffAvailableDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwStuffAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStuffAvailableDetailsBO> ans = new List<ViwStuffAvailableDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStuffAvailableDetailsBO item = new ViwStuffAvailableDetailsBO();
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffName]);
                    item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.BuyDate]);
                    item.InitCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.InitCount]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.ActivityStatus]);
                    item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsBalanced]);
                    item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsSalesPersonAware]);
                    item.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.SoldCount]);
                    item.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.AvailableCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStuffAvailableDetailsBO> List(int? stuffTypeID, string stuffName, string buyDate, int? initCount, bool? activityStatus, bool? isBalanced, bool? isSalesPersonAware, int? soldCount, int? availableCount)
        {
            string commandString = " SELECT * FROM viwStuffAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (stuffName != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.stuffName = '{0}') ", stuffName);
            }

            if (buyDate != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.buyDate = '{0}') ", buyDate);
            }

            if (initCount != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.initCount = {0}) ", initCount.ToString());
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.activityStatus = {0}) ", activityStatus.ToString());
            }

            if (isBalanced != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.isBalanced = {0}) ", isBalanced.ToString());
            }

            if (isSalesPersonAware != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.isSalesPersonAware = {0}) ", isSalesPersonAware.ToString());
            }

            if (soldCount != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.soldCount = {0}) ", soldCount.ToString());
            }

            if (availableCount != null)
            {
                wherePart += string.Format(" AND (viwStuffAvailableDetails.availableCount = {0}) ", availableCount.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStuffAvailableDetailsBO> ans = new List<ViwStuffAvailableDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStuffAvailableDetailsBO item = new ViwStuffAvailableDetailsBO();
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.StuffName]);
                    item.BuyDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffAvailableDetails.BuyDate]);
                    item.InitCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffAvailableDetails.InitCount]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.ActivityStatus]);
                    item.IsBalanced = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsBalanced]);
                    item.IsSalesPersonAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStuffAvailableDetails.IsSalesPersonAware]);
                    item.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.SoldCount]);
                    item.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffAvailableDetails.AvailableCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStuffTypeAvailableDetailsDA : DataAccess
    {
        #region Constructors
        public ViwStuffTypeAvailableDetailsDA(ViwStuffTypeAvailableDetailsBO inViwStuffTypeAvailableDetailsBO)
        {
            curViwStuffTypeAvailableDetailsBO = inViwStuffTypeAvailableDetailsBO;
        }
        #endregion


        #region Variables

        private ViwStuffTypeAvailableDetailsBO curViwStuffTypeAvailableDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStuffTypeAvailableDetails (" +
            " 	stuffTypeID, " +
            " 	stuffTypeName, " +
            " 	initCount, " +
            " 	soldCount, " +
            " 	availableCount) " +
            " VALUES (" +
            " 	@stuffTypeID, " +
            " 	@stuffTypeName, " +
            " 	@initCount, " +
            " 	@soldCount, " +
            " 	@availableCount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStuffTypeAvailableDetailsBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curViwStuffTypeAvailableDetailsBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@initCount", curViwStuffTypeAvailableDetailsBO.InitCount);
            UtilityDB.AddParameter(command.Parameters, "@soldCount", curViwStuffTypeAvailableDetailsBO.SoldCount);
            UtilityDB.AddParameter(command.Parameters, "@availableCount", curViwStuffTypeAvailableDetailsBO.AvailableCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStuffTypeAvailableDetails " +
            " WHERE (1=1) " +
            " AND 	stuffTypeID = @stuffTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStuffTypeAvailableDetailsBO.StuffTypeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStuffTypeAvailableDetails SET " +
            " 	stuffTypeName = @stuffTypeName, " +
            " 	initCount = @initCount, " +
            " 	soldCount = @soldCount, " +
            " 	availableCount = @availableCount " +
            " WHERE (1=1) " +
            " AND 	stuffTypeID = @stuffTypeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStuffTypeAvailableDetailsBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curViwStuffTypeAvailableDetailsBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@initCount", curViwStuffTypeAvailableDetailsBO.InitCount);
            UtilityDB.AddParameter(command.Parameters, "@soldCount", curViwStuffTypeAvailableDetailsBO.SoldCount);
            UtilityDB.AddParameter(command.Parameters, "@availableCount", curViwStuffTypeAvailableDetailsBO.AvailableCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStuffTypeAvailableDetailsBO Find(int stuffTypeID)
        {
            string commandString = "  SELECT * FROM viwStuffTypeAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStuffTypeAvailableDetails.stuffTypeID = {0}) ", stuffTypeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStuffTypeAvailableDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStuffTypeAvailableDetailsBO();
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeID]);
                    ans.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeName]);
                    ans.InitCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.InitCount]);
                    ans.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.SoldCount]);
                    ans.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.AvailableCount]);

                }
            }
            return ans;
        }

        public static List<ViwStuffTypeAvailableDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwStuffTypeAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStuffTypeAvailableDetailsBO> ans = new List<ViwStuffTypeAvailableDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStuffTypeAvailableDetailsBO item = new ViwStuffTypeAvailableDetailsBO();
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeID]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeName]);
                    item.InitCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.InitCount]);
                    item.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.SoldCount]);
                    item.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.AvailableCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStuffTypeAvailableDetailsBO> List(int? stuffTypeID, int? initCount, int? soldCount, int? availableCount)
        {
            string commandString = " SELECT * FROM viwStuffTypeAvailableDetails ";
            string wherePart = " WHERE (1=1) ";
            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwStuffTypeAvailableDetails.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (initCount != null)
            {
                wherePart += string.Format(" AND (viwStuffTypeAvailableDetails.initCount = {0}) ", initCount.ToString());
            }

            if (soldCount != null)
            {
                wherePart += string.Format(" AND (viwStuffTypeAvailableDetails.soldCount = {0}) ", soldCount.ToString());
            }

            if (availableCount != null)
            {
                wherePart += string.Format(" AND (viwStuffTypeAvailableDetails.availableCount = {0}) ", availableCount.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStuffTypeAvailableDetailsBO> ans = new List<ViwStuffTypeAvailableDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStuffTypeAvailableDetailsBO item = new ViwStuffTypeAvailableDetailsBO();
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeID]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.StuffTypeName]);
                    item.InitCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.InitCount]);
                    item.SoldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.SoldCount]);
                    item.AvailableCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStuffTypeAvailableDetails.AvailableCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwShopSalesPersonDA : DataAccess
    {
        #region Constructors
        public ViwShopSalesPersonDA(ViwShopSalesPersonBO inViwShopSalesPersonBO)
        {
            curViwShopSalesPersonBO = inViwShopSalesPersonBO;
        }
        #endregion


        #region Variables

        private ViwShopSalesPersonBO curViwShopSalesPersonBO = null;
        internal static List<ViwShopSalesPersonBO> allViwShopS = new List<ViwShopSalesPersonBO>(); //hanieh
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwShopSalesPerson (" +
            " 	shopID, " +
            " 	stuffID, " +
            " 	customerName, " +
            " 	shopCount, " +
            " 	shopDate, " +
            " 	shopDescription, " +
            " 	activityStatus, " +
            " 	isManagerAware, " +
            " 	studentID, " +
            " 	stuffName, " +
            " 	stuffTypeID, " +
            " 	stuffPrice, " +
            " 	paidAmount) " +
            " VALUES (" +
            " 	@shopID, " +
            " 	@stuffID, " +
            " 	@customerName, " +
            " 	@shopCount, " +
            " 	@shopDate, " +
            " 	@shopDescription, " +
            " 	@activityStatus, " +
            " 	@isManagerAware, " +
            " 	@studentID, " +
            " 	@stuffName, " +
            " 	@stuffTypeID, " +
            " 	@stuffPrice, " +
            " 	@paidAmount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwShopSalesPersonBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwShopSalesPersonBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curViwShopSalesPersonBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curViwShopSalesPersonBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curViwShopSalesPersonBO.ShopDate);
            UtilityDB.AddParameter(command.Parameters, "@shopDescription", curViwShopSalesPersonBO.ShopDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwShopSalesPersonBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curViwShopSalesPersonBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwShopSalesPersonBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwShopSalesPersonBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwShopSalesPersonBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffPrice", curViwShopSalesPersonBO.StuffPrice);
            UtilityDB.AddParameter(command.Parameters, "@paidAmount", curViwShopSalesPersonBO.PaidAmount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwShopSalesPerson " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwShopSalesPersonBO.ShopID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwShopSalesPerson SET " +
            " 	stuffID = @stuffID, " +
            " 	customerName = @customerName, " +
            " 	shopCount = @shopCount, " +
            " 	shopDate = @shopDate, " +
            " 	shopDescription = @shopDescription, " +
            " 	activityStatus = @activityStatus, " +
            " 	isManagerAware = @isManagerAware, " +
            " 	studentID = @studentID, " +
            " 	stuffName = @stuffName, " +
            " 	stuffTypeID = @stuffTypeID, " +
            " 	stuffPrice = @stuffPrice, " +
            " 	paidAmount = @paidAmount " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwShopSalesPersonBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwShopSalesPersonBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curViwShopSalesPersonBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curViwShopSalesPersonBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curViwShopSalesPersonBO.ShopDate);
            UtilityDB.AddParameter(command.Parameters, "@shopDescription", curViwShopSalesPersonBO.ShopDescription);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwShopSalesPersonBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curViwShopSalesPersonBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwShopSalesPersonBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwShopSalesPersonBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwShopSalesPersonBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffPrice", curViwShopSalesPersonBO.StuffPrice);
            UtilityDB.AddParameter(command.Parameters, "@paidAmount", curViwShopSalesPersonBO.PaidAmount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwShopSalesPersonBO Find(string shopID)
        {
            if (shopID == null) return null;
            string commandString = "  SELECT * FROM viwShopSalesPerson ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwShopSalesPerson.shopID = '{0}') ", shopID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwShopSalesPersonBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwShopSalesPersonBO();
                    ans.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopID]);
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffID]);
                    ans.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.CustomerName]);
                    ans.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.ShopCount]);
                    ans.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDate]);
                    ans.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDescription]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.ActivityStatus]);
                    ans.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.IsManagerAware]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StudentID]);
                    ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffName]);
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffTypeID]);
                    ans.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffPrice]);
                    ans.PaidAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.PaidAmount]);

                }
            }
            return ans;
        }

        public static List<ViwShopSalesPersonBO> List()
        {
            string commandString = " SELECT * FROM viwShopSalesPerson ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwShopSalesPersonBO> ans = new List<ViwShopSalesPersonBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwShopSalesPersonBO item = new ViwShopSalesPersonBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.ShopCount]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDate]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.IsManagerAware]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StudentID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffName]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffTypeID]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffPrice]);
                    item.PaidAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.PaidAmount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwShopSalesPersonBO> List(string stuffID, string customerName, int? shopCount, string shopDate, bool? activityStatus, bool? isManagerAware, string studentID, string stuffName, int? stuffTypeID, int? stuffPrice, int? paidAmount)
        {
            string commandString = " SELECT * FROM viwShopSalesPerson ";
            string wherePart = " WHERE (1=1) ";
            if (stuffID != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.stuffID = '{0}') ", stuffID);
            }

            if (customerName != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.customerName = '{0}') ", customerName);
            }

            if (shopCount != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.shopCount = {0}) ", shopCount.ToString());
            }

            if (shopDate != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.shopDate = '{0}') ", shopDate);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            if (isManagerAware != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.isManagerAware = {0}) ", UtilityDB.GetDBString(isManagerAware));
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.studentID = '{0}') ", studentID);
            }

            if (stuffName != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.stuffName = '{0}') ", stuffName);
            }

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (stuffPrice != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.stuffPrice = {0}) ", stuffPrice.ToString());
            }

            if (paidAmount != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.paidAmount = {0}) ", paidAmount.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwShopSalesPersonBO> ans = new List<ViwShopSalesPersonBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwShopSalesPersonBO item = new ViwShopSalesPersonBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.ShopCount]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDate]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.IsManagerAware]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StudentID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffName]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffTypeID]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffPrice]);
                    item.PaidAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.PaidAmount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<ViwShopSalesPersonBO> ListInterval(int? stuffTypeID, string shopDateFrom, string shopDateTo)
        {
            string commandString = " SELECT * FROM viwShopSalesPerson ";
            string wherePart = " WHERE (1=1) ";

            if (shopDateFrom != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.shopDate >= '{0}') ", shopDateFrom);
            }

            if (shopDateTo != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.shopDate <= '{0}') ", shopDateTo);
            }

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwShopSalesPerson.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwShopSalesPersonBO> ans = new List<ViwShopSalesPersonBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwShopSalesPersonBO item = new ViwShopSalesPersonBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.CustomerName]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.ShopCount]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDate]);
                    item.ShopDescription = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.ShopDescription]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.ActivityStatus]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwShopSalesPerson.IsManagerAware]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StudentID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwShopSalesPerson.StuffName]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffTypeID]);
                    item.StuffPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.StuffPrice]);
                    item.PaidAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwShopSalesPerson.PaidAmount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
    }

    public partial class IncomeStoreSellDA : DataAccess
    {
        #region Constructors
        public IncomeStoreSellDA(IncomeStoreSellBO inIncomeStoreSellBO)
        {
            curIncomeStoreSellBO = inIncomeStoreSellBO;
            LastChangeFiller.SetChangesInfo(curIncomeStoreSellBO);
        }
        #endregion


        #region Variables

        private IncomeStoreSellBO curIncomeStoreSellBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO incomeStoreSell (" +
            " 	shopID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	payTypeID, " +
            " 	checkDate, " +
            " 	description, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	checkNumber) " +
            " VALUES (" +
            " 	@shopID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@payTypeID, " +
            " 	@checkDate, " +
            " 	@description, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@checkNumber) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curIncomeStoreSellBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeStoreSellBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeStoreSellBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeStoreSellBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeStoreSellBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeStoreSellBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeStoreSellBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeStoreSellBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeStoreSellBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeStoreSellBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeStoreSellBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM incomeStoreSell " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeStoreSellBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE incomeStoreSell SET " +
            " 	shopID = @shopID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	payTypeID = @payTypeID, " +
            " 	checkDate = @checkDate, " +
            " 	description = @description, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	checkNumber = @checkNumber " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curIncomeStoreSellBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@shopID", curIncomeStoreSellBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curIncomeStoreSellBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curIncomeStoreSellBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curIncomeStoreSellBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curIncomeStoreSellBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curIncomeStoreSellBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curIncomeStoreSellBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curIncomeStoreSellBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curIncomeStoreSellBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curIncomeStoreSellBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curIncomeStoreSellBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static IncomeStoreSellBO Find(int payID)
        {
            string commandString = "  SELECT * FROM incomeStoreSell ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (incomeStoreSell.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            IncomeStoreSellBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new IncomeStoreSellBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayID]);
                    ans.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.ShopID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStoreSell.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.PayDate]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayTypeID]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckDate]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.Description]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeTime]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckNumber]);

                }
            }
            return ans;
        }

        public static List<IncomeStoreSellBO> List()
        {
            string commandString = " SELECT * FROM incomeStoreSell ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeStoreSellBO> ans = new List<IncomeStoreSellBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeStoreSellBO item = new IncomeStoreSellBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayID]);
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.ShopID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStoreSell.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.PayDate]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayTypeID]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeTime]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<IncomeStoreSellBO> List(string shopID, int? fee, int? discount, string payDate, int? payTypeID, string checkDate, string checkNumber)
        {
            string commandString = " SELECT * FROM incomeStoreSell ";
            string wherePart = " WHERE (1=1) ";
            if (shopID != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.shopID = '{0}') ", shopID);
            }

            if (fee != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.fee = {0}) ", fee.ToString());
            }

            if (discount != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.discount = {0}) ", discount.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.payDate = '{0}') ", payDate);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (incomeStoreSell.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<IncomeStoreSellBO> ans = new List<IncomeStoreSellBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    IncomeStoreSellBO item = new IncomeStoreSellBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayID]);
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.ShopID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.IncomeStoreSell.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.PayDate]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.IncomeStoreSell.PayTypeID]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.LastChangeTime]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.IncomeStoreSell.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class OutcomeStoreBuyDA : DataAccess
    {
        #region Constructors
        public OutcomeStoreBuyDA(OutcomeStoreBuyBO inOutcomeStoreBuyBO)
        {
            curOutcomeStoreBuyBO = inOutcomeStoreBuyBO;
            LastChangeFiller.SetChangesInfo(curOutcomeStoreBuyBO);
        }
        #endregion


        #region Variables

        private OutcomeStoreBuyBO curOutcomeStoreBuyBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO outcomeStoreBuy (" +
            " 	stuffID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	payTypeID, " +
            " 	checkDate, " +
            " 	description, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, " +
            " 	checkNumber) " +
            " VALUES (" +
            " 	@stuffID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@payTypeID, " +
            " 	@checkDate, " +
            " 	@description, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, " +
            " 	@checkNumber) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curOutcomeStoreBuyBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeStoreBuyBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeStoreBuyBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeStoreBuyBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeStoreBuyBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeStoreBuyBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeStoreBuyBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeStoreBuyBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeStoreBuyBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeStoreBuyBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeStoreBuyBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM outcomeStoreBuy " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeStoreBuyBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE outcomeStoreBuy SET " +
            " 	stuffID = @stuffID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	payTypeID = @payTypeID, " +
            " 	checkDate = @checkDate, " +
            " 	description = @description, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime, " +
            " 	checkNumber = @checkNumber " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curOutcomeStoreBuyBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curOutcomeStoreBuyBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curOutcomeStoreBuyBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curOutcomeStoreBuyBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curOutcomeStoreBuyBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curOutcomeStoreBuyBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curOutcomeStoreBuyBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@description", curOutcomeStoreBuyBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curOutcomeStoreBuyBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curOutcomeStoreBuyBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curOutcomeStoreBuyBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curOutcomeStoreBuyBO.CheckNumber);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static OutcomeStoreBuyBO Find(int payID)
        {
            string commandString = "  SELECT * FROM outcomeStoreBuy ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (outcomeStoreBuy.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            OutcomeStoreBuyBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new OutcomeStoreBuyBO();
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayID]);
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.StuffID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStoreBuy.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.PayDate]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayTypeID]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckDate]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.Description]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeTime]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckNumber]);

                }
            }
            return ans;
        }

        public static List<OutcomeStoreBuyBO> List()
        {
            string commandString = " SELECT * FROM outcomeStoreBuy ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeStoreBuyBO> ans = new List<OutcomeStoreBuyBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeStoreBuyBO item = new OutcomeStoreBuyBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.StuffID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStoreBuy.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.PayDate]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayTypeID]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeTime]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<OutcomeStoreBuyBO> List(string stuffID, int? fee, int? discount, string payDate, int? payTypeID, string checkDate, string checkNumber)
        {
            string commandString = " SELECT * FROM outcomeStoreBuy ";
            string wherePart = " WHERE (1=1) ";
            if (stuffID != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.stuffID = '{0}') ", stuffID);
            }

            if (fee != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.fee = {0}) ", fee.ToString());
            }

            if (discount != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.discount = {0}) ", discount.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.payDate = '{0}') ", payDate);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (outcomeStoreBuy.checkNumber = '{0}') ", checkNumber);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<OutcomeStoreBuyBO> ans = new List<OutcomeStoreBuyBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    OutcomeStoreBuyBO item = new OutcomeStoreBuyBO();
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.StuffID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.OutcomeStoreBuy.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.PayDate]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.OutcomeStoreBuy.PayTypeID]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckDate]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.Description]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.LastChangeTime]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.OutcomeStoreBuy.CheckNumber]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStoreSalesHistoryDA : DataAccess
    {
        #region Constructors
        public ViwStoreSalesHistoryDA(ViwStoreSalesHistoryBO inViwStoreSalesHistoryBO)
        {
            curViwStoreSalesHistoryBO = inViwStoreSalesHistoryBO;
        }
        #endregion


        #region Variables

        private ViwStoreSalesHistoryBO curViwStoreSalesHistoryBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStoreSalesHistory (" +
            " 	shopID, " +
            " 	stuffID, " +
            " 	stuffTypeID, " +
            " 	stuffName, " +
            " 	stuffTypeName, " +
            " 	customerID, " +
            " 	customerName, " +
            " 	fee, " +
            " 	discount, " +
            " 	isManagerAware, " +
            " 	shopDate, " +
            " 	shopCount, " +
            " 	customerCount) " +
            " VALUES (" +
            " 	@shopID, " +
            " 	@stuffID, " +
            " 	@stuffTypeID, " +
            " 	@stuffName, " +
            " 	@stuffTypeName, " +
            " 	@customerID, " +
            " 	@customerName, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@isManagerAware, " +
            " 	@shopDate, " +
            " 	@shopCount, " +
            " 	@customerCount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwStoreSalesHistoryBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwStoreSalesHistoryBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStoreSalesHistoryBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwStoreSalesHistoryBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curViwStoreSalesHistoryBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@customerID", curViwStoreSalesHistoryBO.CustomerID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curViwStoreSalesHistoryBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwStoreSalesHistoryBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwStoreSalesHistoryBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curViwStoreSalesHistoryBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curViwStoreSalesHistoryBO.ShopDate);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curViwStoreSalesHistoryBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@customerCount", curViwStoreSalesHistoryBO.CustomerCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStoreSalesHistory " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwStoreSalesHistoryBO.ShopID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStoreSalesHistory SET " +
            " 	stuffID = @stuffID, " +
            " 	stuffTypeID = @stuffTypeID, " +
            " 	stuffName = @stuffName, " +
            " 	stuffTypeName = @stuffTypeName, " +
            " 	customerID = @customerID, " +
            " 	customerName = @customerName, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	isManagerAware = @isManagerAware, " +
            " 	shopDate = @shopDate, " +
            " 	shopCount = @shopCount, " +
            " 	customerCount = @customerCount " +
            " WHERE (1=1) " +
            " AND 	shopID = @shopID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@shopID", curViwStoreSalesHistoryBO.ShopID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwStoreSalesHistoryBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwStoreSalesHistoryBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffName", curViwStoreSalesHistoryBO.StuffName);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeName", curViwStoreSalesHistoryBO.StuffTypeName);
            UtilityDB.AddParameter(command.Parameters, "@customerID", curViwStoreSalesHistoryBO.CustomerID);
            UtilityDB.AddParameter(command.Parameters, "@customerName", curViwStoreSalesHistoryBO.CustomerName);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwStoreSalesHistoryBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwStoreSalesHistoryBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@isManagerAware", curViwStoreSalesHistoryBO.IsManagerAware);
            UtilityDB.AddParameter(command.Parameters, "@shopDate", curViwStoreSalesHistoryBO.ShopDate);
            UtilityDB.AddParameter(command.Parameters, "@shopCount", curViwStoreSalesHistoryBO.ShopCount);
            UtilityDB.AddParameter(command.Parameters, "@customerCount", curViwStoreSalesHistoryBO.CustomerCount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStoreSalesHistoryBO Find(string shopID)
        {
            if (shopID == null) return null;
            string commandString = "  SELECT * FROM viwStoreSalesHistory ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStoreSalesHistory.shopID = '{0}') ", shopID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStoreSalesHistoryBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStoreSalesHistoryBO();
                    ans.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopID]);
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffID]);
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeID]);
                    ans.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffName]);
                    ans.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeName]);
                    ans.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerID]);
                    ans.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerName]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.Discount]);
                    ans.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStoreSalesHistory.IsManagerAware]);
                    ans.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopDate]);
                    ans.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopCount]);
                    ans.CustomerCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerCount]);

                }
            }
            return ans;
        }

        public static List<ViwStoreSalesHistoryBO> List()
        {
            string commandString = " SELECT * FROM viwStoreSalesHistory ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStoreSalesHistoryBO> ans = new List<ViwStoreSalesHistoryBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStoreSalesHistoryBO item = new ViwStoreSalesHistoryBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffName]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeName]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerName]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.Discount]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStoreSalesHistory.IsManagerAware]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopDate]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopCount]);
                    item.CustomerCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStoreSalesHistoryBO> List(string stuffID, int? stuffTypeID, string stuffName, string stuffTypeName, string customerID, string customerName, int? fee, int? discount, bool? isManagerAware, string shopDate, int? shopCount, int? customerCount)
        {
            string commandString = " SELECT * FROM viwStoreSalesHistory ";
            string wherePart = " WHERE (1=1) ";
            if (stuffID != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffID = '{0}') ", stuffID);
            }

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (stuffName != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffName = '{0}') ", stuffName);
            }

            if (stuffTypeName != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffTypeName = '{0}') ", stuffTypeName);
            }

            if (customerID != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.customerID = '{0}') ", customerID);
            }

            if (customerName != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.customerName = '{0}') ", customerName);
            }

            if (fee != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.fee = {0}) ", fee.ToString());
            }

            if (discount != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.discount = {0}) ", discount.ToString());
            }

            if (isManagerAware != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.isManagerAware = {0}) ", isManagerAware.ToString());
            }

            if (shopDate != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopDate = '{0}') ", shopDate);
            }

            if (shopCount != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopCount = {0}) ", shopCount.ToString());
            }

            if (customerCount != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.customerCount = {0}) ", customerCount.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStoreSalesHistoryBO> ans = new List<ViwStoreSalesHistoryBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStoreSalesHistoryBO item = new ViwStoreSalesHistoryBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffName]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeName]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerName]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.Discount]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStoreSalesHistory.IsManagerAware]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopDate]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopCount]);
                    item.CustomerCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        
        #endregion
        public static List<ViwStoreSalesHistoryBO> ListGroup(int? stuffTypeID, string shopDateFrom, string shopDateTo)
        {
            string commandString = " SELECT " +
                " [stuffTypeID], " +
                " [stuffTypeName], " +
                " SUM([fee]) as fee, " +
                " SUM([discount]) as discount, " +
                " cast (MIN(cast (isManagerAware as tinyint)) as bit) AS isManagerAware, " +
                " SUM([shopCount]) as shopCount, " +
                " SUM([customerCount]) as customerCount " +
                " FROM viwStoreSalesHistory ";
            string wherePart = " WHERE (1=1) ";

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (shopDateFrom != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopDate >= '{0}') ", shopDateFrom);
            }

            if (shopDateTo != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopDate < '{0}') ", shopDateTo);
            }

            string groupPart = " GROUP BY " +
                " viwStoreSalesHistory.[stuffTypeID], " +
                " viwStoreSalesHistory.[stuffTypeName] ";


            commandString += wherePart + groupPart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStoreSalesHistoryBO> ans = new List<ViwStoreSalesHistoryBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStoreSalesHistoryBO item = new ViwStoreSalesHistoryBO();
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeID]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeName]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.Discount]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStoreSalesHistory.IsManagerAware]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopCount]);
                    item.CustomerCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }

        public static List<ViwStoreSalesHistoryBO> ListInterval(int? stuffTypeID, string shopDateFrom, string shopDateTo, bool? isManagerAware)
        {
            string commandString = " SELECT * FROM viwStoreSalesHistory ";
            string wherePart = " WHERE (1=1) ";


            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (shopDateFrom != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopDate >= '{0}') ", shopDateFrom);
            }

            if (shopDateTo != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.shopDate <= '{0}') ", shopDateTo);
            }

            if (isManagerAware != null)
            {
                wherePart += string.Format(" AND (viwStoreSalesHistory.isManagerAware = '{0}') ", UtilityDB.GetDBString(isManagerAware));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStoreSalesHistoryBO> ans = new List<ViwStoreSalesHistoryBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStoreSalesHistoryBO item = new ViwStoreSalesHistoryBO();
                    item.ShopID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffID]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeID]);
                    item.StuffName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffName]);
                    item.StuffTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.StuffTypeName]);
                    item.CustomerID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerID]);
                    item.CustomerName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerName]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.Discount]);
                    item.IsManagerAware = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStoreSalesHistory.IsManagerAware]);
                    item.ShopDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopDate]);
                    item.ShopCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStoreSalesHistory.ShopCount]);
                    item.CustomerCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStoreSalesHistory.CustomerCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
    }

    public partial class ViwSalesTrackingDA : DataAccess
    {
        #region Constructors
        public ViwSalesTrackingDA(ViwSalesTrackingBO inViwSalesTrackingBO)
        {
            curViwSalesTrackingBO = inViwSalesTrackingBO;
        }
        #endregion


        #region Variables

        private ViwSalesTrackingBO curViwSalesTrackingBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwSalesTracking (" +
            " 	isSale, " +
            " 	isSaleText, " +
            " 	itemName, " +
            " 	itemCount, " +
            " 	itemDate, " +
            " 	stuffTypeID, " +
            " 	stuffID, " +
            " 	activityStatus) " +
            " VALUES (" +
            " 	@isSale, " +
            " 	@isSaleText, " +
            " 	@itemName, " +
            " 	@itemCount, " +
            " 	@itemDate, " +
            " 	@stuffTypeID, " +
            " 	@stuffID, " +
            " 	@activityStatus) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSale", curViwSalesTrackingBO.IsSale);
            UtilityDB.AddParameter(command.Parameters, "@isSaleText", curViwSalesTrackingBO.IsSaleText);
            UtilityDB.AddParameter(command.Parameters, "@itemName", curViwSalesTrackingBO.ItemName);
            UtilityDB.AddParameter(command.Parameters, "@itemCount", curViwSalesTrackingBO.ItemCount);
            UtilityDB.AddParameter(command.Parameters, "@itemDate", curViwSalesTrackingBO.ItemDate);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwSalesTrackingBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwSalesTrackingBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwSalesTrackingBO.ActivityStatus);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwSalesTracking " +
            " WHERE (1=1) " +
            " AND 	itemDate = @itemDate  " +
            " AND 	stuffTypeID = @stuffTypeID  " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@itemDate", curViwSalesTrackingBO.ItemDate);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwSalesTrackingBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwSalesTrackingBO.StuffID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwSalesTracking SET " +
            " 	isSale = @isSale, " +
            " 	isSaleText = @isSaleText, " +
            " 	itemName = @itemName, " +
            " 	itemCount = @itemCount, " +
            " 	activityStatus = @activityStatus " +
            " WHERE (1=1) " +
            " AND 	itemDate = @itemDate  " +
            " AND 	stuffTypeID = @stuffTypeID  " +
            " AND 	stuffID = @stuffID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSale", curViwSalesTrackingBO.IsSale);
            UtilityDB.AddParameter(command.Parameters, "@isSaleText", curViwSalesTrackingBO.IsSaleText);
            UtilityDB.AddParameter(command.Parameters, "@itemName", curViwSalesTrackingBO.ItemName);
            UtilityDB.AddParameter(command.Parameters, "@itemCount", curViwSalesTrackingBO.ItemCount);
            UtilityDB.AddParameter(command.Parameters, "@itemDate", curViwSalesTrackingBO.ItemDate);
            UtilityDB.AddParameter(command.Parameters, "@stuffTypeID", curViwSalesTrackingBO.StuffTypeID);
            UtilityDB.AddParameter(command.Parameters, "@stuffID", curViwSalesTrackingBO.StuffID);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwSalesTrackingBO.ActivityStatus);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwSalesTrackingBO Find(string itemDate, int stuffTypeID, string stuffID)
        {
            if (itemDate == null || stuffID == null) return null;
            string commandString = "  SELECT * FROM viwSalesTracking ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwSalesTracking.itemDate = '{0}') ", itemDate);
            wherePart += string.Format(" AND (viwSalesTracking.stuffTypeID = {0}) ", stuffTypeID.ToString());

            wherePart += string.Format(" AND (viwSalesTracking.stuffID = '{0}') ", stuffID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwSalesTrackingBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwSalesTrackingBO();
                    ans.IsSale = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.IsSale]);
                    ans.IsSaleText = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.IsSaleText]);
                    ans.ItemName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemName]);
                    ans.ItemCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.ItemCount]);
                    ans.ItemDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemDate]);
                    ans.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.StuffTypeID]);
                    ans.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.StuffID]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.ActivityStatus]);

                }
            }
            return ans;
        }

        public static List<ViwSalesTrackingBO> List()
        {
            string commandString = " SELECT * FROM viwSalesTracking ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwSalesTrackingBO> ans = new List<ViwSalesTrackingBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwSalesTrackingBO item = new ViwSalesTrackingBO();
                    item.IsSale = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.IsSale]);
                    item.IsSaleText = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.IsSaleText]);
                    item.ItemName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemName]);
                    item.ItemCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.ItemCount]);
                    item.ItemDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemDate]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.StuffTypeID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.StuffID]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.ActivityStatus]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwSalesTrackingBO> List(int? isSale, string itemName, int? itemCount, string itemDate, int? stuffTypeID, string stuffID, bool? activityStatus)
        {
            string commandString = " SELECT * FROM viwSalesTracking ";
            string wherePart = " WHERE (1=1) ";
            if (isSale != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.isSale = {0}) ", isSale.ToString());
            }

            if (itemName != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemName = '{0}') ", itemName);
            }

            if (itemCount != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemCount = {0}) ", itemCount.ToString());
            }

            if (itemDate != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemDate = '{0}') ", itemDate);
            }

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (stuffID != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.stuffID = '{0}') ", stuffID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.activityStatus = {0}) ", activityStatus.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwSalesTrackingBO> ans = new List<ViwSalesTrackingBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwSalesTrackingBO item = new ViwSalesTrackingBO();
                    item.IsSale = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.IsSale]);
                    item.IsSaleText = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.IsSaleText]);
                    item.ItemName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemName]);
                    item.ItemCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.ItemCount]);
                    item.ItemDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemDate]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.StuffTypeID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.StuffID]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.ActivityStatus]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion

        public static List<ViwSalesTrackingBO> ListInterval(bool? isSale, string itemName, int? itemCount, string itemDateFrom, string itemDateTo, int? stuffTypeID, string stuffID, bool? activityStatus)
        {
            string commandString = " SELECT * FROM viwSalesTracking ";
            string wherePart = " WHERE (1=1) ";
            if (isSale != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.isSale = {0}) ", UtilityDB.GetDBString(isSale));
            }

            if (itemName != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemName = '{0}') ", itemName);
            }

            if (itemCount != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemCount = {0}) ", itemCount.ToString());
            }

            if (itemDateFrom != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemDate >= '{0}') ", itemDateFrom);
            }

            if (itemDateTo != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.itemDate <= '{0}') ", itemDateTo);
            }

            if (stuffTypeID != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.stuffTypeID = {0}) ", stuffTypeID.ToString());
            }

            if (stuffID != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.stuffID = '{0}') ", stuffID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwSalesTracking.activityStatus = {0}) ", UtilityDB.GetDBString( activityStatus));
            }

            string orderPart = " ORDER BY itemDate ";

            commandString += wherePart + orderPart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwSalesTrackingBO> ans = new List<ViwSalesTrackingBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwSalesTrackingBO item = new ViwSalesTrackingBO();
                    item.IsSale = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.IsSale]);
                    item.IsSaleText = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.IsSaleText]);
                    item.ItemName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemName]);
                    item.ItemCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.ItemCount]);
                    item.ItemDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.ItemDate]);
                    item.StuffTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwSalesTracking.StuffTypeID]);
                    item.StuffID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwSalesTracking.StuffID]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwSalesTracking.ActivityStatus]);

                    ans.Add(item);
                }
            }
            return ans;
        }
    }

    public partial class ViwEmployeeSalaryDetailsDA : DataAccess
    {
        #region Constructors
        public ViwEmployeeSalaryDetailsDA(ViwEmployeeSalaryDetailsBO inViwEmployeeSalaryDetailsBO)
        {
            curViwEmployeeSalaryDetailsBO = inViwEmployeeSalaryDetailsBO;
        }
        #endregion


        #region Variables

        private ViwEmployeeSalaryDetailsBO curViwEmployeeSalaryDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwEmployeeSalaryDetails (" +
            " 	employeeID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	activityStatus, " +
            " 	payID, " +
            " 	fee, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	dateFrom, " +
            " 	dateTo, " +
            " 	description, " +
            " 	payTypeID, " +
            " 	discount) " +
            " VALUES (" +
            " 	@employeeID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@activityStatus, " +
            " 	@payID, " +
            " 	@fee, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@dateFrom, " +
            " 	@dateTo, " +
            " 	@description, " +
            " 	@payTypeID, " +
            " 	@discount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curViwEmployeeSalaryDetailsBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwEmployeeSalaryDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwEmployeeSalaryDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwEmployeeSalaryDetailsBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwEmployeeSalaryDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwEmployeeSalaryDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwEmployeeSalaryDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwEmployeeSalaryDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwEmployeeSalaryDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@dateFrom", curViwEmployeeSalaryDetailsBO.DateFrom);
            UtilityDB.AddParameter(command.Parameters, "@dateTo", curViwEmployeeSalaryDetailsBO.DateTo);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwEmployeeSalaryDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwEmployeeSalaryDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwEmployeeSalaryDetailsBO.Discount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwEmployeeSalaryDetails " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwEmployeeSalaryDetailsBO.PayID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwEmployeeSalaryDetails SET " +
            " 	employeeID = @employeeID, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	activityStatus = @activityStatus, " +
            " 	fee = @fee, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	dateFrom = @dateFrom, " +
            " 	dateTo = @dateTo, " +
            " 	description = @description, " +
            " 	payTypeID = @payTypeID, " +
            " 	discount = @discount " +
            " WHERE (1=1) " +
            " AND 	payID = @payID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@employeeID", curViwEmployeeSalaryDetailsBO.EmployeeID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwEmployeeSalaryDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwEmployeeSalaryDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@activityStatus", curViwEmployeeSalaryDetailsBO.ActivityStatus);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwEmployeeSalaryDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwEmployeeSalaryDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwEmployeeSalaryDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwEmployeeSalaryDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwEmployeeSalaryDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@dateFrom", curViwEmployeeSalaryDetailsBO.DateFrom);
            UtilityDB.AddParameter(command.Parameters, "@dateTo", curViwEmployeeSalaryDetailsBO.DateTo);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwEmployeeSalaryDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwEmployeeSalaryDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwEmployeeSalaryDetailsBO.Discount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwEmployeeSalaryDetailsBO Find(int payID)
        {
            string commandString = "  SELECT * FROM viwEmployeeSalaryDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwEmployeeSalaryDetails.payID = {0}) ", payID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwEmployeeSalaryDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwEmployeeSalaryDetailsBO();
                    ans.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.EmployeeID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.LastName]);
                    ans.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.ActivityStatus]);
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Fee]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckNumber]);
                    ans.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateFrom]);
                    ans.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateTo]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Description]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayTypeID]);
                    ans.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Discount]);

                }
            }
            return ans;
        }

        public static List<ViwEmployeeSalaryDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwEmployeeSalaryDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwEmployeeSalaryDetailsBO> ans = new List<ViwEmployeeSalaryDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwEmployeeSalaryDetailsBO item = new ViwEmployeeSalaryDetailsBO();
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.EmployeeID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.LastName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.ActivityStatus]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Fee]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckNumber]);
                    item.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateFrom]);
                    item.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateTo]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Description]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayTypeID]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Discount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwEmployeeSalaryDetailsBO> List(string employeeID, string firstName, string lastName, bool? activityStatus, int? payID, int? fee, string payDate, string checkDate, string checkNumber, string dateFrom, string dateTo, string description, int? payTypeID, int? discount)
        {
            string commandString = " SELECT * FROM viwEmployeeSalaryDetails ";
            string wherePart = " WHERE (1=1) ";
            if (employeeID != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.employeeID = '{0}') ", employeeID);
            }

            if (firstName != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.firstName = '{0}') ", firstName);
            }

            if (lastName != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.lastName = '{0}') ", lastName);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.activityStatus = {0}) ", activityStatus.ToString());
            }

            if (payID != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.payID = {0}) ", payID.ToString());
            }

            if (fee != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.fee = {0}) ", fee.ToString());
            }

            if (payDate != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.payDate = '{0}') ", payDate);
            }

            if (checkDate != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.checkDate = '{0}') ", checkDate);
            }

            if (checkNumber != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.checkNumber = '{0}') ", checkNumber);
            }

            if (dateFrom != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.dateFrom = '{0}') ", dateFrom);
            }

            if (dateTo != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.dateTo = '{0}') ", dateTo);
            }

            if (description != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.description = '{0}') ", description);
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (discount != null)
            {
                wherePart += string.Format(" AND (viwEmployeeSalaryDetails.discount = {0}) ", discount.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwEmployeeSalaryDetailsBO> ans = new List<ViwEmployeeSalaryDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwEmployeeSalaryDetailsBO item = new ViwEmployeeSalaryDetailsBO();
                    item.EmployeeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.EmployeeID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.LastName]);
                    item.ActivityStatus = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.ActivityStatus]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Fee]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.CheckNumber]);
                    item.DateFrom = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateFrom]);
                    item.DateTo = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.DateTo]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Description]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.PayTypeID]);
                    item.Discount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwEmployeeSalaryDetails.Discount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class SchoolSpecificationDA : DataAccess
    {
        #region Constructors
        public SchoolSpecificationDA(SchoolSpecificationBO inSchoolSpecificationBO)
        {
            curSchoolSpecificationBO = inSchoolSpecificationBO;
            LastChangeFiller.SetChangesInfo(curSchoolSpecificationBO);
        }
        #endregion


        #region Variables

        private SchoolSpecificationBO curSchoolSpecificationBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO schoolSpecification (" +
            " 	schoolID, " +
            " 	schoolName, " +
            " 	schoolLogo, " +
            " 	address, " +
            " 	managerFirstName, " +
            " 	managerLastName, " +
            " 	managerBirthDate, " +
            " 	degreeLevelID, " +
            " 	managerStudeyMajor, " +
            " 	justificationID, " +
            " 	justificationName, " +
            " 	fondYear, " +
            " 	employeeNumber, " +
            " 	workHour, " +
            " 	schoolGrade, " +
            " 	province, " +
            " 	city, " +
            " 	street, " +
            " 	postalCode, " +
            " 	tell, " +
            " 	fax, " +
            " 	mail, " +
            " 	backgroundImage, " +
            " 	reportTitle, " +
            " 	reportLogo, " +
            " 	reportAddress, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime, reportPayFactorFooterDesc) " +
            " VALUES (" +
            " 	@schoolID, " +
            " 	@schoolName, " +
            " 	@schoolLogo, " +
            " 	@address, " +
            " 	@managerFirstName, " +
            " 	@managerLastName, " +
            " 	@managerBirthDate, " +
            " 	@degreeLevelID, " +
            " 	@managerStudeyMajor, " +
            " 	@justificationID, " +
            " 	@justificationName, " +
            " 	@fondYear, " +
            " 	@employeeNumber, " +
            " 	@workHour, " +
            " 	@schoolGrade, " +
            " 	@province, " +
            " 	@city, " +
            " 	@street, " +
            " 	@postalCode, " +
            " 	@tell, " +
            " 	@fax, " +
            " 	@mail, " +
            " 	@backgroundImage, " +
            " 	@reportTitle, " +
            " 	@reportLogo, " +
            " 	@reportAddress, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime, @reportPayFactorFooterDesc) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@schoolID", curSchoolSpecificationBO.SchoolID);
            UtilityDB.AddParameter(command.Parameters, "@schoolName", curSchoolSpecificationBO.SchoolName);
            UtilityDB.AddPictureToParameters(command.Parameters, "@schoolLogo", curSchoolSpecificationBO.SchoolLogo);
            UtilityDB.AddParameter(command.Parameters, "@address", curSchoolSpecificationBO.Address);
            UtilityDB.AddParameter(command.Parameters, "@managerFirstName", curSchoolSpecificationBO.ManagerFirstName);
            UtilityDB.AddParameter(command.Parameters, "@managerLastName", curSchoolSpecificationBO.ManagerLastName);
            UtilityDB.AddParameter(command.Parameters, "@managerBirthDate", curSchoolSpecificationBO.ManagerBirthDate);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curSchoolSpecificationBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@managerStudeyMajor", curSchoolSpecificationBO.ManagerStudeyMajor);
            UtilityDB.AddParameter(command.Parameters, "@justificationID", curSchoolSpecificationBO.JustificationID);
            UtilityDB.AddParameter(command.Parameters, "@justificationName", curSchoolSpecificationBO.JustificationName);
            UtilityDB.AddParameter(command.Parameters, "@fondYear", curSchoolSpecificationBO.FondYear);
            UtilityDB.AddParameter(command.Parameters, "@employeeNumber", curSchoolSpecificationBO.EmployeeNumber);
            UtilityDB.AddParameter(command.Parameters, "@workHour", curSchoolSpecificationBO.WorkHour);
            UtilityDB.AddParameter(command.Parameters, "@schoolGrade", curSchoolSpecificationBO.SchoolGrade);
            UtilityDB.AddParameter(command.Parameters, "@province", curSchoolSpecificationBO.Province);
            UtilityDB.AddParameter(command.Parameters, "@city", curSchoolSpecificationBO.City);
            UtilityDB.AddParameter(command.Parameters, "@street", curSchoolSpecificationBO.Street);
            UtilityDB.AddParameter(command.Parameters, "@postalCode", curSchoolSpecificationBO.PostalCode);
            UtilityDB.AddParameter(command.Parameters, "@tell", curSchoolSpecificationBO.Tell);
            UtilityDB.AddParameter(command.Parameters, "@fax", curSchoolSpecificationBO.Fax);
            UtilityDB.AddParameter(command.Parameters, "@mail", curSchoolSpecificationBO.Mail);
            UtilityDB.AddPictureToParameters(command.Parameters, "@backgroundImage", curSchoolSpecificationBO.BackgroundImage);
            UtilityDB.AddParameter(command.Parameters, "@reportTitle", curSchoolSpecificationBO.ReportTitle);
            UtilityDB.AddPictureToParameters(command.Parameters, "@reportLogo", curSchoolSpecificationBO.ReportLogo);
            UtilityDB.AddParameter(command.Parameters, "@reportAddress", curSchoolSpecificationBO.ReportAddress);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curSchoolSpecificationBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curSchoolSpecificationBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curSchoolSpecificationBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@reportPayFactorFooterDesc", curSchoolSpecificationBO.ReportPayFactorFooterDesc);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM schoolSpecification " +
            " WHERE (1=1) " +
            " AND 	schoolID = @schoolID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@schoolID", curSchoolSpecificationBO.SchoolID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
                " UPDATE schoolSpecification SET " +
                " 	schoolName = @schoolName, " +
                " 	schoolLogo = @schoolLogo, " +
                " 	address = @address, " +
                " 	managerFirstName = @managerFirstName, " +
                " 	managerLastName = @managerLastName, " +
                " 	managerBirthDate = @managerBirthDate, " +
                " 	degreeLevelID = @degreeLevelID, " +
                " 	managerStudeyMajor = @managerStudeyMajor, " +
                " 	justificationID = @justificationID, " +
                " 	justificationName = @justificationName, " +
                " 	fondYear = @fondYear, " +
                " 	employeeNumber = @employeeNumber, " +
                " 	workHour = @workHour, " +
                " 	schoolGrade = @schoolGrade, " +
                " 	province = @province, " +
                " 	city = @city, " +
                " 	street = @street, " +
                " 	postalCode = @postalCode, " +
                " 	tell = @tell, " +
                " 	fax = @fax, " +
                " 	mail = @mail, " +
                " 	backgroundImage = @backgroundImage, " +
                " 	reportTitle = @reportTitle, " +
                " 	reportLogo = @reportLogo, " +
                " 	reportAddress = @reportAddress, " +
                " 	lastChangeID = @lastChangeID, " +
                " 	lastChangeDate = @lastChangeDate, " +
                " 	lastChangeTime = @lastChangeTime, " +
                "   reportPayFactorFooterDesc = @reportPayFactorFooterDesc "+     
            " WHERE (1=1) " +
            " AND 	schoolID = @schoolID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@schoolID", curSchoolSpecificationBO.SchoolID);
            UtilityDB.AddParameter(command.Parameters, "@schoolName", curSchoolSpecificationBO.SchoolName);
            UtilityDB.AddPictureToParameters(command.Parameters, "@schoolLogo", curSchoolSpecificationBO.SchoolLogo);
            UtilityDB.AddParameter(command.Parameters, "@address", curSchoolSpecificationBO.Address);
            UtilityDB.AddParameter(command.Parameters, "@managerFirstName", curSchoolSpecificationBO.ManagerFirstName);
            UtilityDB.AddParameter(command.Parameters, "@managerLastName", curSchoolSpecificationBO.ManagerLastName);
            UtilityDB.AddParameter(command.Parameters, "@managerBirthDate", curSchoolSpecificationBO.ManagerBirthDate);
            UtilityDB.AddParameter(command.Parameters, "@degreeLevelID", curSchoolSpecificationBO.DegreeLevelID);
            UtilityDB.AddParameter(command.Parameters, "@managerStudeyMajor", curSchoolSpecificationBO.ManagerStudeyMajor);
            UtilityDB.AddParameter(command.Parameters, "@justificationID", curSchoolSpecificationBO.JustificationID);
            UtilityDB.AddParameter(command.Parameters, "@justificationName", curSchoolSpecificationBO.JustificationName);
            UtilityDB.AddParameter(command.Parameters, "@fondYear", curSchoolSpecificationBO.FondYear);
            UtilityDB.AddParameter(command.Parameters, "@employeeNumber", curSchoolSpecificationBO.EmployeeNumber);
            UtilityDB.AddParameter(command.Parameters, "@workHour", curSchoolSpecificationBO.WorkHour);
            UtilityDB.AddParameter(command.Parameters, "@schoolGrade", curSchoolSpecificationBO.SchoolGrade);
            UtilityDB.AddParameter(command.Parameters, "@province", curSchoolSpecificationBO.Province);
            UtilityDB.AddParameter(command.Parameters, "@city", curSchoolSpecificationBO.City);
            UtilityDB.AddParameter(command.Parameters, "@street", curSchoolSpecificationBO.Street);
            UtilityDB.AddParameter(command.Parameters, "@postalCode", curSchoolSpecificationBO.PostalCode);
            UtilityDB.AddParameter(command.Parameters, "@tell", curSchoolSpecificationBO.Tell);
            UtilityDB.AddParameter(command.Parameters, "@fax", curSchoolSpecificationBO.Fax);
            UtilityDB.AddParameter(command.Parameters, "@mail", curSchoolSpecificationBO.Mail);
            UtilityDB.AddPictureToParameters(command.Parameters, "@backgroundImage", curSchoolSpecificationBO.BackgroundImage);
            UtilityDB.AddParameter(command.Parameters, "@reportTitle", curSchoolSpecificationBO.ReportTitle);
            UtilityDB.AddPictureToParameters(command.Parameters, "@reportLogo", curSchoolSpecificationBO.ReportLogo);
            UtilityDB.AddParameter(command.Parameters, "@reportAddress", curSchoolSpecificationBO.ReportAddress);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curSchoolSpecificationBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curSchoolSpecificationBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curSchoolSpecificationBO.LastChangeTime);
            UtilityDB.AddParameter(command.Parameters, "@reportPayFactorFooterDesc", curSchoolSpecificationBO.ReportPayFactorFooterDesc);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static SchoolSpecificationBO Find(int schoolID)
        {
            string commandString = "  SELECT * FROM schoolSpecification ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (schoolSpecification.schoolID = {0}) ", schoolID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            SchoolSpecificationBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new SchoolSpecificationBO();
                    ans.SchoolID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SchoolSpecification.SchoolID]);
                    ans.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.SchoolName]);
                    ans.SchoolLogo = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.SchoolLogo]);
                    ans.Address = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Address]);
                    ans.ManagerFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerFirstName]);
                    ans.ManagerLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerLastName]);
                    ans.ManagerBirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerBirthDate]);
                    ans.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.SchoolSpecification.DegreeLevelID]);
                    ans.ManagerStudeyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerStudeyMajor]);
                    ans.JustificationID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.JustificationID]);
                    ans.JustificationName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.JustificationName]);
                    ans.FondYear = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.FondYear]);
                    ans.EmployeeNumber = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.SchoolSpecification.EmployeeNumber]);
                    ans.WorkHour = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.WorkHour]);
                    ans.SchoolGrade = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.SchoolGrade]);
                    ans.Province = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Province]);
                    ans.City = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.City]);
                    ans.Street = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Street]);
                    ans.PostalCode = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.PostalCode]);
                    ans.Tell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Tell]);
                    ans.Fax = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Fax]);
                    ans.Mail = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Mail]);
                    ans.BackgroundImage = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.BackgroundImage]);
                    ans.ReportTitle = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportTitle]);
                    ans.ReportLogo = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.ReportLogo]);
                    ans.ReportAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportAddress]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeTime]);
                    ans.ReportPayFactorFooterDesc = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportPayFactorFooterDesc]);

                }
            }
            return ans;
        }

        public static List<SchoolSpecificationBO> List()
        {
            string commandString = " SELECT * FROM schoolSpecification ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<SchoolSpecificationBO> ans = new List<SchoolSpecificationBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    SchoolSpecificationBO item = new SchoolSpecificationBO();
                    item.SchoolID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.SchoolSpecification.SchoolID]);
                    item.SchoolName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.SchoolName]);
                    item.SchoolLogo = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.SchoolLogo]);
                    item.Address = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Address]);
                    item.ManagerFirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerFirstName]);
                    item.ManagerLastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerLastName]);
                    item.ManagerBirthDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerBirthDate]);
                    item.DegreeLevelID = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.SchoolSpecification.DegreeLevelID]);
                    item.ManagerStudeyMajor = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ManagerStudeyMajor]);
                    item.JustificationID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.JustificationID]);
                    item.JustificationName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.JustificationName]);
                    item.FondYear = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.FondYear]);
                    item.EmployeeNumber = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.SchoolSpecification.EmployeeNumber]);
                    item.WorkHour = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.WorkHour]);
                    item.SchoolGrade = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.SchoolGrade]);
                    item.Province = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Province]);
                    item.City = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.City]);
                    item.Street = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Street]);
                    item.PostalCode = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.PostalCode]);
                    item.Tell = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Tell]);
                    item.Fax = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Fax]);
                    item.Mail = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.Mail]);
                    item.BackgroundImage = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.BackgroundImage]);
                    item.ReportTitle = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportTitle]);
                    item.ReportLogo = UtilityDB.ReadReader<Image>(reader[DatabaseSchema.SchoolSpecification.ReportLogo]);
                    item.ReportAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportAddress]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.LastChangeTime]);
                    item.ReportPayFactorFooterDesc = UtilityDB.ReadReader<string>(reader[DatabaseSchema.SchoolSpecification.ReportPayFactorFooterDesc]);


                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStudentFinancialDetailsDA : DataAccess
    {
        #region Constructors
        public ViwStudentFinancialDetailsDA(ViwStudentFinancialDetailsBO inViwStudentFinancialDetailsBO)
        {
            curViwStudentFinancialDetailsBO = inViwStudentFinancialDetailsBO;
        }
        #endregion


        #region Variables

        private ViwStudentFinancialDetailsBO curViwStudentFinancialDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStudentFinancialDetails (" +
            " 	classID, " +
            " 	studentID, " +
            " 	className, " +
            " 	payID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	IsIncome, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	majorID, " +
            " 	classRegisterationDate, " +
            " 	payTypeName) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@studentID, " +
            " 	@className, " +
            " 	@payID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@IsIncome, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@majorID, " +
            " 	@classRegisterationDate, " +
            " 	@payTypeName) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialDetailsBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwStudentFinancialDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwStudentFinancialDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwStudentFinancialDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwStudentFinancialDetailsBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwStudentFinancialDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwStudentFinancialDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwStudentFinancialDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwStudentFinancialDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@IsIncome", curViwStudentFinancialDetailsBO.IsIncome);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentFinancialDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentFinancialDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwStudentFinancialDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwStudentFinancialDetailsBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curViwStudentFinancialDetailsBO.PayTypeName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStudentFinancialDetails " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStudentFinancialDetails SET " +
            " 	classID = @classID, " +
            " 	studentID = @studentID, " +
            " 	className = @className, " +
            " 	payID = @payID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	IsIncome = @IsIncome, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	majorID = @majorID, " +
            " 	classRegisterationDate = @classRegisterationDate, " +
            " 	payTypeName = @payTypeName " +
            " WHERE (1=1) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialDetailsBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwStudentFinancialDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwStudentFinancialDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwStudentFinancialDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwStudentFinancialDetailsBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwStudentFinancialDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwStudentFinancialDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwStudentFinancialDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwStudentFinancialDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@IsIncome", curViwStudentFinancialDetailsBO.IsIncome);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentFinancialDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentFinancialDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwStudentFinancialDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwStudentFinancialDetailsBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curViwStudentFinancialDetailsBO.PayTypeName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStudentFinancialDetailsBO Find()
        {
            string commandString = "  SELECT * FROM viwStudentFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStudentFinancialDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStudentFinancialDetailsBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.StudentID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassName]);
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentFinancialDetails.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.Description]);
                    ans.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.IsIncome]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.LastName]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.MajorID]);
                    ans.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassRegisterationDate]);
                    ans.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeName]);

                }
            }
            return ans;
        }

        public static List<ViwStudentFinancialDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwStudentFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentFinancialDetailsBO> ans = new List<ViwStudentFinancialDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentFinancialDetailsBO item = new ViwStudentFinancialDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.StudentID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassName]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentFinancialDetails.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.Description]);
                    item.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.IsIncome]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.LastName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.MajorID]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassRegisterationDate]);
                    item.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeName]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStudentFinancialDetailsBO> List(int? classID, string studentID, int? majorID, string classRegisterationDate)
        {
            string commandString = " SELECT * FROM viwStudentFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialDetails.classID = {0}) ", classID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialDetails.studentID = '{0}') ", studentID);
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialDetails.majorID = {0}) ", majorID.ToString());
            }

            if (classRegisterationDate != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialDetails.classRegisterationDate = '{0}') ", classRegisterationDate);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentFinancialDetailsBO> ans = new List<ViwStudentFinancialDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentFinancialDetailsBO item = new ViwStudentFinancialDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.StudentID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassName]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentFinancialDetails.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.Description]);
                    item.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.IsIncome]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.LastName]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialDetails.MajorID]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.ClassRegisterationDate]);
                    item.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialDetails.PayTypeName]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStudentFinancialStatusDA : DataAccess
    {
        #region Constructors
        public ViwStudentFinancialStatusDA(ViwStudentFinancialStatusBO inViwStudentFinancialStatusBO)
        {
            curViwStudentFinancialStatusBO = inViwStudentFinancialStatusBO;
        }
        #endregion


        #region Variables

        private ViwStudentFinancialStatusBO curViwStudentFinancialStatusBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStudentFinancialStatus (" +
            " 	classID, " +
            " 	studentID, " +
            " 	studentPayedAmount, " +
            " 	balancedAmount, " +
            " 	studentFinalPay, " +
            " 	studentMustPay, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	className, " +
            " 	classRegisterationDate, " +
            " 	classTotalPrice) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@studentID, " +
            " 	@studentPayedAmount, " +
            " 	@balancedAmount, " +
            " 	@studentFinalPay, " +
            " 	@studentMustPay, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@className, " +
            " 	@classRegisterationDate, " +
            " 	@classTotalPrice) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentPayedAmount", curViwStudentFinancialStatusBO.StudentPayedAmount);
            UtilityDB.AddParameter(command.Parameters, "@balancedAmount", curViwStudentFinancialStatusBO.BalancedAmount);
            UtilityDB.AddParameter(command.Parameters, "@studentFinalPay", curViwStudentFinancialStatusBO.StudentFinalPay);
            UtilityDB.AddParameter(command.Parameters, "@studentMustPay", curViwStudentFinancialStatusBO.StudentMustPay);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentFinancialStatusBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentFinancialStatusBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialStatusBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwStudentFinancialStatusBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@classTotalPrice", curViwStudentFinancialStatusBO.ClassTotalPrice);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStudentFinancialStatus " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStudentFinancialStatus SET " +
            " 	studentPayedAmount = @studentPayedAmount, " +
            " 	balancedAmount = @balancedAmount, " +
            " 	studentFinalPay = @studentFinalPay, " +
            " 	studentMustPay = @studentMustPay, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	className = @className, " +
            " 	classRegisterationDate = @classRegisterationDate, " +
            " 	classTotalPrice = @classTotalPrice " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentFinancialStatusBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentPayedAmount", curViwStudentFinancialStatusBO.StudentPayedAmount);
            UtilityDB.AddParameter(command.Parameters, "@balancedAmount", curViwStudentFinancialStatusBO.BalancedAmount);
            UtilityDB.AddParameter(command.Parameters, "@studentFinalPay", curViwStudentFinancialStatusBO.StudentFinalPay);
            UtilityDB.AddParameter(command.Parameters, "@studentMustPay", curViwStudentFinancialStatusBO.StudentMustPay);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentFinancialStatusBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentFinancialStatusBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentFinancialStatusBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwStudentFinancialStatusBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@classTotalPrice", curViwStudentFinancialStatusBO.ClassTotalPrice);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStudentFinancialStatusBO Find(int classID, string studentID)
        {
            if (studentID == null) return null;
            string commandString = "  SELECT * FROM viwStudentFinancialStatus ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStudentFinancialStatus.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (viwStudentFinancialStatus.studentID = '{0}') ", studentID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStudentFinancialStatusBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStudentFinancialStatusBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
                    ans.StudentPayedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentPayedAmount]);
                    ans.BalancedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.BalancedAmount]);
                    ans.StudentFinalPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentFinalPay]);
                    ans.StudentMustPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentMustPay]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.LastName]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
                    ans.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassRegisterationDate]);
                    ans.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassTotalPrice]);
                    ans.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    ans.ReturnMoneyForTeacherAbsentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentCount]);

                }
            }
            return ans;
        }

        public static List<ViwStudentFinancialStatusBO> List()
        {
            string commandString = " SELECT * FROM viwStudentFinancialStatus ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentFinancialStatusBO> ans = new List<ViwStudentFinancialStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentFinancialStatusBO item = new ViwStudentFinancialStatusBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
                    item.StudentPayedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentPayedAmount]);
                    item.BalancedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.BalancedAmount]);
                    item.StudentFinalPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentFinalPay]);
                    item.StudentMustPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentMustPay]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.LastName]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassRegisterationDate]);
                    item.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassTotalPrice]);
                    item.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    item.ReturnMoneyForTeacherAbsentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentCount]);
                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStudentFinancialStatusBO> List(int? classID, string studentID, bool? activityStatus)
        {

            string commandString = " SELECT viwStudentFinancialStatus.* FROM viwStudentFinancialStatus inner join class on class.classid = viwStudentFinancialStatus.classid ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialStatus.classID = {0}) ", classID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwStudentFinancialStatus.studentID = '{0}') ", studentID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentFinancialStatusBO> ans = new List<ViwStudentFinancialStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentFinancialStatusBO item = new ViwStudentFinancialStatusBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentID]);
                    item.StudentPayedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentPayedAmount]);
                    item.BalancedAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.BalancedAmount]);
                    item.StudentFinalPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentFinalPay]);
                    item.StudentMustPay = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.StudentMustPay]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.LastName]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassName]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassRegisterationDate]);
                    item.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ClassTotalPrice]);
                    item.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    item.ReturnMoneyForTeacherAbsentCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentFinancialStatus.ReturnMoneyForTeacherAbsentCount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStudentSessionStatusDA : DataAccess
    {
        #region Constructors
        public ViwStudentSessionStatusDA(ViwStudentSessionStatusBO inViwStudentSessionStatusBO)
        {
            curViwStudentSessionStatusBO = inViwStudentSessionStatusBO;
        }
        #endregion


        #region Variables

        private ViwStudentSessionStatusBO curViwStudentSessionStatusBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStudentSessionStatus (" +
            " 	studentID, " +
            " 	studentAbseneceCount, " +
            " 	continuousAbseneceCount, " +
            " 	teacherAbsenceCount, " +
            " 	classID, " +
            " 	willHeldCount, " +
            " 	heldCount, " +
            " 	notlHeldCount, " +
            " 	totalDedicatedSessions) " +
            " VALUES (" +
            " 	@studentID, " +
            " 	@studentAbseneceCount, " +
            " 	@continuousAbseneceCount, " +
            " 	@teacherAbsenceCount, " +
            " 	@classID, " +
            " 	@willHeldCount, " +
            " 	@heldCount, " +
            " 	@notlHeldCount, " +
            " 	@totalDedicatedSessions) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionStatusBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbseneceCount", curViwStudentSessionStatusBO.StudentAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbseneceCount", curViwStudentSessionStatusBO.ContinuousAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsenceCount", curViwStudentSessionStatusBO.TeacherAbsenceCount);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@willHeldCount", curViwStudentSessionStatusBO.WillHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@heldCount", curViwStudentSessionStatusBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@notlHeldCount", curViwStudentSessionStatusBO.NotlHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@totalDedicatedSessions", curViwStudentSessionStatusBO.TotalDedicatedSessions);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStudentSessionStatus " +
            " WHERE (1=1) " +
            " AND 	studentID = @studentID  " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionStatusBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionStatusBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStudentSessionStatus SET " +
            " 	studentAbseneceCount = @studentAbseneceCount, " +
            " 	continuousAbseneceCount = @continuousAbseneceCount, " +
            " 	teacherAbsenceCount = @teacherAbsenceCount, " +
            " 	willHeldCount = @willHeldCount, " +
            " 	heldCount = @heldCount, " +
            " 	notlHeldCount = @notlHeldCount, " +
            " 	totalDedicatedSessions = @totalDedicatedSessions " +
            " WHERE (1=1) " +
            " AND 	studentID = @studentID  " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionStatusBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbseneceCount", curViwStudentSessionStatusBO.StudentAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbseneceCount", curViwStudentSessionStatusBO.ContinuousAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsenceCount", curViwStudentSessionStatusBO.TeacherAbsenceCount);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@willHeldCount", curViwStudentSessionStatusBO.WillHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@heldCount", curViwStudentSessionStatusBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@notlHeldCount", curViwStudentSessionStatusBO.NotlHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@totalDedicatedSessions", curViwStudentSessionStatusBO.TotalDedicatedSessions);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStudentSessionStatusBO Find(string studentID, int classID)
        {
            if (studentID == null) return null;
            string commandString = "  SELECT * FROM viwStudentSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStudentSessionStatus.studentID = '{0}') ", studentID);
            wherePart += string.Format(" AND (viwStudentSessionStatus.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStudentSessionStatusBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStudentSessionStatusBO();
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentID]);
                    ans.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentAbseneceCount]);
                    ans.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.ContinuousAbseneceCount]);
                    ans.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TeacherAbsenceCount]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionStatus.ClassID]);
                    ans.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.WillHeldCount]);
                    ans.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.HeldCount]);
                    ans.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.NotlHeldCount]);
                    ans.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TotalDedicatedSessions]);

                }
            }
            return ans;
        }

        public static List<ViwStudentSessionStatusBO> List()
        {
            string commandString = " SELECT * FROM viwStudentSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentSessionStatusBO> ans = new List<ViwStudentSessionStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentSessionStatusBO item = new ViwStudentSessionStatusBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentID]);
                    item.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentAbseneceCount]);
                    item.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.ContinuousAbseneceCount]);
                    item.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TeacherAbsenceCount]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionStatus.ClassID]);
                    item.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.WillHeldCount]);
                    item.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.HeldCount]);
                    item.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.NotlHeldCount]);
                    item.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TotalDedicatedSessions]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStudentSessionStatusBO> List(string studentID, int? classID)
        {
            string commandString = " SELECT * FROM viwStudentSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionStatus.studentID = '{0}') ", studentID);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionStatus.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentSessionStatusBO> ans = new List<ViwStudentSessionStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentSessionStatusBO item = new ViwStudentSessionStatusBO();
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentID]);
                    item.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.StudentAbseneceCount]);
                    item.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.ContinuousAbseneceCount]);
                    item.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TeacherAbsenceCount]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionStatus.ClassID]);
                    item.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.WillHeldCount]);
                    item.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.HeldCount]);
                    item.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.NotlHeldCount]);
                    item.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionStatus.TotalDedicatedSessions]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwStudentSessionDetailsDA : DataAccess
    {
        #region Constructors
        public ViwStudentSessionDetailsDA(ViwStudentSessionDetailsBO inViwStudentSessionDetailsBO)
        {
            curViwStudentSessionDetailsBO = inViwStudentSessionDetailsBO;
        }
        #endregion


        #region Variables

        private ViwStudentSessionDetailsBO curViwStudentSessionDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwStudentSessionDetails (" +
            " 	classID, " +
            " 	studentID, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	className, " +
            " 	classDate, " +
            " 	timeID, " +
            " 	studentAbsence, " +
            " 	continuousAbsence, " +
            " 	teacherAbsence, " +
            " 	successorTeacher, " +
            " 	sessionStatus, " +
            " 	roomNo, " +
            " 	teacherID) " +
            " VALUES (" +
            " 	@classID, " +
            " 	@studentID, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@className, " +
            " 	@classDate, " +
            " 	@timeID, " +
            " 	@studentAbsence, " +
            " 	@continuousAbsence, " +
            " 	@teacherAbsence, " +
            " 	@successorTeacher, " +
            " 	@sessionStatus, " +
            " 	@roomNo, " +
            " 	@teacherID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionDetailsBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentSessionDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentSessionDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentSessionDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwStudentSessionDetailsBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwStudentSessionDetailsBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curViwStudentSessionDetailsBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curViwStudentSessionDetailsBO.ContinuousAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curViwStudentSessionDetailsBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curViwStudentSessionDetailsBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curViwStudentSessionDetailsBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curViwStudentSessionDetailsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwStudentSessionDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwStudentSessionDetails " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionDetailsBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwStudentSessionDetailsBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwStudentSessionDetailsBO.TimeID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwStudentSessionDetails SET " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName, " +
            " 	className = @className, " +
            " 	studentAbsence = @studentAbsence, " +
            " 	continuousAbsence = @continuousAbsence, " +
            " 	teacherAbsence = @teacherAbsence, " +
            " 	successorTeacher = @successorTeacher, " +
            " 	sessionStatus = @sessionStatus, " +
            " 	roomNo = @roomNo, " +
            " 	teacherID = @teacherID " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	studentID = @studentID  " +
            " AND 	classDate = @classDate  " +
            " AND 	timeID = @timeID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwStudentSessionDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentID", curViwStudentSessionDetailsBO.StudentID);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwStudentSessionDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwStudentSessionDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwStudentSessionDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwStudentSessionDetailsBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwStudentSessionDetailsBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curViwStudentSessionDetailsBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curViwStudentSessionDetailsBO.ContinuousAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curViwStudentSessionDetailsBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curViwStudentSessionDetailsBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curViwStudentSessionDetailsBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curViwStudentSessionDetailsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwStudentSessionDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwStudentSessionDetailsBO Find(int classID, string studentID, string classDate, int timeID)
        {
            if (studentID == null || classDate == null) return null;
            string commandString = "  SELECT * FROM viwStudentSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwStudentSessionDetails.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (viwStudentSessionDetails.studentID = '{0}') ", studentID);
            wherePart += string.Format(" AND (viwStudentSessionDetails.classDate = '{0}') ", classDate);
            wherePart += string.Format(" AND (viwStudentSessionDetails.timeID = {0}) ", timeID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwStudentSessionDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwStudentSessionDetailsBO();
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassID]);
                    ans.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentID]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.LastName]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassName]);
                    ans.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassDate]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.TimeID]);
                    ans.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentAbsence]);
                    ans.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.ContinuousAbsence]);
                    ans.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherAbsence]);
                    ans.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.SuccessorTeacher]);
                    ans.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.SessionStatus]);
                    ans.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionDetails.RoomNo]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherID]);

                }
            }
            return ans;
        }

        public static List<ViwStudentSessionDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwStudentSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentSessionDetailsBO> ans = new List<ViwStudentSessionDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentSessionDetailsBO item = new ViwStudentSessionDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.LastName]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.ContinuousAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherAbsence]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.SuccessorTeacher]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionDetails.RoomNo]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwStudentSessionDetailsBO> List(int? classID, string studentID, string classDate, int? timeID, bool? studentAbsence, bool? continuousAbsence, bool? teacherAbsence, string successorTeacher, int? sessionStatus, int? roomNo, string teacherID)
        {
            string commandString = " SELECT * FROM viwStudentSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            if (classID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.classID = {0}) ", classID.ToString());
            }

            if (studentID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.studentID = '{0}') ", studentID);
            }

            if (classDate != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.classDate = '{0}') ", classDate);
            }

            if (timeID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.timeID = {0}) ", timeID.ToString());
            }

            if (studentAbsence != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.studentAbsence = {0}) ", studentAbsence.ToString());
            }

            if (continuousAbsence != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.continuousAbsence = {0}) ", continuousAbsence.ToString());
            }

            if (teacherAbsence != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.teacherAbsence = {0}) ", teacherAbsence.ToString());
            }

            if (successorTeacher != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.successorTeacher = '{0}') ", successorTeacher);
            }

            if (sessionStatus != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.sessionStatus = {0}) ", sessionStatus.ToString());
            }

            if (roomNo != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.roomNo = {0}) ", roomNo.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwStudentSessionDetails.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwStudentSessionDetailsBO> ans = new List<ViwStudentSessionDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwStudentSessionDetailsBO item = new ViwStudentSessionDetailsBO();
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassID]);
                    item.StudentID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentID]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.LastName]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.TimeID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.StudentAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.ContinuousAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherAbsence]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.SuccessorTeacher]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwStudentSessionDetails.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwStudentSessionDetails.RoomNo]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwStudentSessionDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwTeacherFinancialDetailsDA : DataAccess
    {
        #region Constructors
        public ViwTeacherFinancialDetailsDA(ViwTeacherFinancialDetailsBO inViwTeacherFinancialDetailsBO)
        {
            curViwTeacherFinancialDetailsBO = inViwTeacherFinancialDetailsBO;
        }
        #endregion


        #region Variables

        private ViwTeacherFinancialDetailsBO curViwTeacherFinancialDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwTeacherFinancialDetails (" +
            " 	isSuccessorTeacher, " +
            " 	className, " +
            " 	IsIncome, " +
            " 	majorID, " +
            " 	classRegisterationDate, " +
            " 	payTypeName, " +
            " 	payID, " +
            " 	payTypeID, " +
            " 	fee, " +
            " 	discount, " +
            " 	payDate, " +
            " 	checkDate, " +
            " 	checkNumber, " +
            " 	description, " +
            " 	firstName, " +
            " 	lastName, " +
            " 	classID, " +
            " 	teacherID) " +
            " VALUES (" +
            " 	@isSuccessorTeacher, " +
            " 	@className, " +
            " 	@IsIncome, " +
            " 	@majorID, " +
            " 	@classRegisterationDate, " +
            " 	@payTypeName, " +
            " 	@payID, " +
            " 	@payTypeID, " +
            " 	@fee, " +
            " 	@discount, " +
            " 	@payDate, " +
            " 	@checkDate, " +
            " 	@checkNumber, " +
            " 	@description, " +
            " 	@firstName, " +
            " 	@lastName, " +
            " 	@classID, " +
            " 	@teacherID) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessorTeacher", curViwTeacherFinancialDetailsBO.IsSuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@IsIncome", curViwTeacherFinancialDetailsBO.IsIncome);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwTeacherFinancialDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwTeacherFinancialDetailsBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curViwTeacherFinancialDetailsBO.PayTypeName);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwTeacherFinancialDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwTeacherFinancialDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwTeacherFinancialDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwTeacherFinancialDetailsBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwTeacherFinancialDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwTeacherFinancialDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwTeacherFinancialDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwTeacherFinancialDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherFinancialDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherFinancialDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwTeacherFinancialDetails " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwTeacherFinancialDetails SET " +
            " 	isSuccessorTeacher = @isSuccessorTeacher, " +
            " 	className = @className, " +
            " 	IsIncome = @IsIncome, " +
            " 	majorID = @majorID, " +
            " 	classRegisterationDate = @classRegisterationDate, " +
            " 	payTypeName = @payTypeName, " +
            " 	payID = @payID, " +
            " 	payTypeID = @payTypeID, " +
            " 	fee = @fee, " +
            " 	discount = @discount, " +
            " 	payDate = @payDate, " +
            " 	checkDate = @checkDate, " +
            " 	checkNumber = @checkNumber, " +
            " 	description = @description, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessorTeacher", curViwTeacherFinancialDetailsBO.IsSuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@IsIncome", curViwTeacherFinancialDetailsBO.IsIncome);
            UtilityDB.AddParameter(command.Parameters, "@majorID", curViwTeacherFinancialDetailsBO.MajorID);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwTeacherFinancialDetailsBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@payTypeName", curViwTeacherFinancialDetailsBO.PayTypeName);
            UtilityDB.AddParameter(command.Parameters, "@payID", curViwTeacherFinancialDetailsBO.PayID);
            UtilityDB.AddParameter(command.Parameters, "@payTypeID", curViwTeacherFinancialDetailsBO.PayTypeID);
            UtilityDB.AddParameter(command.Parameters, "@fee", curViwTeacherFinancialDetailsBO.Fee);
            UtilityDB.AddParameter(command.Parameters, "@discount", curViwTeacherFinancialDetailsBO.Discount);
            UtilityDB.AddParameter(command.Parameters, "@payDate", curViwTeacherFinancialDetailsBO.PayDate);
            UtilityDB.AddParameter(command.Parameters, "@checkDate", curViwTeacherFinancialDetailsBO.CheckDate);
            UtilityDB.AddParameter(command.Parameters, "@checkNumber", curViwTeacherFinancialDetailsBO.CheckNumber);
            UtilityDB.AddParameter(command.Parameters, "@description", curViwTeacherFinancialDetailsBO.Description);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherFinancialDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherFinancialDetailsBO.LastName);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialDetailsBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwTeacherFinancialDetailsBO Find(int classID, string teacherID)
        {
            if (teacherID == null) return null;
            string commandString = "  SELECT * FROM viwTeacherFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwTeacherFinancialDetails.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (viwTeacherFinancialDetails.teacherID = '{0}') ", teacherID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwTeacherFinancialDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwTeacherFinancialDetailsBO();
                    ans.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsSuccessorTeacher]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassName]);
                    ans.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsIncome]);
                    ans.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.MajorID]);
                    ans.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassRegisterationDate]);
                    ans.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeName]);
                    ans.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayID]);
                    ans.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeID]);
                    ans.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Fee]);
                    ans.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Discount]);
                    ans.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayDate]);
                    ans.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckDate]);
                    ans.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckNumber]);
                    ans.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Description]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.LastName]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.TeacherID]);

                }
            }
            return ans;
        }

        public static List<ViwTeacherFinancialDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwTeacherFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherFinancialDetailsBO> ans = new List<ViwTeacherFinancialDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherFinancialDetailsBO item = new ViwTeacherFinancialDetailsBO();
                    item.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsSuccessorTeacher]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassName]);
                    item.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsIncome]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.MajorID]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassRegisterationDate]);
                    item.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeName]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Description]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.LastName]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwTeacherFinancialDetailsBO> List(int? isSuccessorTeacher, int? IsIncome, int? majorID, int? payTypeID, int? classID, string teacherID)
        {
            string commandString = " SELECT * FROM viwTeacherFinancialDetails ";
            string wherePart = " WHERE (1=1) ";
            if (isSuccessorTeacher != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.isSuccessorTeacher = {0}) ", isSuccessorTeacher.ToString());
            }

            if (IsIncome != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.IsIncome = {0}) ", IsIncome.ToString());
            }

            if (majorID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.majorID = {0}) ", majorID.ToString());
            }

            if (payTypeID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.payTypeID = {0}) ", payTypeID.ToString());
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.classID = {0}) ", classID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialDetails.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherFinancialDetailsBO> ans = new List<ViwTeacherFinancialDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherFinancialDetailsBO item = new ViwTeacherFinancialDetailsBO();
                    item.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsSuccessorTeacher]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassName]);
                    item.IsIncome = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.IsIncome]);
                    item.MajorID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.MajorID]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassRegisterationDate]);
                    item.PayTypeName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeName]);
                    item.PayID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayID]);
                    item.PayTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayTypeID]);
                    item.Fee = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Fee]);
                    item.Discount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Discount]);
                    item.PayDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.PayDate]);
                    item.CheckDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckDate]);
                    item.CheckNumber = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.CheckNumber]);
                    item.Description = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.Description]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.LastName]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialDetails.ClassID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialDetails.TeacherID]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwTeacherFinancialStatusDA : DataAccess
    {
        #region Constructors
        public ViwTeacherFinancialStatusDA(ViwTeacherFinancialStatusBO inViwTeacherFinancialStatusBO)
        {
            curViwTeacherFinancialStatusBO = inViwTeacherFinancialStatusBO;
        }
        #endregion


        #region Variables

        private ViwTeacherFinancialStatusBO curViwTeacherFinancialStatusBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwTeacherFinancialStatus (" +
            " 	isSuccessorTeacher, " +
            " 	classID, " +
            " 	className, " +
            " 	teacherID, " +
            " 	contractValue, " +
            " 	contractTypeID, " +
            " 	paidToTeacher, " +
            " 	gotFromTeacherBalance, " +
            " 	finalPaidToTeacher, " +
            " 	classRegisterationDate, " +
            " 	classTotalPrice, " +
            " 	returnMoneyForTeacherAbsentAmount, " +
            " 	schoolPrice, " +
            " 	sessionCount, " +
            " 	teacherEachSessionPortion, " +
            " 	teacherTotalPortion, " +
            " 	mustPaySessionCount, " +
            " 	mustPayToTeacherAmount) " +
            " VALUES (" +
            " 	@isSuccessorTeacher, " +
            " 	@classID, " +
            " 	@className, " +
            " 	@teacherID, " +
            " 	@contractValue, " +
            " 	@contractTypeID, " +
            " 	@paidToTeacher, " +
            " 	@gotFromTeacherBalance, " +
            " 	@finalPaidToTeacher, " +
            " 	@classRegisterationDate, " +
            " 	@classTotalPrice, " +
            " 	@returnMoneyForTeacherAbsentAmount, " +
            " 	@schoolPrice, " +
            " 	@sessionCount, " +
            " 	@teacherEachSessionPortion, " +
            " 	@teacherTotalPortion, " +
            " 	@mustPaySessionCount, " +
            " 	@mustPayToTeacherAmount) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessorTeacher", curViwTeacherFinancialStatusBO.IsSuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialStatusBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@contractValue", curViwTeacherFinancialStatusBO.ContractValue);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curViwTeacherFinancialStatusBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@paidToTeacher", curViwTeacherFinancialStatusBO.PaidToTeacher);
            UtilityDB.AddParameter(command.Parameters, "@gotFromTeacherBalance", curViwTeacherFinancialStatusBO.GotFromTeacherBalance);
            UtilityDB.AddParameter(command.Parameters, "@finalPaidToTeacher", curViwTeacherFinancialStatusBO.FinalPaidToTeacher);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwTeacherFinancialStatusBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@classTotalPrice", curViwTeacherFinancialStatusBO.ClassTotalPrice);
            UtilityDB.AddParameter(command.Parameters, "@returnMoneyForTeacherAbsentAmount", curViwTeacherFinancialStatusBO.ReturnMoneyForTeacherAbsentAmount);
            UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curViwTeacherFinancialStatusBO.SchoolPrice);
            UtilityDB.AddParameter(command.Parameters, "@sessionCount", curViwTeacherFinancialStatusBO.SessionCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherEachSessionPortion", curViwTeacherFinancialStatusBO.TeacherEachSessionPortion);
            UtilityDB.AddParameter(command.Parameters, "@teacherTotalPortion", curViwTeacherFinancialStatusBO.TeacherTotalPortion);
            UtilityDB.AddParameter(command.Parameters, "@mustPaySessionCount", curViwTeacherFinancialStatusBO.MustPaySessionCount);
            UtilityDB.AddParameter(command.Parameters, "@mustPayToTeacherAmount", curViwTeacherFinancialStatusBO.MustPayToTeacherAmount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwTeacherFinancialStatus " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwTeacherFinancialStatus SET " +
            " 	isSuccessorTeacher = @isSuccessorTeacher, " +
            " 	className = @className, " +
            " 	contractValue = @contractValue, " +
            " 	contractTypeID = @contractTypeID, " +
            " 	paidToTeacher = @paidToTeacher, " +
            " 	gotFromTeacherBalance = @gotFromTeacherBalance, " +
            " 	finalPaidToTeacher = @finalPaidToTeacher, " +
            " 	classRegisterationDate = @classRegisterationDate, " +
            " 	classTotalPrice = @classTotalPrice, " +
            " 	returnMoneyForTeacherAbsentAmount = @returnMoneyForTeacherAbsentAmount, " +
            " 	schoolPrice = @schoolPrice, " +
            " 	sessionCount = @sessionCount, " +
            " 	teacherEachSessionPortion = @teacherEachSessionPortion, " +
            " 	teacherTotalPortion = @teacherTotalPortion, " +
            " 	mustPaySessionCount = @mustPaySessionCount, " +
            " 	mustPayToTeacherAmount = @mustPayToTeacherAmount " +
            " WHERE (1=1) " +
            " AND 	classID = @classID  " +
            " AND 	teacherID = @teacherID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessorTeacher", curViwTeacherFinancialStatusBO.IsSuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherFinancialStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherFinancialStatusBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherFinancialStatusBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@contractValue", curViwTeacherFinancialStatusBO.ContractValue);
            UtilityDB.AddParameter(command.Parameters, "@contractTypeID", curViwTeacherFinancialStatusBO.ContractTypeID);
            UtilityDB.AddParameter(command.Parameters, "@paidToTeacher", curViwTeacherFinancialStatusBO.PaidToTeacher);
            UtilityDB.AddParameter(command.Parameters, "@gotFromTeacherBalance", curViwTeacherFinancialStatusBO.GotFromTeacherBalance);
            UtilityDB.AddParameter(command.Parameters, "@finalPaidToTeacher", curViwTeacherFinancialStatusBO.FinalPaidToTeacher);
            UtilityDB.AddParameter(command.Parameters, "@classRegisterationDate", curViwTeacherFinancialStatusBO.ClassRegisterationDate);
            UtilityDB.AddParameter(command.Parameters, "@classTotalPrice", curViwTeacherFinancialStatusBO.ClassTotalPrice);
            UtilityDB.AddParameter(command.Parameters, "@returnMoneyForTeacherAbsentAmount", curViwTeacherFinancialStatusBO.ReturnMoneyForTeacherAbsentAmount);
            UtilityDB.AddParameter(command.Parameters, "@schoolPrice", curViwTeacherFinancialStatusBO.SchoolPrice);
            UtilityDB.AddParameter(command.Parameters, "@sessionCount", curViwTeacherFinancialStatusBO.SessionCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherEachSessionPortion", curViwTeacherFinancialStatusBO.TeacherEachSessionPortion);
            UtilityDB.AddParameter(command.Parameters, "@teacherTotalPortion", curViwTeacherFinancialStatusBO.TeacherTotalPortion);
            UtilityDB.AddParameter(command.Parameters, "@mustPaySessionCount", curViwTeacherFinancialStatusBO.MustPaySessionCount);
            UtilityDB.AddParameter(command.Parameters, "@mustPayToTeacherAmount", curViwTeacherFinancialStatusBO.MustPayToTeacherAmount);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwTeacherFinancialStatusBO Find(int classID, string teacherID)
        {
            if (teacherID == null) return null;
            string commandString = "  SELECT * FROM viwTeacherFinancialStatus ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwTeacherFinancialStatus.classID = {0}) ", classID.ToString());

            wherePart += string.Format(" AND (viwTeacherFinancialStatus.teacherID = '{0}') ", teacherID);
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwTeacherFinancialStatusBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwTeacherFinancialStatusBO();
                    ans.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessorTeacher]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
                    ans.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractValue]);
                    ans.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractTypeID]);
                    ans.PaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.PaidToTeacher]);
                    ans.GotFromTeacherBalance = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.GotFromTeacherBalance]);
                    ans.FinalPaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FinalPaidToTeacher]);
                    ans.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassRegisterationDate]);
                    ans.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassTotalPrice]);
                    ans.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    ans.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SchoolPrice]);
                    ans.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SessionCount]);
                    ans.TeacherEachSessionPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherEachSessionPortion]);
                    ans.TeacherTotalPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherTotalPortion]);
                    ans.MustPaySessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPaySessionCount]);
                    ans.MustPayToTeacherAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayToTeacherAmount]);

                }
            }
            return ans;
        }

        public static List<ViwTeacherFinancialStatusBO> List()
        {
            string commandString = " SELECT * FROM viwTeacherFinancialStatus ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherFinancialStatusBO> ans = new List<ViwTeacherFinancialStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherFinancialStatusBO item = new ViwTeacherFinancialStatusBO();
                    item.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessorTeacher]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractValue]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractTypeID]);
                    item.PaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.PaidToTeacher]);
                    item.GotFromTeacherBalance = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.GotFromTeacherBalance]);
                    item.FinalPaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FinalPaidToTeacher]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassRegisterationDate]);
                    item.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassTotalPrice]);
                    item.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SessionCount]);
                    item.TeacherEachSessionPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherEachSessionPortion]);
                    item.TeacherTotalPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherTotalPortion]);
                    item.MustPaySessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPaySessionCount]);
                    item.MustPayToTeacherAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayToTeacherAmount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwTeacherFinancialStatusBO> List(int? isSuccessorTeacher, int? classID, string teacherID, bool? activityStatus)
        {

            string commandString = " SELECT viwTeacherFinancialStatus.* FROM viwTeacherFinancialStatus INNER JOIN class on viwTeacherFinancialStatus.classID = class.classID ";
            string wherePart = " WHERE (1=1) ";
            if (isSuccessorTeacher != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialStatus.isSuccessorTeacher = {0}) ", isSuccessorTeacher.ToString());
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialStatus.classID = {0}) ", classID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwTeacherFinancialStatus.teacherID = '{0}') ", teacherID);
            }

            if (activityStatus != null)
            {
                wherePart += string.Format(" AND (class.activityStatus = {0}) ", UtilityDB.GetDBString(activityStatus));
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherFinancialStatusBO> ans = new List<ViwTeacherFinancialStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherFinancialStatusBO item = new ViwTeacherFinancialStatusBO();
                    item.IsSuccessorTeacher = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.IsSuccessorTeacher]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassName]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherID]);
                    item.ContractValue = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractValue]);
                    item.ContractTypeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ContractTypeID]);
                    item.PaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.PaidToTeacher]);
                    item.GotFromTeacherBalance = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.GotFromTeacherBalance]);
                    item.FinalPaidToTeacher = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.FinalPaidToTeacher]);
                    item.ClassRegisterationDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassRegisterationDate]);
                    item.ClassTotalPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ClassTotalPrice]);
                    item.ReturnMoneyForTeacherAbsentAmount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.ReturnMoneyForTeacherAbsentAmount]);
                    item.SchoolPrice = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SchoolPrice]);
                    item.SessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.SessionCount]);
                    item.TeacherEachSessionPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherEachSessionPortion]);
                    item.TeacherTotalPortion = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherFinancialStatus.TeacherTotalPortion]);
                    item.MustPaySessionCount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPaySessionCount]);
                    item.MustPayToTeacherAmount = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherFinancialStatus.MustPayToTeacherAmount]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwTeacherSessionStatusDA : DataAccess
    {
        #region Constructors
        public ViwTeacherSessionStatusDA(ViwTeacherSessionStatusBO inViwTeacherSessionStatusBO)
        {
            curViwTeacherSessionStatusBO = inViwTeacherSessionStatusBO;
        }
        #endregion


        #region Variables

        private ViwTeacherSessionStatusBO curViwTeacherSessionStatusBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwTeacherSessionStatus (" +
            " 	teacherID, " +
            " 	classID, " +
            " 	studentAbseneceCount, " +
            " 	continuousAbseneceCount, " +
            " 	teacherAbsenceCount, " +
            " 	willHeldCount, " +
            " 	heldCount, " +
            " 	notlHeldCount, " +
            " 	totalDedicatedSessions, " +
            " 	successorTeacherCount, " +
            " 	isSuccessor) " +
            " VALUES (" +
            " 	@teacherID, " +
            " 	@classID, " +
            " 	@studentAbseneceCount, " +
            " 	@continuousAbseneceCount, " +
            " 	@teacherAbsenceCount, " +
            " 	@willHeldCount, " +
            " 	@heldCount, " +
            " 	@notlHeldCount, " +
            " 	@totalDedicatedSessions, " +
            " 	@successorTeacherCount, " +
            " 	@isSuccessor) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherSessionStatusBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbseneceCount", curViwTeacherSessionStatusBO.StudentAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbseneceCount", curViwTeacherSessionStatusBO.ContinuousAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsenceCount", curViwTeacherSessionStatusBO.TeacherAbsenceCount);
            UtilityDB.AddParameter(command.Parameters, "@willHeldCount", curViwTeacherSessionStatusBO.WillHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@heldCount", curViwTeacherSessionStatusBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@notlHeldCount", curViwTeacherSessionStatusBO.NotlHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@totalDedicatedSessions", curViwTeacherSessionStatusBO.TotalDedicatedSessions);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacherCount", curViwTeacherSessionStatusBO.SuccessorTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherSessionStatusBO.IsSuccessor);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwTeacherSessionStatus " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionStatusBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwTeacherSessionStatus SET " +
            " 	teacherID = @teacherID, " +
            " 	studentAbseneceCount = @studentAbseneceCount, " +
            " 	continuousAbseneceCount = @continuousAbseneceCount, " +
            " 	teacherAbsenceCount = @teacherAbsenceCount, " +
            " 	willHeldCount = @willHeldCount, " +
            " 	heldCount = @heldCount, " +
            " 	notlHeldCount = @notlHeldCount, " +
            " 	totalDedicatedSessions = @totalDedicatedSessions, " +
            " 	successorTeacherCount = @successorTeacherCount, " +
            " 	isSuccessor = @isSuccessor " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherSessionStatusBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionStatusBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbseneceCount", curViwTeacherSessionStatusBO.StudentAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbseneceCount", curViwTeacherSessionStatusBO.ContinuousAbseneceCount);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsenceCount", curViwTeacherSessionStatusBO.TeacherAbsenceCount);
            UtilityDB.AddParameter(command.Parameters, "@willHeldCount", curViwTeacherSessionStatusBO.WillHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@heldCount", curViwTeacherSessionStatusBO.HeldCount);
            UtilityDB.AddParameter(command.Parameters, "@notlHeldCount", curViwTeacherSessionStatusBO.NotlHeldCount);
            UtilityDB.AddParameter(command.Parameters, "@totalDedicatedSessions", curViwTeacherSessionStatusBO.TotalDedicatedSessions);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacherCount", curViwTeacherSessionStatusBO.SuccessorTeacherCount);
            UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherSessionStatusBO.IsSuccessor);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwTeacherSessionStatusBO Find(int classID)
        {
            string commandString = "  SELECT * FROM viwTeacherSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwTeacherSessionStatus.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwTeacherSessionStatusBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwTeacherSessionStatusBO();
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherID]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionStatus.ClassID]);
                    ans.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.StudentAbseneceCount]);
                    ans.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.ContinuousAbseneceCount]);
                    ans.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherAbsenceCount]);
                    ans.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.WillHeldCount]);
                    ans.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.HeldCount]);
                    ans.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.NotlHeldCount]);
                    ans.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TotalDedicatedSessions]);
                    ans.SuccessorTeacherCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.SuccessorTeacherCount]);
                    ans.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionStatus.IsSuccessor]);

                }
            }
            return ans;
        }

        public static List<ViwTeacherSessionStatusBO> List()
        {
            string commandString = " SELECT * FROM viwTeacherSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherSessionStatusBO> ans = new List<ViwTeacherSessionStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherSessionStatusBO item = new ViwTeacherSessionStatusBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherID]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionStatus.ClassID]);
                    item.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.StudentAbseneceCount]);
                    item.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.ContinuousAbseneceCount]);
                    item.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherAbsenceCount]);
                    item.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.WillHeldCount]);
                    item.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.HeldCount]);
                    item.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.NotlHeldCount]);
                    item.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TotalDedicatedSessions]);
                    item.SuccessorTeacherCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.SuccessorTeacherCount]);
                    item.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionStatus.IsSuccessor]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwTeacherSessionStatusBO> List(string teacherID, int? classID)
        {
            string commandString = " SELECT * FROM viwTeacherSessionStatus ";
            string wherePart = " WHERE (1=1) ";
            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionStatus.teacherID = '{0}') ", teacherID);
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionStatus.classID = {0}) ", classID.ToString());
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherSessionStatusBO> ans = new List<ViwTeacherSessionStatusBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherSessionStatusBO item = new ViwTeacherSessionStatusBO();
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherID]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionStatus.ClassID]);
                    item.StudentAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.StudentAbseneceCount]);
                    item.ContinuousAbseneceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.ContinuousAbseneceCount]);
                    item.TeacherAbsenceCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TeacherAbsenceCount]);
                    item.WillHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.WillHeldCount]);
                    item.HeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.HeldCount]);
                    item.NotlHeldCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.NotlHeldCount]);
                    item.TotalDedicatedSessions = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.TotalDedicatedSessions]);
                    item.SuccessorTeacherCount = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionStatus.SuccessorTeacherCount]);
                    item.IsSuccessor = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionStatus.IsSuccessor]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class ViwTeacherSessionDetailsDA : DataAccess
    {
        #region Constructors
        public ViwTeacherSessionDetailsDA(ViwTeacherSessionDetailsBO inViwTeacherSessionDetailsBO)
        {
            curViwTeacherSessionDetailsBO = inViwTeacherSessionDetailsBO;
        }
        #endregion


        #region Variables

        private ViwTeacherSessionDetailsBO curViwTeacherSessionDetailsBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO viwTeacherSessionDetails (" +
            " 	isSuccessor, " +
            " 	classID, " +
            " 	className, " +
            " 	classDate, " +
            " 	timeID, " +
            " 	teacherID, " +
            " 	studentAbsence, " +
            " 	continuousAbsence, " +
            " 	teacherAbsence, " +
            " 	successorTeacher, " +
            " 	sessionStatus, " +
            " 	roomNo, " +
            " 	firstName, " +
            " 	lastName) " +
            " VALUES (" +
            " 	@isSuccessor, " +
            " 	@classID, " +
            " 	@className, " +
            " 	@classDate, " +
            " 	@timeID, " +
            " 	@teacherID, " +
            " 	@studentAbsence, " +
            " 	@continuousAbsence, " +
            " 	@teacherAbsence, " +
            " 	@successorTeacher, " +
            " 	@sessionStatus, " +
            " 	@roomNo, " +
            " 	@firstName, " +
            " 	@lastName) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherSessionDetailsBO.IsSuccessor);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherSessionDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwTeacherSessionDetailsBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwTeacherSessionDetailsBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherSessionDetailsBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curViwTeacherSessionDetailsBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curViwTeacherSessionDetailsBO.ContinuousAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curViwTeacherSessionDetailsBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curViwTeacherSessionDetailsBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curViwTeacherSessionDetailsBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curViwTeacherSessionDetailsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherSessionDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherSessionDetailsBO.LastName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM viwTeacherSessionDetails " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionDetailsBO.ClassID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE viwTeacherSessionDetails SET " +
            " 	isSuccessor = @isSuccessor, " +
            " 	className = @className, " +
            " 	classDate = @classDate, " +
            " 	timeID = @timeID, " +
            " 	teacherID = @teacherID, " +
            " 	studentAbsence = @studentAbsence, " +
            " 	continuousAbsence = @continuousAbsence, " +
            " 	teacherAbsence = @teacherAbsence, " +
            " 	successorTeacher = @successorTeacher, " +
            " 	sessionStatus = @sessionStatus, " +
            " 	roomNo = @roomNo, " +
            " 	firstName = @firstName, " +
            " 	lastName = @lastName " +
            " WHERE (1=1) " +
            " AND 	classID = @classID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@isSuccessor", curViwTeacherSessionDetailsBO.IsSuccessor);
            UtilityDB.AddParameter(command.Parameters, "@classID", curViwTeacherSessionDetailsBO.ClassID);
            UtilityDB.AddParameter(command.Parameters, "@className", curViwTeacherSessionDetailsBO.ClassName);
            UtilityDB.AddParameter(command.Parameters, "@classDate", curViwTeacherSessionDetailsBO.ClassDate);
            UtilityDB.AddParameter(command.Parameters, "@timeID", curViwTeacherSessionDetailsBO.TimeID);
            UtilityDB.AddParameter(command.Parameters, "@teacherID", curViwTeacherSessionDetailsBO.TeacherID);
            UtilityDB.AddParameter(command.Parameters, "@studentAbsence", curViwTeacherSessionDetailsBO.StudentAbsence);
            UtilityDB.AddParameter(command.Parameters, "@continuousAbsence", curViwTeacherSessionDetailsBO.ContinuousAbsence);
            UtilityDB.AddParameter(command.Parameters, "@teacherAbsence", curViwTeacherSessionDetailsBO.TeacherAbsence);
            UtilityDB.AddParameter(command.Parameters, "@successorTeacher", curViwTeacherSessionDetailsBO.SuccessorTeacher);
            UtilityDB.AddParameter(command.Parameters, "@sessionStatus", curViwTeacherSessionDetailsBO.SessionStatus);
            UtilityDB.AddParameter(command.Parameters, "@roomNo", curViwTeacherSessionDetailsBO.RoomNo);
            UtilityDB.AddParameter(command.Parameters, "@firstName", curViwTeacherSessionDetailsBO.FirstName);
            UtilityDB.AddParameter(command.Parameters, "@lastName", curViwTeacherSessionDetailsBO.LastName);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static ViwTeacherSessionDetailsBO Find(int classID)
        {
            string commandString = "  SELECT * FROM viwTeacherSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (viwTeacherSessionDetails.classID = {0}) ", classID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            ViwTeacherSessionDetailsBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new ViwTeacherSessionDetailsBO();
                    ans.IsSuccessor = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.IsSuccessor]);
                    ans.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassID]);
                    ans.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassName]);
                    ans.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassDate]);
                    ans.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.TimeID]);
                    ans.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherID]);
                    ans.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.StudentAbsence]);
                    ans.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.ContinuousAbsence]);
                    ans.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherAbsence]);
                    ans.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.SuccessorTeacher]);
                    ans.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.SessionStatus]);
                    ans.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionDetails.RoomNo]);
                    ans.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.FirstName]);
                    ans.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.LastName]);

                }
            }
            return ans;
        }

        public static List<ViwTeacherSessionDetailsBO> List(int? isSuccessor, int? classID, string classDate, int? timeID, string teacherID)
        {
            string commandString = " SELECT * FROM viwTeacherSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            if (isSuccessor != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionDetails.isSuccessor = {0}) ", isSuccessor.ToString());
            }

            if (classID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionDetails.classID = {0}) ", classID.ToString());
            }

            if (classDate != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionDetails.classDate = '{0}') ", classDate);
            }

            if (timeID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionDetails.timeID = {0}) ", timeID.ToString());
            }

            if (teacherID != null)
            {
                wherePart += string.Format(" AND (viwTeacherSessionDetails.teacherID = '{0}') ", teacherID);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherSessionDetailsBO> ans = new List<ViwTeacherSessionDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherSessionDetailsBO item = new ViwTeacherSessionDetailsBO();
                    item.IsSuccessor = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.IsSuccessor]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.TimeID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.StudentAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.ContinuousAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherAbsence]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.SuccessorTeacher]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionDetails.RoomNo]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.LastName]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<ViwTeacherSessionDetailsBO> List()
        {
            string commandString = " SELECT * FROM viwTeacherSessionDetails ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<ViwTeacherSessionDetailsBO> ans = new List<ViwTeacherSessionDetailsBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    ViwTeacherSessionDetailsBO item = new ViwTeacherSessionDetailsBO();
                    item.IsSuccessor = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.IsSuccessor]);
                    item.ClassID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassID]);
                    item.ClassName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassName]);
                    item.ClassDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.ClassDate]);
                    item.TimeID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.TimeID]);
                    item.TeacherID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherID]);
                    item.StudentAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.StudentAbsence]);
                    item.ContinuousAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.ContinuousAbsence]);
                    item.TeacherAbsence = UtilityDB.ReadReader<bool>(reader[DatabaseSchema.ViwTeacherSessionDetails.TeacherAbsence]);
                    item.SuccessorTeacher = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.SuccessorTeacher]);
                    item.SessionStatus = UtilityDB.ReadReader<int>(reader[DatabaseSchema.ViwTeacherSessionDetails.SessionStatus]);
                    item.RoomNo = UtilityDB.ReadReader<int?>(reader[DatabaseSchema.ViwTeacherSessionDetails.RoomNo]);
                    item.FirstName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.FirstName]);
                    item.LastName = UtilityDB.ReadReader<string>(reader[DatabaseSchema.ViwTeacherSessionDetails.LastName]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }

    public partial class DatabaseSynchDA : DataAccess
    {
        #region Constructors
        public DatabaseSynchDA(DatabaseSynchBO inDatabaseSynchBO)
        {
            curDatabaseSynchBO = inDatabaseSynchBO;
            LastChangeFiller.SetChangesInfo(curDatabaseSynchBO);
        }
        #endregion


        #region Variables

        private DatabaseSynchBO curDatabaseSynchBO = null;
        #endregion


        #region Methods

        public override bool Add()
        {
            string commandString =
            " INSERT INTO databaseSynch (" +
            " 	herDbAddress, " +
            " 	lastUpdateDate, " +
            " 	lastUpdateTime, " +
            " 	targetDeviceNameFarsi, " +
            " 	targetDeviceNameEnglish, " +
            " 	lastChangeID, " +
            " 	lastChangeDate, " +
            " 	lastChangeTime) " +
            " VALUES (" +
            " 	@herDbAddress, " +
            " 	@lastUpdateDate, " +
            " 	@lastUpdateTime, " +
            " 	@targetDeviceNameFarsi, " +
            " 	@targetDeviceNameEnglish, " +
            " 	@lastChangeID, " +
            " 	@lastChangeDate, " +
            " 	@lastChangeTime) ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@herDbAddress", curDatabaseSynchBO.HerDbAddress);
            UtilityDB.AddParameter(command.Parameters, "@lastUpdateDate", curDatabaseSynchBO.LastUpdateDate);
            UtilityDB.AddParameter(command.Parameters, "@lastUpdateTime", curDatabaseSynchBO.LastUpdateTime);
            UtilityDB.AddParameter(command.Parameters, "@targetDeviceNameFarsi", curDatabaseSynchBO.TargetDeviceNameFarsi);
            UtilityDB.AddParameter(command.Parameters, "@targetDeviceNameEnglish", curDatabaseSynchBO.TargetDeviceNameEnglish);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDatabaseSynchBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDatabaseSynchBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDatabaseSynchBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Delete()
        {
            string commandString =
            " DELETE FROM databaseSynch " +
            " WHERE (1=1) " +
            " AND 	dbDeviceID = @dbDeviceID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@dbDeviceID", curDatabaseSynchBO.DbDeviceID);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public override bool Update()
        {
            string commandString =
            " UPDATE databaseSynch SET " +
            " 	herDbAddress = @herDbAddress, " +
            " 	lastUpdateDate = @lastUpdateDate, " +
            " 	lastUpdateTime = @lastUpdateTime, " +
            " 	targetDeviceNameFarsi = @targetDeviceNameFarsi, " +
            " 	targetDeviceNameEnglish = @targetDeviceNameEnglish, " +
            " 	lastChangeID = @lastChangeID, " +
            " 	lastChangeDate = @lastChangeDate, " +
            " 	lastChangeTime = @lastChangeTime " +
            " WHERE (1=1) " +
            " AND 	dbDeviceID = @dbDeviceID ";

            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;

            // Adding Parameters...
            UtilityDB.AddParameter(command.Parameters, "@dbDeviceID", curDatabaseSynchBO.DbDeviceID);
            UtilityDB.AddParameter(command.Parameters, "@herDbAddress", curDatabaseSynchBO.HerDbAddress);
            UtilityDB.AddParameter(command.Parameters, "@lastUpdateDate", curDatabaseSynchBO.LastUpdateDate);
            UtilityDB.AddParameter(command.Parameters, "@lastUpdateTime", curDatabaseSynchBO.LastUpdateTime);
            UtilityDB.AddParameter(command.Parameters, "@targetDeviceNameFarsi", curDatabaseSynchBO.TargetDeviceNameFarsi);
            UtilityDB.AddParameter(command.Parameters, "@targetDeviceNameEnglish", curDatabaseSynchBO.TargetDeviceNameEnglish);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeID", curDatabaseSynchBO.LastChangeID);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeDate", curDatabaseSynchBO.LastChangeDate);
            UtilityDB.AddParameter(command.Parameters, "@lastChangeTime", curDatabaseSynchBO.LastChangeTime);

            // Doing Database part...
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                if ((JobLogger.RunCommandNonQuery(command)) == 1)
                    return true;
                else
                    return false;
            }
        }

        public static DatabaseSynchBO Find(int dbDeviceID)
        {
            string commandString = "  SELECT * FROM databaseSynch ";
            string wherePart = " WHERE (1=1) ";
            wherePart += string.Format(" AND (databaseSynch.dbDeviceID = {0}) ", dbDeviceID.ToString());

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            DatabaseSynchBO ans = null;
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                if (reader.Read())
                {
                    ans = new DatabaseSynchBO();
                    ans.DbDeviceID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DatabaseSynch.DbDeviceID]);
                    ans.HerDbAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.HerDbAddress]);
                    ans.LastUpdateDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateDate]);
                    ans.LastUpdateTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateTime]);
                    ans.TargetDeviceNameFarsi = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameFarsi]);
                    ans.TargetDeviceNameEnglish = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameEnglish]);
                    ans.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeID]);
                    ans.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeDate]);
                    ans.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeTime]);

                }
            }
            return ans;
        }

        public static List<DatabaseSynchBO> List()
        {
            string commandString = " SELECT * FROM databaseSynch ";
            string wherePart = " WHERE (1=1) ";
            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DatabaseSynchBO> ans = new List<DatabaseSynchBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DatabaseSynchBO item = new DatabaseSynchBO();
                    item.DbDeviceID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DatabaseSynch.DbDeviceID]);
                    item.HerDbAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.HerDbAddress]);
                    item.LastUpdateDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateDate]);
                    item.LastUpdateTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateTime]);
                    item.TargetDeviceNameFarsi = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameFarsi]);
                    item.TargetDeviceNameEnglish = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameEnglish]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        public static List<DatabaseSynchBO> List(string targetDeviceNameFarsi, string targetDeviceNameEnglish)
        {
            string commandString = " SELECT * FROM databaseSynch ";
            string wherePart = " WHERE (1=1) ";
            if (targetDeviceNameFarsi != null)
            {
                wherePart += string.Format(" AND (databaseSynch.targetDeviceNameFarsi = '{0}') ", targetDeviceNameFarsi);
            }

            if (targetDeviceNameEnglish != null)
            {
                wherePart += string.Format(" AND (databaseSynch.targetDeviceNameEnglish = '{0}') ", targetDeviceNameEnglish);
            }

            commandString += wherePart;
            SqlCommand command = new SqlCommand();
            command.CommandText = commandString;
            List<DatabaseSynchBO> ans = new List<DatabaseSynchBO>();
            using (/*SqlConnection connection = new SqlConnection(connectionString)*/connection)
            {
                checkConnectionState(connection);  connection.Open();
                command.Connection = connection;
                SqlDataReader reader = (JobLogger.RunCommandReader(command));
                while (reader.Read())
                {
                    DatabaseSynchBO item = new DatabaseSynchBO();
                    item.DbDeviceID = UtilityDB.ReadReader<int>(reader[DatabaseSchema.DatabaseSynch.DbDeviceID]);
                    item.HerDbAddress = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.HerDbAddress]);
                    item.LastUpdateDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateDate]);
                    item.LastUpdateTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastUpdateTime]);
                    item.TargetDeviceNameFarsi = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameFarsi]);
                    item.TargetDeviceNameEnglish = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.TargetDeviceNameEnglish]);
                    item.LastChangeID = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeID]);
                    item.LastChangeDate = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeDate]);
                    item.LastChangeTime = UtilityDB.ReadReader<string>(reader[DatabaseSchema.DatabaseSynch.LastChangeTime]);

                    ans.Add(item);
                }
            }
            return ans;
        }
        #endregion
    }


}